
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Ride
 * 
 */
export type Ride = $Result.DefaultSelection<Prisma.$RidePayload>
/**
 * Model Car
 * 
 */
export type Car = $Result.DefaultSelection<Prisma.$CarPayload>
/**
 * Model Driver
 * 
 */
export type Driver = $Result.DefaultSelection<Prisma.$DriverPayload>
/**
 * Model Zone
 * 
 */
export type Zone = $Result.DefaultSelection<Prisma.$ZonePayload>
/**
 * Model Route
 * 
 */
export type Route = $Result.DefaultSelection<Prisma.$RoutePayload>
/**
 * Model Subzone
 * 
 */
export type Subzone = $Result.DefaultSelection<Prisma.$SubzonePayload>
/**
 * Model MeetingPoint
 * 
 */
export type MeetingPoint = $Result.DefaultSelection<Prisma.$MeetingPointPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Rides
 * const rides = await prisma.ride.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Rides
   * const rides = await prisma.ride.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.ride`: Exposes CRUD operations for the **Ride** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rides
    * const rides = await prisma.ride.findMany()
    * ```
    */
  get ride(): Prisma.RideDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.car`: Exposes CRUD operations for the **Car** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cars
    * const cars = await prisma.car.findMany()
    * ```
    */
  get car(): Prisma.CarDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.driver`: Exposes CRUD operations for the **Driver** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Drivers
    * const drivers = await prisma.driver.findMany()
    * ```
    */
  get driver(): Prisma.DriverDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.zone`: Exposes CRUD operations for the **Zone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Zones
    * const zones = await prisma.zone.findMany()
    * ```
    */
  get zone(): Prisma.ZoneDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.route`: Exposes CRUD operations for the **Route** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Routes
    * const routes = await prisma.route.findMany()
    * ```
    */
  get route(): Prisma.RouteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subzone`: Exposes CRUD operations for the **Subzone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subzones
    * const subzones = await prisma.subzone.findMany()
    * ```
    */
  get subzone(): Prisma.SubzoneDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.meetingPoint`: Exposes CRUD operations for the **MeetingPoint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetingPoints
    * const meetingPoints = await prisma.meetingPoint.findMany()
    * ```
    */
  get meetingPoint(): Prisma.MeetingPointDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Ride: 'Ride',
    Car: 'Car',
    Driver: 'Driver',
    Zone: 'Zone',
    Route: 'Route',
    Subzone: 'Subzone',
    MeetingPoint: 'MeetingPoint'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "ride" | "car" | "driver" | "zone" | "route" | "subzone" | "meetingPoint"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Ride: {
        payload: Prisma.$RidePayload<ExtArgs>
        fields: Prisma.RideFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RideFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RidePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RideFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RidePayload>
          }
          findFirst: {
            args: Prisma.RideFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RidePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RideFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RidePayload>
          }
          findMany: {
            args: Prisma.RideFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RidePayload>[]
          }
          create: {
            args: Prisma.RideCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RidePayload>
          }
          createMany: {
            args: Prisma.RideCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RideCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RidePayload>[]
          }
          delete: {
            args: Prisma.RideDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RidePayload>
          }
          update: {
            args: Prisma.RideUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RidePayload>
          }
          deleteMany: {
            args: Prisma.RideDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RideUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RideUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RidePayload>[]
          }
          upsert: {
            args: Prisma.RideUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RidePayload>
          }
          aggregate: {
            args: Prisma.RideAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRide>
          }
          groupBy: {
            args: Prisma.RideGroupByArgs<ExtArgs>
            result: $Utils.Optional<RideGroupByOutputType>[]
          }
          count: {
            args: Prisma.RideCountArgs<ExtArgs>
            result: $Utils.Optional<RideCountAggregateOutputType> | number
          }
        }
      }
      Car: {
        payload: Prisma.$CarPayload<ExtArgs>
        fields: Prisma.CarFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CarFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CarFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload>
          }
          findFirst: {
            args: Prisma.CarFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CarFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload>
          }
          findMany: {
            args: Prisma.CarFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload>[]
          }
          create: {
            args: Prisma.CarCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload>
          }
          createMany: {
            args: Prisma.CarCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CarCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload>[]
          }
          delete: {
            args: Prisma.CarDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload>
          }
          update: {
            args: Prisma.CarUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload>
          }
          deleteMany: {
            args: Prisma.CarDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CarUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CarUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload>[]
          }
          upsert: {
            args: Prisma.CarUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload>
          }
          aggregate: {
            args: Prisma.CarAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCar>
          }
          groupBy: {
            args: Prisma.CarGroupByArgs<ExtArgs>
            result: $Utils.Optional<CarGroupByOutputType>[]
          }
          count: {
            args: Prisma.CarCountArgs<ExtArgs>
            result: $Utils.Optional<CarCountAggregateOutputType> | number
          }
        }
      }
      Driver: {
        payload: Prisma.$DriverPayload<ExtArgs>
        fields: Prisma.DriverFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DriverFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DriverFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>
          }
          findFirst: {
            args: Prisma.DriverFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DriverFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>
          }
          findMany: {
            args: Prisma.DriverFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>[]
          }
          create: {
            args: Prisma.DriverCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>
          }
          createMany: {
            args: Prisma.DriverCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DriverCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>[]
          }
          delete: {
            args: Prisma.DriverDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>
          }
          update: {
            args: Prisma.DriverUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>
          }
          deleteMany: {
            args: Prisma.DriverDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DriverUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DriverUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>[]
          }
          upsert: {
            args: Prisma.DriverUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>
          }
          aggregate: {
            args: Prisma.DriverAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDriver>
          }
          groupBy: {
            args: Prisma.DriverGroupByArgs<ExtArgs>
            result: $Utils.Optional<DriverGroupByOutputType>[]
          }
          count: {
            args: Prisma.DriverCountArgs<ExtArgs>
            result: $Utils.Optional<DriverCountAggregateOutputType> | number
          }
        }
      }
      Zone: {
        payload: Prisma.$ZonePayload<ExtArgs>
        fields: Prisma.ZoneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ZoneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ZoneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          findFirst: {
            args: Prisma.ZoneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ZoneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          findMany: {
            args: Prisma.ZoneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>[]
          }
          create: {
            args: Prisma.ZoneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          createMany: {
            args: Prisma.ZoneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ZoneCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>[]
          }
          delete: {
            args: Prisma.ZoneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          update: {
            args: Prisma.ZoneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          deleteMany: {
            args: Prisma.ZoneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ZoneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ZoneUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>[]
          }
          upsert: {
            args: Prisma.ZoneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          aggregate: {
            args: Prisma.ZoneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateZone>
          }
          groupBy: {
            args: Prisma.ZoneGroupByArgs<ExtArgs>
            result: $Utils.Optional<ZoneGroupByOutputType>[]
          }
          count: {
            args: Prisma.ZoneCountArgs<ExtArgs>
            result: $Utils.Optional<ZoneCountAggregateOutputType> | number
          }
        }
      }
      Route: {
        payload: Prisma.$RoutePayload<ExtArgs>
        fields: Prisma.RouteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RouteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RouteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          findFirst: {
            args: Prisma.RouteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RouteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          findMany: {
            args: Prisma.RouteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>[]
          }
          create: {
            args: Prisma.RouteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          createMany: {
            args: Prisma.RouteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RouteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>[]
          }
          delete: {
            args: Prisma.RouteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          update: {
            args: Prisma.RouteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          deleteMany: {
            args: Prisma.RouteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RouteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RouteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>[]
          }
          upsert: {
            args: Prisma.RouteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          aggregate: {
            args: Prisma.RouteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoute>
          }
          groupBy: {
            args: Prisma.RouteGroupByArgs<ExtArgs>
            result: $Utils.Optional<RouteGroupByOutputType>[]
          }
          count: {
            args: Prisma.RouteCountArgs<ExtArgs>
            result: $Utils.Optional<RouteCountAggregateOutputType> | number
          }
        }
      }
      Subzone: {
        payload: Prisma.$SubzonePayload<ExtArgs>
        fields: Prisma.SubzoneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubzoneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubzonePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubzoneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubzonePayload>
          }
          findFirst: {
            args: Prisma.SubzoneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubzonePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubzoneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubzonePayload>
          }
          findMany: {
            args: Prisma.SubzoneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubzonePayload>[]
          }
          create: {
            args: Prisma.SubzoneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubzonePayload>
          }
          createMany: {
            args: Prisma.SubzoneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubzoneCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubzonePayload>[]
          }
          delete: {
            args: Prisma.SubzoneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubzonePayload>
          }
          update: {
            args: Prisma.SubzoneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubzonePayload>
          }
          deleteMany: {
            args: Prisma.SubzoneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubzoneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubzoneUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubzonePayload>[]
          }
          upsert: {
            args: Prisma.SubzoneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubzonePayload>
          }
          aggregate: {
            args: Prisma.SubzoneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubzone>
          }
          groupBy: {
            args: Prisma.SubzoneGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubzoneGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubzoneCountArgs<ExtArgs>
            result: $Utils.Optional<SubzoneCountAggregateOutputType> | number
          }
        }
      }
      MeetingPoint: {
        payload: Prisma.$MeetingPointPayload<ExtArgs>
        fields: Prisma.MeetingPointFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeetingPointFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPointPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeetingPointFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPointPayload>
          }
          findFirst: {
            args: Prisma.MeetingPointFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPointPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeetingPointFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPointPayload>
          }
          findMany: {
            args: Prisma.MeetingPointFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPointPayload>[]
          }
          create: {
            args: Prisma.MeetingPointCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPointPayload>
          }
          createMany: {
            args: Prisma.MeetingPointCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MeetingPointCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPointPayload>[]
          }
          delete: {
            args: Prisma.MeetingPointDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPointPayload>
          }
          update: {
            args: Prisma.MeetingPointUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPointPayload>
          }
          deleteMany: {
            args: Prisma.MeetingPointDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeetingPointUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MeetingPointUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPointPayload>[]
          }
          upsert: {
            args: Prisma.MeetingPointUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPointPayload>
          }
          aggregate: {
            args: Prisma.MeetingPointAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeetingPoint>
          }
          groupBy: {
            args: Prisma.MeetingPointGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeetingPointGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeetingPointCountArgs<ExtArgs>
            result: $Utils.Optional<MeetingPointCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    ride?: RideOmit
    car?: CarOmit
    driver?: DriverOmit
    zone?: ZoneOmit
    route?: RouteOmit
    subzone?: SubzoneOmit
    meetingPoint?: MeetingPointOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CarCountOutputType
   */

  export type CarCountOutputType = {
    rides: number
  }

  export type CarCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rides?: boolean | CarCountOutputTypeCountRidesArgs
  }

  // Custom InputTypes
  /**
   * CarCountOutputType without action
   */
  export type CarCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCountOutputType
     */
    select?: CarCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CarCountOutputType without action
   */
  export type CarCountOutputTypeCountRidesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RideWhereInput
  }


  /**
   * Count Type DriverCountOutputType
   */

  export type DriverCountOutputType = {
    cars: number
    rides: number
  }

  export type DriverCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | DriverCountOutputTypeCountCarsArgs
    rides?: boolean | DriverCountOutputTypeCountRidesArgs
  }

  // Custom InputTypes
  /**
   * DriverCountOutputType without action
   */
  export type DriverCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DriverCountOutputType
     */
    select?: DriverCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DriverCountOutputType without action
   */
  export type DriverCountOutputTypeCountCarsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarWhereInput
  }

  /**
   * DriverCountOutputType without action
   */
  export type DriverCountOutputTypeCountRidesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RideWhereInput
  }


  /**
   * Count Type ZoneCountOutputType
   */

  export type ZoneCountOutputType = {
    routes: number
  }

  export type ZoneCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    routes?: boolean | ZoneCountOutputTypeCountRoutesArgs
  }

  // Custom InputTypes
  /**
   * ZoneCountOutputType without action
   */
  export type ZoneCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneCountOutputType
     */
    select?: ZoneCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ZoneCountOutputType without action
   */
  export type ZoneCountOutputTypeCountRoutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RouteWhereInput
  }


  /**
   * Count Type RouteCountOutputType
   */

  export type RouteCountOutputType = {
    meetingPoints: number
    Subzone: number
  }

  export type RouteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetingPoints?: boolean | RouteCountOutputTypeCountMeetingPointsArgs
    Subzone?: boolean | RouteCountOutputTypeCountSubzoneArgs
  }

  // Custom InputTypes
  /**
   * RouteCountOutputType without action
   */
  export type RouteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteCountOutputType
     */
    select?: RouteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RouteCountOutputType without action
   */
  export type RouteCountOutputTypeCountMeetingPointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetingPointWhereInput
  }

  /**
   * RouteCountOutputType without action
   */
  export type RouteCountOutputTypeCountSubzoneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubzoneWhereInput
  }


  /**
   * Count Type SubzoneCountOutputType
   */

  export type SubzoneCountOutputType = {
    meetingPoints: number
  }

  export type SubzoneCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetingPoints?: boolean | SubzoneCountOutputTypeCountMeetingPointsArgs
  }

  // Custom InputTypes
  /**
   * SubzoneCountOutputType without action
   */
  export type SubzoneCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubzoneCountOutputType
     */
    select?: SubzoneCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubzoneCountOutputType without action
   */
  export type SubzoneCountOutputTypeCountMeetingPointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetingPointWhereInput
  }


  /**
   * Count Type MeetingPointCountOutputType
   */

  export type MeetingPointCountOutputType = {
    ridesAsOrigin: number
    ridesAsDestination: number
  }

  export type MeetingPointCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ridesAsOrigin?: boolean | MeetingPointCountOutputTypeCountRidesAsOriginArgs
    ridesAsDestination?: boolean | MeetingPointCountOutputTypeCountRidesAsDestinationArgs
  }

  // Custom InputTypes
  /**
   * MeetingPointCountOutputType without action
   */
  export type MeetingPointCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingPointCountOutputType
     */
    select?: MeetingPointCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MeetingPointCountOutputType without action
   */
  export type MeetingPointCountOutputTypeCountRidesAsOriginArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RideWhereInput
  }

  /**
   * MeetingPointCountOutputType without action
   */
  export type MeetingPointCountOutputTypeCountRidesAsDestinationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RideWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Ride
   */

  export type AggregateRide = {
    _count: RideCountAggregateOutputType | null
    _avg: RideAvgAggregateOutputType | null
    _sum: RideSumAggregateOutputType | null
    _min: RideMinAggregateOutputType | null
    _max: RideMaxAggregateOutputType | null
  }

  export type RideAvgAggregateOutputType = {
    id: number | null
    driverId: number | null
    carId: number | null
    price: number | null
    seatsLeft: number | null
    originId: number | null
    destinationId: number | null
    estimatedTime: number | null
    distance: number | null
  }

  export type RideSumAggregateOutputType = {
    id: number | null
    driverId: number | null
    carId: number | null
    price: number | null
    seatsLeft: number | null
    originId: number | null
    destinationId: number | null
    estimatedTime: number | null
    distance: number | null
  }

  export type RideMinAggregateOutputType = {
    id: number | null
    driverId: number | null
    carId: number | null
    createdAt: Date | null
    departureTime: Date | null
    fromGiu: boolean | null
    girlsOnly: boolean | null
    price: number | null
    seatsLeft: number | null
    active: boolean | null
    originId: number | null
    destinationId: number | null
    estimatedTime: number | null
    distance: number | null
  }

  export type RideMaxAggregateOutputType = {
    id: number | null
    driverId: number | null
    carId: number | null
    createdAt: Date | null
    departureTime: Date | null
    fromGiu: boolean | null
    girlsOnly: boolean | null
    price: number | null
    seatsLeft: number | null
    active: boolean | null
    originId: number | null
    destinationId: number | null
    estimatedTime: number | null
    distance: number | null
  }

  export type RideCountAggregateOutputType = {
    id: number
    driverId: number
    carId: number
    createdAt: number
    departureTime: number
    fromGiu: number
    girlsOnly: number
    price: number
    seatsLeft: number
    active: number
    originId: number
    destinationId: number
    estimatedTime: number
    distance: number
    _all: number
  }


  export type RideAvgAggregateInputType = {
    id?: true
    driverId?: true
    carId?: true
    price?: true
    seatsLeft?: true
    originId?: true
    destinationId?: true
    estimatedTime?: true
    distance?: true
  }

  export type RideSumAggregateInputType = {
    id?: true
    driverId?: true
    carId?: true
    price?: true
    seatsLeft?: true
    originId?: true
    destinationId?: true
    estimatedTime?: true
    distance?: true
  }

  export type RideMinAggregateInputType = {
    id?: true
    driverId?: true
    carId?: true
    createdAt?: true
    departureTime?: true
    fromGiu?: true
    girlsOnly?: true
    price?: true
    seatsLeft?: true
    active?: true
    originId?: true
    destinationId?: true
    estimatedTime?: true
    distance?: true
  }

  export type RideMaxAggregateInputType = {
    id?: true
    driverId?: true
    carId?: true
    createdAt?: true
    departureTime?: true
    fromGiu?: true
    girlsOnly?: true
    price?: true
    seatsLeft?: true
    active?: true
    originId?: true
    destinationId?: true
    estimatedTime?: true
    distance?: true
  }

  export type RideCountAggregateInputType = {
    id?: true
    driverId?: true
    carId?: true
    createdAt?: true
    departureTime?: true
    fromGiu?: true
    girlsOnly?: true
    price?: true
    seatsLeft?: true
    active?: true
    originId?: true
    destinationId?: true
    estimatedTime?: true
    distance?: true
    _all?: true
  }

  export type RideAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ride to aggregate.
     */
    where?: RideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rides to fetch.
     */
    orderBy?: RideOrderByWithRelationInput | RideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rides
    **/
    _count?: true | RideCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RideAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RideSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RideMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RideMaxAggregateInputType
  }

  export type GetRideAggregateType<T extends RideAggregateArgs> = {
        [P in keyof T & keyof AggregateRide]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRide[P]>
      : GetScalarType<T[P], AggregateRide[P]>
  }




  export type RideGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RideWhereInput
    orderBy?: RideOrderByWithAggregationInput | RideOrderByWithAggregationInput[]
    by: RideScalarFieldEnum[] | RideScalarFieldEnum
    having?: RideScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RideCountAggregateInputType | true
    _avg?: RideAvgAggregateInputType
    _sum?: RideSumAggregateInputType
    _min?: RideMinAggregateInputType
    _max?: RideMaxAggregateInputType
  }

  export type RideGroupByOutputType = {
    id: number
    driverId: number
    carId: number
    createdAt: Date
    departureTime: Date
    fromGiu: boolean
    girlsOnly: boolean
    price: number
    seatsLeft: number
    active: boolean
    originId: number
    destinationId: number
    estimatedTime: number
    distance: number
    _count: RideCountAggregateOutputType | null
    _avg: RideAvgAggregateOutputType | null
    _sum: RideSumAggregateOutputType | null
    _min: RideMinAggregateOutputType | null
    _max: RideMaxAggregateOutputType | null
  }

  type GetRideGroupByPayload<T extends RideGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RideGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RideGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RideGroupByOutputType[P]>
            : GetScalarType<T[P], RideGroupByOutputType[P]>
        }
      >
    >


  export type RideSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    driverId?: boolean
    carId?: boolean
    createdAt?: boolean
    departureTime?: boolean
    fromGiu?: boolean
    girlsOnly?: boolean
    price?: boolean
    seatsLeft?: boolean
    active?: boolean
    originId?: boolean
    destinationId?: boolean
    estimatedTime?: boolean
    distance?: boolean
    car?: boolean | CarDefaultArgs<ExtArgs>
    driver?: boolean | DriverDefaultArgs<ExtArgs>
    origin?: boolean | MeetingPointDefaultArgs<ExtArgs>
    destination?: boolean | MeetingPointDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ride"]>

  export type RideSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    driverId?: boolean
    carId?: boolean
    createdAt?: boolean
    departureTime?: boolean
    fromGiu?: boolean
    girlsOnly?: boolean
    price?: boolean
    seatsLeft?: boolean
    active?: boolean
    originId?: boolean
    destinationId?: boolean
    estimatedTime?: boolean
    distance?: boolean
    car?: boolean | CarDefaultArgs<ExtArgs>
    driver?: boolean | DriverDefaultArgs<ExtArgs>
    origin?: boolean | MeetingPointDefaultArgs<ExtArgs>
    destination?: boolean | MeetingPointDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ride"]>

  export type RideSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    driverId?: boolean
    carId?: boolean
    createdAt?: boolean
    departureTime?: boolean
    fromGiu?: boolean
    girlsOnly?: boolean
    price?: boolean
    seatsLeft?: boolean
    active?: boolean
    originId?: boolean
    destinationId?: boolean
    estimatedTime?: boolean
    distance?: boolean
    car?: boolean | CarDefaultArgs<ExtArgs>
    driver?: boolean | DriverDefaultArgs<ExtArgs>
    origin?: boolean | MeetingPointDefaultArgs<ExtArgs>
    destination?: boolean | MeetingPointDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ride"]>

  export type RideSelectScalar = {
    id?: boolean
    driverId?: boolean
    carId?: boolean
    createdAt?: boolean
    departureTime?: boolean
    fromGiu?: boolean
    girlsOnly?: boolean
    price?: boolean
    seatsLeft?: boolean
    active?: boolean
    originId?: boolean
    destinationId?: boolean
    estimatedTime?: boolean
    distance?: boolean
  }

  export type RideOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "driverId" | "carId" | "createdAt" | "departureTime" | "fromGiu" | "girlsOnly" | "price" | "seatsLeft" | "active" | "originId" | "destinationId" | "estimatedTime" | "distance", ExtArgs["result"]["ride"]>
  export type RideInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    car?: boolean | CarDefaultArgs<ExtArgs>
    driver?: boolean | DriverDefaultArgs<ExtArgs>
    origin?: boolean | MeetingPointDefaultArgs<ExtArgs>
    destination?: boolean | MeetingPointDefaultArgs<ExtArgs>
  }
  export type RideIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    car?: boolean | CarDefaultArgs<ExtArgs>
    driver?: boolean | DriverDefaultArgs<ExtArgs>
    origin?: boolean | MeetingPointDefaultArgs<ExtArgs>
    destination?: boolean | MeetingPointDefaultArgs<ExtArgs>
  }
  export type RideIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    car?: boolean | CarDefaultArgs<ExtArgs>
    driver?: boolean | DriverDefaultArgs<ExtArgs>
    origin?: boolean | MeetingPointDefaultArgs<ExtArgs>
    destination?: boolean | MeetingPointDefaultArgs<ExtArgs>
  }

  export type $RidePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ride"
    objects: {
      car: Prisma.$CarPayload<ExtArgs>
      driver: Prisma.$DriverPayload<ExtArgs>
      origin: Prisma.$MeetingPointPayload<ExtArgs>
      destination: Prisma.$MeetingPointPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      driverId: number
      carId: number
      createdAt: Date
      departureTime: Date
      fromGiu: boolean
      girlsOnly: boolean
      price: number
      seatsLeft: number
      active: boolean
      originId: number
      destinationId: number
      estimatedTime: number
      distance: number
    }, ExtArgs["result"]["ride"]>
    composites: {}
  }

  type RideGetPayload<S extends boolean | null | undefined | RideDefaultArgs> = $Result.GetResult<Prisma.$RidePayload, S>

  type RideCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RideFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RideCountAggregateInputType | true
    }

  export interface RideDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ride'], meta: { name: 'Ride' } }
    /**
     * Find zero or one Ride that matches the filter.
     * @param {RideFindUniqueArgs} args - Arguments to find a Ride
     * @example
     * // Get one Ride
     * const ride = await prisma.ride.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RideFindUniqueArgs>(args: SelectSubset<T, RideFindUniqueArgs<ExtArgs>>): Prisma__RideClient<$Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ride that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RideFindUniqueOrThrowArgs} args - Arguments to find a Ride
     * @example
     * // Get one Ride
     * const ride = await prisma.ride.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RideFindUniqueOrThrowArgs>(args: SelectSubset<T, RideFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RideClient<$Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ride that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideFindFirstArgs} args - Arguments to find a Ride
     * @example
     * // Get one Ride
     * const ride = await prisma.ride.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RideFindFirstArgs>(args?: SelectSubset<T, RideFindFirstArgs<ExtArgs>>): Prisma__RideClient<$Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ride that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideFindFirstOrThrowArgs} args - Arguments to find a Ride
     * @example
     * // Get one Ride
     * const ride = await prisma.ride.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RideFindFirstOrThrowArgs>(args?: SelectSubset<T, RideFindFirstOrThrowArgs<ExtArgs>>): Prisma__RideClient<$Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Rides that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rides
     * const rides = await prisma.ride.findMany()
     * 
     * // Get first 10 Rides
     * const rides = await prisma.ride.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rideWithIdOnly = await prisma.ride.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RideFindManyArgs>(args?: SelectSubset<T, RideFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ride.
     * @param {RideCreateArgs} args - Arguments to create a Ride.
     * @example
     * // Create one Ride
     * const Ride = await prisma.ride.create({
     *   data: {
     *     // ... data to create a Ride
     *   }
     * })
     * 
     */
    create<T extends RideCreateArgs>(args: SelectSubset<T, RideCreateArgs<ExtArgs>>): Prisma__RideClient<$Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Rides.
     * @param {RideCreateManyArgs} args - Arguments to create many Rides.
     * @example
     * // Create many Rides
     * const ride = await prisma.ride.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RideCreateManyArgs>(args?: SelectSubset<T, RideCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rides and returns the data saved in the database.
     * @param {RideCreateManyAndReturnArgs} args - Arguments to create many Rides.
     * @example
     * // Create many Rides
     * const ride = await prisma.ride.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rides and only return the `id`
     * const rideWithIdOnly = await prisma.ride.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RideCreateManyAndReturnArgs>(args?: SelectSubset<T, RideCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ride.
     * @param {RideDeleteArgs} args - Arguments to delete one Ride.
     * @example
     * // Delete one Ride
     * const Ride = await prisma.ride.delete({
     *   where: {
     *     // ... filter to delete one Ride
     *   }
     * })
     * 
     */
    delete<T extends RideDeleteArgs>(args: SelectSubset<T, RideDeleteArgs<ExtArgs>>): Prisma__RideClient<$Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ride.
     * @param {RideUpdateArgs} args - Arguments to update one Ride.
     * @example
     * // Update one Ride
     * const ride = await prisma.ride.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RideUpdateArgs>(args: SelectSubset<T, RideUpdateArgs<ExtArgs>>): Prisma__RideClient<$Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Rides.
     * @param {RideDeleteManyArgs} args - Arguments to filter Rides to delete.
     * @example
     * // Delete a few Rides
     * const { count } = await prisma.ride.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RideDeleteManyArgs>(args?: SelectSubset<T, RideDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rides
     * const ride = await prisma.ride.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RideUpdateManyArgs>(args: SelectSubset<T, RideUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rides and returns the data updated in the database.
     * @param {RideUpdateManyAndReturnArgs} args - Arguments to update many Rides.
     * @example
     * // Update many Rides
     * const ride = await prisma.ride.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Rides and only return the `id`
     * const rideWithIdOnly = await prisma.ride.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RideUpdateManyAndReturnArgs>(args: SelectSubset<T, RideUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ride.
     * @param {RideUpsertArgs} args - Arguments to update or create a Ride.
     * @example
     * // Update or create a Ride
     * const ride = await prisma.ride.upsert({
     *   create: {
     *     // ... data to create a Ride
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ride we want to update
     *   }
     * })
     */
    upsert<T extends RideUpsertArgs>(args: SelectSubset<T, RideUpsertArgs<ExtArgs>>): Prisma__RideClient<$Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Rides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideCountArgs} args - Arguments to filter Rides to count.
     * @example
     * // Count the number of Rides
     * const count = await prisma.ride.count({
     *   where: {
     *     // ... the filter for the Rides we want to count
     *   }
     * })
    **/
    count<T extends RideCountArgs>(
      args?: Subset<T, RideCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RideCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ride.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RideAggregateArgs>(args: Subset<T, RideAggregateArgs>): Prisma.PrismaPromise<GetRideAggregateType<T>>

    /**
     * Group by Ride.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RideGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RideGroupByArgs['orderBy'] }
        : { orderBy?: RideGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RideGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRideGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ride model
   */
  readonly fields: RideFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ride.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RideClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    car<T extends CarDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CarDefaultArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    driver<T extends DriverDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DriverDefaultArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    origin<T extends MeetingPointDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetingPointDefaultArgs<ExtArgs>>): Prisma__MeetingPointClient<$Result.GetResult<Prisma.$MeetingPointPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    destination<T extends MeetingPointDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetingPointDefaultArgs<ExtArgs>>): Prisma__MeetingPointClient<$Result.GetResult<Prisma.$MeetingPointPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ride model
   */
  interface RideFieldRefs {
    readonly id: FieldRef<"Ride", 'Int'>
    readonly driverId: FieldRef<"Ride", 'Int'>
    readonly carId: FieldRef<"Ride", 'Int'>
    readonly createdAt: FieldRef<"Ride", 'DateTime'>
    readonly departureTime: FieldRef<"Ride", 'DateTime'>
    readonly fromGiu: FieldRef<"Ride", 'Boolean'>
    readonly girlsOnly: FieldRef<"Ride", 'Boolean'>
    readonly price: FieldRef<"Ride", 'Float'>
    readonly seatsLeft: FieldRef<"Ride", 'Int'>
    readonly active: FieldRef<"Ride", 'Boolean'>
    readonly originId: FieldRef<"Ride", 'Int'>
    readonly destinationId: FieldRef<"Ride", 'Int'>
    readonly estimatedTime: FieldRef<"Ride", 'Int'>
    readonly distance: FieldRef<"Ride", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Ride findUnique
   */
  export type RideFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ride
     */
    omit?: RideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideInclude<ExtArgs> | null
    /**
     * Filter, which Ride to fetch.
     */
    where: RideWhereUniqueInput
  }

  /**
   * Ride findUniqueOrThrow
   */
  export type RideFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ride
     */
    omit?: RideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideInclude<ExtArgs> | null
    /**
     * Filter, which Ride to fetch.
     */
    where: RideWhereUniqueInput
  }

  /**
   * Ride findFirst
   */
  export type RideFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ride
     */
    omit?: RideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideInclude<ExtArgs> | null
    /**
     * Filter, which Ride to fetch.
     */
    where?: RideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rides to fetch.
     */
    orderBy?: RideOrderByWithRelationInput | RideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rides.
     */
    cursor?: RideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rides.
     */
    distinct?: RideScalarFieldEnum | RideScalarFieldEnum[]
  }

  /**
   * Ride findFirstOrThrow
   */
  export type RideFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ride
     */
    omit?: RideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideInclude<ExtArgs> | null
    /**
     * Filter, which Ride to fetch.
     */
    where?: RideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rides to fetch.
     */
    orderBy?: RideOrderByWithRelationInput | RideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rides.
     */
    cursor?: RideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rides.
     */
    distinct?: RideScalarFieldEnum | RideScalarFieldEnum[]
  }

  /**
   * Ride findMany
   */
  export type RideFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ride
     */
    omit?: RideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideInclude<ExtArgs> | null
    /**
     * Filter, which Rides to fetch.
     */
    where?: RideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rides to fetch.
     */
    orderBy?: RideOrderByWithRelationInput | RideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rides.
     */
    cursor?: RideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rides.
     */
    skip?: number
    distinct?: RideScalarFieldEnum | RideScalarFieldEnum[]
  }

  /**
   * Ride create
   */
  export type RideCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ride
     */
    omit?: RideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideInclude<ExtArgs> | null
    /**
     * The data needed to create a Ride.
     */
    data: XOR<RideCreateInput, RideUncheckedCreateInput>
  }

  /**
   * Ride createMany
   */
  export type RideCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rides.
     */
    data: RideCreateManyInput | RideCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ride createManyAndReturn
   */
  export type RideCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ride
     */
    omit?: RideOmit<ExtArgs> | null
    /**
     * The data used to create many Rides.
     */
    data: RideCreateManyInput | RideCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ride update
   */
  export type RideUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ride
     */
    omit?: RideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideInclude<ExtArgs> | null
    /**
     * The data needed to update a Ride.
     */
    data: XOR<RideUpdateInput, RideUncheckedUpdateInput>
    /**
     * Choose, which Ride to update.
     */
    where: RideWhereUniqueInput
  }

  /**
   * Ride updateMany
   */
  export type RideUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rides.
     */
    data: XOR<RideUpdateManyMutationInput, RideUncheckedUpdateManyInput>
    /**
     * Filter which Rides to update
     */
    where?: RideWhereInput
    /**
     * Limit how many Rides to update.
     */
    limit?: number
  }

  /**
   * Ride updateManyAndReturn
   */
  export type RideUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ride
     */
    omit?: RideOmit<ExtArgs> | null
    /**
     * The data used to update Rides.
     */
    data: XOR<RideUpdateManyMutationInput, RideUncheckedUpdateManyInput>
    /**
     * Filter which Rides to update
     */
    where?: RideWhereInput
    /**
     * Limit how many Rides to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ride upsert
   */
  export type RideUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ride
     */
    omit?: RideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideInclude<ExtArgs> | null
    /**
     * The filter to search for the Ride to update in case it exists.
     */
    where: RideWhereUniqueInput
    /**
     * In case the Ride found by the `where` argument doesn't exist, create a new Ride with this data.
     */
    create: XOR<RideCreateInput, RideUncheckedCreateInput>
    /**
     * In case the Ride was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RideUpdateInput, RideUncheckedUpdateInput>
  }

  /**
   * Ride delete
   */
  export type RideDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ride
     */
    omit?: RideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideInclude<ExtArgs> | null
    /**
     * Filter which Ride to delete.
     */
    where: RideWhereUniqueInput
  }

  /**
   * Ride deleteMany
   */
  export type RideDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rides to delete
     */
    where?: RideWhereInput
    /**
     * Limit how many Rides to delete.
     */
    limit?: number
  }

  /**
   * Ride without action
   */
  export type RideDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ride
     */
    omit?: RideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideInclude<ExtArgs> | null
  }


  /**
   * Model Car
   */

  export type AggregateCar = {
    _count: CarCountAggregateOutputType | null
    _avg: CarAvgAggregateOutputType | null
    _sum: CarSumAggregateOutputType | null
    _min: CarMinAggregateOutputType | null
    _max: CarMaxAggregateOutputType | null
  }

  export type CarAvgAggregateOutputType = {
    id: number | null
    driverId: number | null
    totalSeats: number | null
  }

  export type CarSumAggregateOutputType = {
    id: number | null
    driverId: number | null
    totalSeats: number | null
  }

  export type CarMinAggregateOutputType = {
    id: number | null
    driverId: number | null
    model: string | null
    color: string | null
    plateNumber: string | null
    totalSeats: number | null
  }

  export type CarMaxAggregateOutputType = {
    id: number | null
    driverId: number | null
    model: string | null
    color: string | null
    plateNumber: string | null
    totalSeats: number | null
  }

  export type CarCountAggregateOutputType = {
    id: number
    driverId: number
    model: number
    color: number
    plateNumber: number
    totalSeats: number
    _all: number
  }


  export type CarAvgAggregateInputType = {
    id?: true
    driverId?: true
    totalSeats?: true
  }

  export type CarSumAggregateInputType = {
    id?: true
    driverId?: true
    totalSeats?: true
  }

  export type CarMinAggregateInputType = {
    id?: true
    driverId?: true
    model?: true
    color?: true
    plateNumber?: true
    totalSeats?: true
  }

  export type CarMaxAggregateInputType = {
    id?: true
    driverId?: true
    model?: true
    color?: true
    plateNumber?: true
    totalSeats?: true
  }

  export type CarCountAggregateInputType = {
    id?: true
    driverId?: true
    model?: true
    color?: true
    plateNumber?: true
    totalSeats?: true
    _all?: true
  }

  export type CarAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Car to aggregate.
     */
    where?: CarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     */
    orderBy?: CarOrderByWithRelationInput | CarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cars
    **/
    _count?: true | CarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarMaxAggregateInputType
  }

  export type GetCarAggregateType<T extends CarAggregateArgs> = {
        [P in keyof T & keyof AggregateCar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCar[P]>
      : GetScalarType<T[P], AggregateCar[P]>
  }




  export type CarGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarWhereInput
    orderBy?: CarOrderByWithAggregationInput | CarOrderByWithAggregationInput[]
    by: CarScalarFieldEnum[] | CarScalarFieldEnum
    having?: CarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarCountAggregateInputType | true
    _avg?: CarAvgAggregateInputType
    _sum?: CarSumAggregateInputType
    _min?: CarMinAggregateInputType
    _max?: CarMaxAggregateInputType
  }

  export type CarGroupByOutputType = {
    id: number
    driverId: number
    model: string
    color: string
    plateNumber: string
    totalSeats: number
    _count: CarCountAggregateOutputType | null
    _avg: CarAvgAggregateOutputType | null
    _sum: CarSumAggregateOutputType | null
    _min: CarMinAggregateOutputType | null
    _max: CarMaxAggregateOutputType | null
  }

  type GetCarGroupByPayload<T extends CarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarGroupByOutputType[P]>
            : GetScalarType<T[P], CarGroupByOutputType[P]>
        }
      >
    >


  export type CarSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    driverId?: boolean
    model?: boolean
    color?: boolean
    plateNumber?: boolean
    totalSeats?: boolean
    driver?: boolean | DriverDefaultArgs<ExtArgs>
    rides?: boolean | Car$ridesArgs<ExtArgs>
    _count?: boolean | CarCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["car"]>

  export type CarSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    driverId?: boolean
    model?: boolean
    color?: boolean
    plateNumber?: boolean
    totalSeats?: boolean
    driver?: boolean | DriverDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["car"]>

  export type CarSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    driverId?: boolean
    model?: boolean
    color?: boolean
    plateNumber?: boolean
    totalSeats?: boolean
    driver?: boolean | DriverDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["car"]>

  export type CarSelectScalar = {
    id?: boolean
    driverId?: boolean
    model?: boolean
    color?: boolean
    plateNumber?: boolean
    totalSeats?: boolean
  }

  export type CarOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "driverId" | "model" | "color" | "plateNumber" | "totalSeats", ExtArgs["result"]["car"]>
  export type CarInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    driver?: boolean | DriverDefaultArgs<ExtArgs>
    rides?: boolean | Car$ridesArgs<ExtArgs>
    _count?: boolean | CarCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CarIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    driver?: boolean | DriverDefaultArgs<ExtArgs>
  }
  export type CarIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    driver?: boolean | DriverDefaultArgs<ExtArgs>
  }

  export type $CarPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Car"
    objects: {
      driver: Prisma.$DriverPayload<ExtArgs>
      rides: Prisma.$RidePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      driverId: number
      model: string
      color: string
      plateNumber: string
      totalSeats: number
    }, ExtArgs["result"]["car"]>
    composites: {}
  }

  type CarGetPayload<S extends boolean | null | undefined | CarDefaultArgs> = $Result.GetResult<Prisma.$CarPayload, S>

  type CarCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CarCountAggregateInputType | true
    }

  export interface CarDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Car'], meta: { name: 'Car' } }
    /**
     * Find zero or one Car that matches the filter.
     * @param {CarFindUniqueArgs} args - Arguments to find a Car
     * @example
     * // Get one Car
     * const car = await prisma.car.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CarFindUniqueArgs>(args: SelectSubset<T, CarFindUniqueArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Car that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CarFindUniqueOrThrowArgs} args - Arguments to find a Car
     * @example
     * // Get one Car
     * const car = await prisma.car.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CarFindUniqueOrThrowArgs>(args: SelectSubset<T, CarFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Car that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarFindFirstArgs} args - Arguments to find a Car
     * @example
     * // Get one Car
     * const car = await prisma.car.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CarFindFirstArgs>(args?: SelectSubset<T, CarFindFirstArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Car that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarFindFirstOrThrowArgs} args - Arguments to find a Car
     * @example
     * // Get one Car
     * const car = await prisma.car.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CarFindFirstOrThrowArgs>(args?: SelectSubset<T, CarFindFirstOrThrowArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cars
     * const cars = await prisma.car.findMany()
     * 
     * // Get first 10 Cars
     * const cars = await prisma.car.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carWithIdOnly = await prisma.car.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CarFindManyArgs>(args?: SelectSubset<T, CarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Car.
     * @param {CarCreateArgs} args - Arguments to create a Car.
     * @example
     * // Create one Car
     * const Car = await prisma.car.create({
     *   data: {
     *     // ... data to create a Car
     *   }
     * })
     * 
     */
    create<T extends CarCreateArgs>(args: SelectSubset<T, CarCreateArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cars.
     * @param {CarCreateManyArgs} args - Arguments to create many Cars.
     * @example
     * // Create many Cars
     * const car = await prisma.car.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CarCreateManyArgs>(args?: SelectSubset<T, CarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cars and returns the data saved in the database.
     * @param {CarCreateManyAndReturnArgs} args - Arguments to create many Cars.
     * @example
     * // Create many Cars
     * const car = await prisma.car.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cars and only return the `id`
     * const carWithIdOnly = await prisma.car.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CarCreateManyAndReturnArgs>(args?: SelectSubset<T, CarCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Car.
     * @param {CarDeleteArgs} args - Arguments to delete one Car.
     * @example
     * // Delete one Car
     * const Car = await prisma.car.delete({
     *   where: {
     *     // ... filter to delete one Car
     *   }
     * })
     * 
     */
    delete<T extends CarDeleteArgs>(args: SelectSubset<T, CarDeleteArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Car.
     * @param {CarUpdateArgs} args - Arguments to update one Car.
     * @example
     * // Update one Car
     * const car = await prisma.car.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CarUpdateArgs>(args: SelectSubset<T, CarUpdateArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cars.
     * @param {CarDeleteManyArgs} args - Arguments to filter Cars to delete.
     * @example
     * // Delete a few Cars
     * const { count } = await prisma.car.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CarDeleteManyArgs>(args?: SelectSubset<T, CarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cars
     * const car = await prisma.car.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CarUpdateManyArgs>(args: SelectSubset<T, CarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cars and returns the data updated in the database.
     * @param {CarUpdateManyAndReturnArgs} args - Arguments to update many Cars.
     * @example
     * // Update many Cars
     * const car = await prisma.car.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cars and only return the `id`
     * const carWithIdOnly = await prisma.car.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CarUpdateManyAndReturnArgs>(args: SelectSubset<T, CarUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Car.
     * @param {CarUpsertArgs} args - Arguments to update or create a Car.
     * @example
     * // Update or create a Car
     * const car = await prisma.car.upsert({
     *   create: {
     *     // ... data to create a Car
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Car we want to update
     *   }
     * })
     */
    upsert<T extends CarUpsertArgs>(args: SelectSubset<T, CarUpsertArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCountArgs} args - Arguments to filter Cars to count.
     * @example
     * // Count the number of Cars
     * const count = await prisma.car.count({
     *   where: {
     *     // ... the filter for the Cars we want to count
     *   }
     * })
    **/
    count<T extends CarCountArgs>(
      args?: Subset<T, CarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Car.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarAggregateArgs>(args: Subset<T, CarAggregateArgs>): Prisma.PrismaPromise<GetCarAggregateType<T>>

    /**
     * Group by Car.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarGroupByArgs['orderBy'] }
        : { orderBy?: CarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Car model
   */
  readonly fields: CarFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Car.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CarClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    driver<T extends DriverDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DriverDefaultArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rides<T extends Car$ridesArgs<ExtArgs> = {}>(args?: Subset<T, Car$ridesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Car model
   */
  interface CarFieldRefs {
    readonly id: FieldRef<"Car", 'Int'>
    readonly driverId: FieldRef<"Car", 'Int'>
    readonly model: FieldRef<"Car", 'String'>
    readonly color: FieldRef<"Car", 'String'>
    readonly plateNumber: FieldRef<"Car", 'String'>
    readonly totalSeats: FieldRef<"Car", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Car findUnique
   */
  export type CarFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter, which Car to fetch.
     */
    where: CarWhereUniqueInput
  }

  /**
   * Car findUniqueOrThrow
   */
  export type CarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter, which Car to fetch.
     */
    where: CarWhereUniqueInput
  }

  /**
   * Car findFirst
   */
  export type CarFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter, which Car to fetch.
     */
    where?: CarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     */
    orderBy?: CarOrderByWithRelationInput | CarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cars.
     */
    cursor?: CarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cars.
     */
    distinct?: CarScalarFieldEnum | CarScalarFieldEnum[]
  }

  /**
   * Car findFirstOrThrow
   */
  export type CarFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter, which Car to fetch.
     */
    where?: CarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     */
    orderBy?: CarOrderByWithRelationInput | CarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cars.
     */
    cursor?: CarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cars.
     */
    distinct?: CarScalarFieldEnum | CarScalarFieldEnum[]
  }

  /**
   * Car findMany
   */
  export type CarFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter, which Cars to fetch.
     */
    where?: CarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     */
    orderBy?: CarOrderByWithRelationInput | CarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cars.
     */
    cursor?: CarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     */
    skip?: number
    distinct?: CarScalarFieldEnum | CarScalarFieldEnum[]
  }

  /**
   * Car create
   */
  export type CarCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * The data needed to create a Car.
     */
    data: XOR<CarCreateInput, CarUncheckedCreateInput>
  }

  /**
   * Car createMany
   */
  export type CarCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cars.
     */
    data: CarCreateManyInput | CarCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Car createManyAndReturn
   */
  export type CarCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * The data used to create many Cars.
     */
    data: CarCreateManyInput | CarCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Car update
   */
  export type CarUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * The data needed to update a Car.
     */
    data: XOR<CarUpdateInput, CarUncheckedUpdateInput>
    /**
     * Choose, which Car to update.
     */
    where: CarWhereUniqueInput
  }

  /**
   * Car updateMany
   */
  export type CarUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cars.
     */
    data: XOR<CarUpdateManyMutationInput, CarUncheckedUpdateManyInput>
    /**
     * Filter which Cars to update
     */
    where?: CarWhereInput
    /**
     * Limit how many Cars to update.
     */
    limit?: number
  }

  /**
   * Car updateManyAndReturn
   */
  export type CarUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * The data used to update Cars.
     */
    data: XOR<CarUpdateManyMutationInput, CarUncheckedUpdateManyInput>
    /**
     * Filter which Cars to update
     */
    where?: CarWhereInput
    /**
     * Limit how many Cars to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Car upsert
   */
  export type CarUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * The filter to search for the Car to update in case it exists.
     */
    where: CarWhereUniqueInput
    /**
     * In case the Car found by the `where` argument doesn't exist, create a new Car with this data.
     */
    create: XOR<CarCreateInput, CarUncheckedCreateInput>
    /**
     * In case the Car was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarUpdateInput, CarUncheckedUpdateInput>
  }

  /**
   * Car delete
   */
  export type CarDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter which Car to delete.
     */
    where: CarWhereUniqueInput
  }

  /**
   * Car deleteMany
   */
  export type CarDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cars to delete
     */
    where?: CarWhereInput
    /**
     * Limit how many Cars to delete.
     */
    limit?: number
  }

  /**
   * Car.rides
   */
  export type Car$ridesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ride
     */
    omit?: RideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideInclude<ExtArgs> | null
    where?: RideWhereInput
    orderBy?: RideOrderByWithRelationInput | RideOrderByWithRelationInput[]
    cursor?: RideWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RideScalarFieldEnum | RideScalarFieldEnum[]
  }

  /**
   * Car without action
   */
  export type CarDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
  }


  /**
   * Model Driver
   */

  export type AggregateDriver = {
    _count: DriverCountAggregateOutputType | null
    _avg: DriverAvgAggregateOutputType | null
    _sum: DriverSumAggregateOutputType | null
    _min: DriverMinAggregateOutputType | null
    _max: DriverMaxAggregateOutputType | null
  }

  export type DriverAvgAggregateOutputType = {
    id: number | null
  }

  export type DriverSumAggregateOutputType = {
    id: number | null
  }

  export type DriverMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phoneNumber: string | null
    licenseNumber: string | null
    gender: string | null
    approved: boolean | null
  }

  export type DriverMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phoneNumber: string | null
    licenseNumber: string | null
    gender: string | null
    approved: boolean | null
  }

  export type DriverCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phoneNumber: number
    licenseNumber: number
    gender: number
    approved: number
    _all: number
  }


  export type DriverAvgAggregateInputType = {
    id?: true
  }

  export type DriverSumAggregateInputType = {
    id?: true
  }

  export type DriverMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phoneNumber?: true
    licenseNumber?: true
    gender?: true
    approved?: true
  }

  export type DriverMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phoneNumber?: true
    licenseNumber?: true
    gender?: true
    approved?: true
  }

  export type DriverCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phoneNumber?: true
    licenseNumber?: true
    gender?: true
    approved?: true
    _all?: true
  }

  export type DriverAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Driver to aggregate.
     */
    where?: DriverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Drivers to fetch.
     */
    orderBy?: DriverOrderByWithRelationInput | DriverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DriverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Drivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Drivers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Drivers
    **/
    _count?: true | DriverCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DriverAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DriverSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DriverMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DriverMaxAggregateInputType
  }

  export type GetDriverAggregateType<T extends DriverAggregateArgs> = {
        [P in keyof T & keyof AggregateDriver]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDriver[P]>
      : GetScalarType<T[P], AggregateDriver[P]>
  }




  export type DriverGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DriverWhereInput
    orderBy?: DriverOrderByWithAggregationInput | DriverOrderByWithAggregationInput[]
    by: DriverScalarFieldEnum[] | DriverScalarFieldEnum
    having?: DriverScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DriverCountAggregateInputType | true
    _avg?: DriverAvgAggregateInputType
    _sum?: DriverSumAggregateInputType
    _min?: DriverMinAggregateInputType
    _max?: DriverMaxAggregateInputType
  }

  export type DriverGroupByOutputType = {
    id: number
    name: string
    email: string
    phoneNumber: string
    licenseNumber: string
    gender: string
    approved: boolean
    _count: DriverCountAggregateOutputType | null
    _avg: DriverAvgAggregateOutputType | null
    _sum: DriverSumAggregateOutputType | null
    _min: DriverMinAggregateOutputType | null
    _max: DriverMaxAggregateOutputType | null
  }

  type GetDriverGroupByPayload<T extends DriverGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DriverGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DriverGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DriverGroupByOutputType[P]>
            : GetScalarType<T[P], DriverGroupByOutputType[P]>
        }
      >
    >


  export type DriverSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phoneNumber?: boolean
    licenseNumber?: boolean
    gender?: boolean
    approved?: boolean
    cars?: boolean | Driver$carsArgs<ExtArgs>
    rides?: boolean | Driver$ridesArgs<ExtArgs>
    _count?: boolean | DriverCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["driver"]>

  export type DriverSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phoneNumber?: boolean
    licenseNumber?: boolean
    gender?: boolean
    approved?: boolean
  }, ExtArgs["result"]["driver"]>

  export type DriverSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phoneNumber?: boolean
    licenseNumber?: boolean
    gender?: boolean
    approved?: boolean
  }, ExtArgs["result"]["driver"]>

  export type DriverSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phoneNumber?: boolean
    licenseNumber?: boolean
    gender?: boolean
    approved?: boolean
  }

  export type DriverOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phoneNumber" | "licenseNumber" | "gender" | "approved", ExtArgs["result"]["driver"]>
  export type DriverInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | Driver$carsArgs<ExtArgs>
    rides?: boolean | Driver$ridesArgs<ExtArgs>
    _count?: boolean | DriverCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DriverIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DriverIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DriverPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Driver"
    objects: {
      cars: Prisma.$CarPayload<ExtArgs>[]
      rides: Prisma.$RidePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      phoneNumber: string
      licenseNumber: string
      gender: string
      approved: boolean
    }, ExtArgs["result"]["driver"]>
    composites: {}
  }

  type DriverGetPayload<S extends boolean | null | undefined | DriverDefaultArgs> = $Result.GetResult<Prisma.$DriverPayload, S>

  type DriverCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DriverFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DriverCountAggregateInputType | true
    }

  export interface DriverDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Driver'], meta: { name: 'Driver' } }
    /**
     * Find zero or one Driver that matches the filter.
     * @param {DriverFindUniqueArgs} args - Arguments to find a Driver
     * @example
     * // Get one Driver
     * const driver = await prisma.driver.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DriverFindUniqueArgs>(args: SelectSubset<T, DriverFindUniqueArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Driver that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DriverFindUniqueOrThrowArgs} args - Arguments to find a Driver
     * @example
     * // Get one Driver
     * const driver = await prisma.driver.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DriverFindUniqueOrThrowArgs>(args: SelectSubset<T, DriverFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Driver that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverFindFirstArgs} args - Arguments to find a Driver
     * @example
     * // Get one Driver
     * const driver = await prisma.driver.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DriverFindFirstArgs>(args?: SelectSubset<T, DriverFindFirstArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Driver that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverFindFirstOrThrowArgs} args - Arguments to find a Driver
     * @example
     * // Get one Driver
     * const driver = await prisma.driver.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DriverFindFirstOrThrowArgs>(args?: SelectSubset<T, DriverFindFirstOrThrowArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Drivers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Drivers
     * const drivers = await prisma.driver.findMany()
     * 
     * // Get first 10 Drivers
     * const drivers = await prisma.driver.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const driverWithIdOnly = await prisma.driver.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DriverFindManyArgs>(args?: SelectSubset<T, DriverFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Driver.
     * @param {DriverCreateArgs} args - Arguments to create a Driver.
     * @example
     * // Create one Driver
     * const Driver = await prisma.driver.create({
     *   data: {
     *     // ... data to create a Driver
     *   }
     * })
     * 
     */
    create<T extends DriverCreateArgs>(args: SelectSubset<T, DriverCreateArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Drivers.
     * @param {DriverCreateManyArgs} args - Arguments to create many Drivers.
     * @example
     * // Create many Drivers
     * const driver = await prisma.driver.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DriverCreateManyArgs>(args?: SelectSubset<T, DriverCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Drivers and returns the data saved in the database.
     * @param {DriverCreateManyAndReturnArgs} args - Arguments to create many Drivers.
     * @example
     * // Create many Drivers
     * const driver = await prisma.driver.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Drivers and only return the `id`
     * const driverWithIdOnly = await prisma.driver.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DriverCreateManyAndReturnArgs>(args?: SelectSubset<T, DriverCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Driver.
     * @param {DriverDeleteArgs} args - Arguments to delete one Driver.
     * @example
     * // Delete one Driver
     * const Driver = await prisma.driver.delete({
     *   where: {
     *     // ... filter to delete one Driver
     *   }
     * })
     * 
     */
    delete<T extends DriverDeleteArgs>(args: SelectSubset<T, DriverDeleteArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Driver.
     * @param {DriverUpdateArgs} args - Arguments to update one Driver.
     * @example
     * // Update one Driver
     * const driver = await prisma.driver.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DriverUpdateArgs>(args: SelectSubset<T, DriverUpdateArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Drivers.
     * @param {DriverDeleteManyArgs} args - Arguments to filter Drivers to delete.
     * @example
     * // Delete a few Drivers
     * const { count } = await prisma.driver.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DriverDeleteManyArgs>(args?: SelectSubset<T, DriverDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Drivers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Drivers
     * const driver = await prisma.driver.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DriverUpdateManyArgs>(args: SelectSubset<T, DriverUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Drivers and returns the data updated in the database.
     * @param {DriverUpdateManyAndReturnArgs} args - Arguments to update many Drivers.
     * @example
     * // Update many Drivers
     * const driver = await prisma.driver.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Drivers and only return the `id`
     * const driverWithIdOnly = await prisma.driver.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DriverUpdateManyAndReturnArgs>(args: SelectSubset<T, DriverUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Driver.
     * @param {DriverUpsertArgs} args - Arguments to update or create a Driver.
     * @example
     * // Update or create a Driver
     * const driver = await prisma.driver.upsert({
     *   create: {
     *     // ... data to create a Driver
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Driver we want to update
     *   }
     * })
     */
    upsert<T extends DriverUpsertArgs>(args: SelectSubset<T, DriverUpsertArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Drivers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverCountArgs} args - Arguments to filter Drivers to count.
     * @example
     * // Count the number of Drivers
     * const count = await prisma.driver.count({
     *   where: {
     *     // ... the filter for the Drivers we want to count
     *   }
     * })
    **/
    count<T extends DriverCountArgs>(
      args?: Subset<T, DriverCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DriverCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Driver.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DriverAggregateArgs>(args: Subset<T, DriverAggregateArgs>): Prisma.PrismaPromise<GetDriverAggregateType<T>>

    /**
     * Group by Driver.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DriverGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DriverGroupByArgs['orderBy'] }
        : { orderBy?: DriverGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DriverGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDriverGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Driver model
   */
  readonly fields: DriverFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Driver.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DriverClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cars<T extends Driver$carsArgs<ExtArgs> = {}>(args?: Subset<T, Driver$carsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rides<T extends Driver$ridesArgs<ExtArgs> = {}>(args?: Subset<T, Driver$ridesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Driver model
   */
  interface DriverFieldRefs {
    readonly id: FieldRef<"Driver", 'Int'>
    readonly name: FieldRef<"Driver", 'String'>
    readonly email: FieldRef<"Driver", 'String'>
    readonly phoneNumber: FieldRef<"Driver", 'String'>
    readonly licenseNumber: FieldRef<"Driver", 'String'>
    readonly gender: FieldRef<"Driver", 'String'>
    readonly approved: FieldRef<"Driver", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Driver findUnique
   */
  export type DriverFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Driver
     */
    omit?: DriverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * Filter, which Driver to fetch.
     */
    where: DriverWhereUniqueInput
  }

  /**
   * Driver findUniqueOrThrow
   */
  export type DriverFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Driver
     */
    omit?: DriverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * Filter, which Driver to fetch.
     */
    where: DriverWhereUniqueInput
  }

  /**
   * Driver findFirst
   */
  export type DriverFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Driver
     */
    omit?: DriverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * Filter, which Driver to fetch.
     */
    where?: DriverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Drivers to fetch.
     */
    orderBy?: DriverOrderByWithRelationInput | DriverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Drivers.
     */
    cursor?: DriverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Drivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Drivers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Drivers.
     */
    distinct?: DriverScalarFieldEnum | DriverScalarFieldEnum[]
  }

  /**
   * Driver findFirstOrThrow
   */
  export type DriverFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Driver
     */
    omit?: DriverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * Filter, which Driver to fetch.
     */
    where?: DriverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Drivers to fetch.
     */
    orderBy?: DriverOrderByWithRelationInput | DriverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Drivers.
     */
    cursor?: DriverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Drivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Drivers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Drivers.
     */
    distinct?: DriverScalarFieldEnum | DriverScalarFieldEnum[]
  }

  /**
   * Driver findMany
   */
  export type DriverFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Driver
     */
    omit?: DriverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * Filter, which Drivers to fetch.
     */
    where?: DriverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Drivers to fetch.
     */
    orderBy?: DriverOrderByWithRelationInput | DriverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Drivers.
     */
    cursor?: DriverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Drivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Drivers.
     */
    skip?: number
    distinct?: DriverScalarFieldEnum | DriverScalarFieldEnum[]
  }

  /**
   * Driver create
   */
  export type DriverCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Driver
     */
    omit?: DriverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * The data needed to create a Driver.
     */
    data: XOR<DriverCreateInput, DriverUncheckedCreateInput>
  }

  /**
   * Driver createMany
   */
  export type DriverCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Drivers.
     */
    data: DriverCreateManyInput | DriverCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Driver createManyAndReturn
   */
  export type DriverCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Driver
     */
    omit?: DriverOmit<ExtArgs> | null
    /**
     * The data used to create many Drivers.
     */
    data: DriverCreateManyInput | DriverCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Driver update
   */
  export type DriverUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Driver
     */
    omit?: DriverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * The data needed to update a Driver.
     */
    data: XOR<DriverUpdateInput, DriverUncheckedUpdateInput>
    /**
     * Choose, which Driver to update.
     */
    where: DriverWhereUniqueInput
  }

  /**
   * Driver updateMany
   */
  export type DriverUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Drivers.
     */
    data: XOR<DriverUpdateManyMutationInput, DriverUncheckedUpdateManyInput>
    /**
     * Filter which Drivers to update
     */
    where?: DriverWhereInput
    /**
     * Limit how many Drivers to update.
     */
    limit?: number
  }

  /**
   * Driver updateManyAndReturn
   */
  export type DriverUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Driver
     */
    omit?: DriverOmit<ExtArgs> | null
    /**
     * The data used to update Drivers.
     */
    data: XOR<DriverUpdateManyMutationInput, DriverUncheckedUpdateManyInput>
    /**
     * Filter which Drivers to update
     */
    where?: DriverWhereInput
    /**
     * Limit how many Drivers to update.
     */
    limit?: number
  }

  /**
   * Driver upsert
   */
  export type DriverUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Driver
     */
    omit?: DriverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * The filter to search for the Driver to update in case it exists.
     */
    where: DriverWhereUniqueInput
    /**
     * In case the Driver found by the `where` argument doesn't exist, create a new Driver with this data.
     */
    create: XOR<DriverCreateInput, DriverUncheckedCreateInput>
    /**
     * In case the Driver was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DriverUpdateInput, DriverUncheckedUpdateInput>
  }

  /**
   * Driver delete
   */
  export type DriverDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Driver
     */
    omit?: DriverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * Filter which Driver to delete.
     */
    where: DriverWhereUniqueInput
  }

  /**
   * Driver deleteMany
   */
  export type DriverDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Drivers to delete
     */
    where?: DriverWhereInput
    /**
     * Limit how many Drivers to delete.
     */
    limit?: number
  }

  /**
   * Driver.cars
   */
  export type Driver$carsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    where?: CarWhereInput
    orderBy?: CarOrderByWithRelationInput | CarOrderByWithRelationInput[]
    cursor?: CarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarScalarFieldEnum | CarScalarFieldEnum[]
  }

  /**
   * Driver.rides
   */
  export type Driver$ridesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ride
     */
    omit?: RideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideInclude<ExtArgs> | null
    where?: RideWhereInput
    orderBy?: RideOrderByWithRelationInput | RideOrderByWithRelationInput[]
    cursor?: RideWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RideScalarFieldEnum | RideScalarFieldEnum[]
  }

  /**
   * Driver without action
   */
  export type DriverDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Driver
     */
    omit?: DriverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
  }


  /**
   * Model Zone
   */

  export type AggregateZone = {
    _count: ZoneCountAggregateOutputType | null
    _avg: ZoneAvgAggregateOutputType | null
    _sum: ZoneSumAggregateOutputType | null
    _min: ZoneMinAggregateOutputType | null
    _max: ZoneMaxAggregateOutputType | null
  }

  export type ZoneAvgAggregateOutputType = {
    id: number | null
    baseFare: number | null
    costPerMin: number | null
    costPerKm: number | null
  }

  export type ZoneSumAggregateOutputType = {
    id: number | null
    baseFare: number | null
    costPerMin: number | null
    costPerKm: number | null
  }

  export type ZoneMinAggregateOutputType = {
    id: number | null
    name: string | null
    baseFare: number | null
    costPerMin: number | null
    costPerKm: number | null
  }

  export type ZoneMaxAggregateOutputType = {
    id: number | null
    name: string | null
    baseFare: number | null
    costPerMin: number | null
    costPerKm: number | null
  }

  export type ZoneCountAggregateOutputType = {
    id: number
    name: number
    baseFare: number
    costPerMin: number
    costPerKm: number
    _all: number
  }


  export type ZoneAvgAggregateInputType = {
    id?: true
    baseFare?: true
    costPerMin?: true
    costPerKm?: true
  }

  export type ZoneSumAggregateInputType = {
    id?: true
    baseFare?: true
    costPerMin?: true
    costPerKm?: true
  }

  export type ZoneMinAggregateInputType = {
    id?: true
    name?: true
    baseFare?: true
    costPerMin?: true
    costPerKm?: true
  }

  export type ZoneMaxAggregateInputType = {
    id?: true
    name?: true
    baseFare?: true
    costPerMin?: true
    costPerKm?: true
  }

  export type ZoneCountAggregateInputType = {
    id?: true
    name?: true
    baseFare?: true
    costPerMin?: true
    costPerKm?: true
    _all?: true
  }

  export type ZoneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Zone to aggregate.
     */
    where?: ZoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zones to fetch.
     */
    orderBy?: ZoneOrderByWithRelationInput | ZoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ZoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Zones
    **/
    _count?: true | ZoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ZoneAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ZoneSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ZoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ZoneMaxAggregateInputType
  }

  export type GetZoneAggregateType<T extends ZoneAggregateArgs> = {
        [P in keyof T & keyof AggregateZone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateZone[P]>
      : GetScalarType<T[P], AggregateZone[P]>
  }




  export type ZoneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ZoneWhereInput
    orderBy?: ZoneOrderByWithAggregationInput | ZoneOrderByWithAggregationInput[]
    by: ZoneScalarFieldEnum[] | ZoneScalarFieldEnum
    having?: ZoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ZoneCountAggregateInputType | true
    _avg?: ZoneAvgAggregateInputType
    _sum?: ZoneSumAggregateInputType
    _min?: ZoneMinAggregateInputType
    _max?: ZoneMaxAggregateInputType
  }

  export type ZoneGroupByOutputType = {
    id: number
    name: string
    baseFare: number
    costPerMin: number
    costPerKm: number
    _count: ZoneCountAggregateOutputType | null
    _avg: ZoneAvgAggregateOutputType | null
    _sum: ZoneSumAggregateOutputType | null
    _min: ZoneMinAggregateOutputType | null
    _max: ZoneMaxAggregateOutputType | null
  }

  type GetZoneGroupByPayload<T extends ZoneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ZoneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ZoneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ZoneGroupByOutputType[P]>
            : GetScalarType<T[P], ZoneGroupByOutputType[P]>
        }
      >
    >


  export type ZoneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    baseFare?: boolean
    costPerMin?: boolean
    costPerKm?: boolean
    routes?: boolean | Zone$routesArgs<ExtArgs>
    _count?: boolean | ZoneCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["zone"]>

  export type ZoneSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    baseFare?: boolean
    costPerMin?: boolean
    costPerKm?: boolean
  }, ExtArgs["result"]["zone"]>

  export type ZoneSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    baseFare?: boolean
    costPerMin?: boolean
    costPerKm?: boolean
  }, ExtArgs["result"]["zone"]>

  export type ZoneSelectScalar = {
    id?: boolean
    name?: boolean
    baseFare?: boolean
    costPerMin?: boolean
    costPerKm?: boolean
  }

  export type ZoneOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "baseFare" | "costPerMin" | "costPerKm", ExtArgs["result"]["zone"]>
  export type ZoneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    routes?: boolean | Zone$routesArgs<ExtArgs>
    _count?: boolean | ZoneCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ZoneIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ZoneIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ZonePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Zone"
    objects: {
      routes: Prisma.$RoutePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      baseFare: number
      costPerMin: number
      costPerKm: number
    }, ExtArgs["result"]["zone"]>
    composites: {}
  }

  type ZoneGetPayload<S extends boolean | null | undefined | ZoneDefaultArgs> = $Result.GetResult<Prisma.$ZonePayload, S>

  type ZoneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ZoneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ZoneCountAggregateInputType | true
    }

  export interface ZoneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Zone'], meta: { name: 'Zone' } }
    /**
     * Find zero or one Zone that matches the filter.
     * @param {ZoneFindUniqueArgs} args - Arguments to find a Zone
     * @example
     * // Get one Zone
     * const zone = await prisma.zone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ZoneFindUniqueArgs>(args: SelectSubset<T, ZoneFindUniqueArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Zone that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ZoneFindUniqueOrThrowArgs} args - Arguments to find a Zone
     * @example
     * // Get one Zone
     * const zone = await prisma.zone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ZoneFindUniqueOrThrowArgs>(args: SelectSubset<T, ZoneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Zone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneFindFirstArgs} args - Arguments to find a Zone
     * @example
     * // Get one Zone
     * const zone = await prisma.zone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ZoneFindFirstArgs>(args?: SelectSubset<T, ZoneFindFirstArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Zone that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneFindFirstOrThrowArgs} args - Arguments to find a Zone
     * @example
     * // Get one Zone
     * const zone = await prisma.zone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ZoneFindFirstOrThrowArgs>(args?: SelectSubset<T, ZoneFindFirstOrThrowArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Zones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Zones
     * const zones = await prisma.zone.findMany()
     * 
     * // Get first 10 Zones
     * const zones = await prisma.zone.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const zoneWithIdOnly = await prisma.zone.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ZoneFindManyArgs>(args?: SelectSubset<T, ZoneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Zone.
     * @param {ZoneCreateArgs} args - Arguments to create a Zone.
     * @example
     * // Create one Zone
     * const Zone = await prisma.zone.create({
     *   data: {
     *     // ... data to create a Zone
     *   }
     * })
     * 
     */
    create<T extends ZoneCreateArgs>(args: SelectSubset<T, ZoneCreateArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Zones.
     * @param {ZoneCreateManyArgs} args - Arguments to create many Zones.
     * @example
     * // Create many Zones
     * const zone = await prisma.zone.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ZoneCreateManyArgs>(args?: SelectSubset<T, ZoneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Zones and returns the data saved in the database.
     * @param {ZoneCreateManyAndReturnArgs} args - Arguments to create many Zones.
     * @example
     * // Create many Zones
     * const zone = await prisma.zone.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Zones and only return the `id`
     * const zoneWithIdOnly = await prisma.zone.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ZoneCreateManyAndReturnArgs>(args?: SelectSubset<T, ZoneCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Zone.
     * @param {ZoneDeleteArgs} args - Arguments to delete one Zone.
     * @example
     * // Delete one Zone
     * const Zone = await prisma.zone.delete({
     *   where: {
     *     // ... filter to delete one Zone
     *   }
     * })
     * 
     */
    delete<T extends ZoneDeleteArgs>(args: SelectSubset<T, ZoneDeleteArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Zone.
     * @param {ZoneUpdateArgs} args - Arguments to update one Zone.
     * @example
     * // Update one Zone
     * const zone = await prisma.zone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ZoneUpdateArgs>(args: SelectSubset<T, ZoneUpdateArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Zones.
     * @param {ZoneDeleteManyArgs} args - Arguments to filter Zones to delete.
     * @example
     * // Delete a few Zones
     * const { count } = await prisma.zone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ZoneDeleteManyArgs>(args?: SelectSubset<T, ZoneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Zones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Zones
     * const zone = await prisma.zone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ZoneUpdateManyArgs>(args: SelectSubset<T, ZoneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Zones and returns the data updated in the database.
     * @param {ZoneUpdateManyAndReturnArgs} args - Arguments to update many Zones.
     * @example
     * // Update many Zones
     * const zone = await prisma.zone.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Zones and only return the `id`
     * const zoneWithIdOnly = await prisma.zone.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ZoneUpdateManyAndReturnArgs>(args: SelectSubset<T, ZoneUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Zone.
     * @param {ZoneUpsertArgs} args - Arguments to update or create a Zone.
     * @example
     * // Update or create a Zone
     * const zone = await prisma.zone.upsert({
     *   create: {
     *     // ... data to create a Zone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Zone we want to update
     *   }
     * })
     */
    upsert<T extends ZoneUpsertArgs>(args: SelectSubset<T, ZoneUpsertArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Zones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneCountArgs} args - Arguments to filter Zones to count.
     * @example
     * // Count the number of Zones
     * const count = await prisma.zone.count({
     *   where: {
     *     // ... the filter for the Zones we want to count
     *   }
     * })
    **/
    count<T extends ZoneCountArgs>(
      args?: Subset<T, ZoneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ZoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Zone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ZoneAggregateArgs>(args: Subset<T, ZoneAggregateArgs>): Prisma.PrismaPromise<GetZoneAggregateType<T>>

    /**
     * Group by Zone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ZoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ZoneGroupByArgs['orderBy'] }
        : { orderBy?: ZoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ZoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetZoneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Zone model
   */
  readonly fields: ZoneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Zone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ZoneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    routes<T extends Zone$routesArgs<ExtArgs> = {}>(args?: Subset<T, Zone$routesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Zone model
   */
  interface ZoneFieldRefs {
    readonly id: FieldRef<"Zone", 'Int'>
    readonly name: FieldRef<"Zone", 'String'>
    readonly baseFare: FieldRef<"Zone", 'Float'>
    readonly costPerMin: FieldRef<"Zone", 'Float'>
    readonly costPerKm: FieldRef<"Zone", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Zone findUnique
   */
  export type ZoneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter, which Zone to fetch.
     */
    where: ZoneWhereUniqueInput
  }

  /**
   * Zone findUniqueOrThrow
   */
  export type ZoneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter, which Zone to fetch.
     */
    where: ZoneWhereUniqueInput
  }

  /**
   * Zone findFirst
   */
  export type ZoneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter, which Zone to fetch.
     */
    where?: ZoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zones to fetch.
     */
    orderBy?: ZoneOrderByWithRelationInput | ZoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Zones.
     */
    cursor?: ZoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Zones.
     */
    distinct?: ZoneScalarFieldEnum | ZoneScalarFieldEnum[]
  }

  /**
   * Zone findFirstOrThrow
   */
  export type ZoneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter, which Zone to fetch.
     */
    where?: ZoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zones to fetch.
     */
    orderBy?: ZoneOrderByWithRelationInput | ZoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Zones.
     */
    cursor?: ZoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Zones.
     */
    distinct?: ZoneScalarFieldEnum | ZoneScalarFieldEnum[]
  }

  /**
   * Zone findMany
   */
  export type ZoneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter, which Zones to fetch.
     */
    where?: ZoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zones to fetch.
     */
    orderBy?: ZoneOrderByWithRelationInput | ZoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Zones.
     */
    cursor?: ZoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zones.
     */
    skip?: number
    distinct?: ZoneScalarFieldEnum | ZoneScalarFieldEnum[]
  }

  /**
   * Zone create
   */
  export type ZoneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * The data needed to create a Zone.
     */
    data: XOR<ZoneCreateInput, ZoneUncheckedCreateInput>
  }

  /**
   * Zone createMany
   */
  export type ZoneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Zones.
     */
    data: ZoneCreateManyInput | ZoneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Zone createManyAndReturn
   */
  export type ZoneCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * The data used to create many Zones.
     */
    data: ZoneCreateManyInput | ZoneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Zone update
   */
  export type ZoneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * The data needed to update a Zone.
     */
    data: XOR<ZoneUpdateInput, ZoneUncheckedUpdateInput>
    /**
     * Choose, which Zone to update.
     */
    where: ZoneWhereUniqueInput
  }

  /**
   * Zone updateMany
   */
  export type ZoneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Zones.
     */
    data: XOR<ZoneUpdateManyMutationInput, ZoneUncheckedUpdateManyInput>
    /**
     * Filter which Zones to update
     */
    where?: ZoneWhereInput
    /**
     * Limit how many Zones to update.
     */
    limit?: number
  }

  /**
   * Zone updateManyAndReturn
   */
  export type ZoneUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * The data used to update Zones.
     */
    data: XOR<ZoneUpdateManyMutationInput, ZoneUncheckedUpdateManyInput>
    /**
     * Filter which Zones to update
     */
    where?: ZoneWhereInput
    /**
     * Limit how many Zones to update.
     */
    limit?: number
  }

  /**
   * Zone upsert
   */
  export type ZoneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * The filter to search for the Zone to update in case it exists.
     */
    where: ZoneWhereUniqueInput
    /**
     * In case the Zone found by the `where` argument doesn't exist, create a new Zone with this data.
     */
    create: XOR<ZoneCreateInput, ZoneUncheckedCreateInput>
    /**
     * In case the Zone was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ZoneUpdateInput, ZoneUncheckedUpdateInput>
  }

  /**
   * Zone delete
   */
  export type ZoneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter which Zone to delete.
     */
    where: ZoneWhereUniqueInput
  }

  /**
   * Zone deleteMany
   */
  export type ZoneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Zones to delete
     */
    where?: ZoneWhereInput
    /**
     * Limit how many Zones to delete.
     */
    limit?: number
  }

  /**
   * Zone.routes
   */
  export type Zone$routesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    where?: RouteWhereInput
    orderBy?: RouteOrderByWithRelationInput | RouteOrderByWithRelationInput[]
    cursor?: RouteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RouteScalarFieldEnum | RouteScalarFieldEnum[]
  }

  /**
   * Zone without action
   */
  export type ZoneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
  }


  /**
   * Model Route
   */

  export type AggregateRoute = {
    _count: RouteCountAggregateOutputType | null
    _avg: RouteAvgAggregateOutputType | null
    _sum: RouteSumAggregateOutputType | null
    _min: RouteMinAggregateOutputType | null
    _max: RouteMaxAggregateOutputType | null
  }

  export type RouteAvgAggregateOutputType = {
    id: number | null
    zoneId: number | null
  }

  export type RouteSumAggregateOutputType = {
    id: number | null
    zoneId: number | null
  }

  export type RouteMinAggregateOutputType = {
    id: number | null
    name: string | null
    zoneId: number | null
  }

  export type RouteMaxAggregateOutputType = {
    id: number | null
    name: string | null
    zoneId: number | null
  }

  export type RouteCountAggregateOutputType = {
    id: number
    name: number
    zoneId: number
    _all: number
  }


  export type RouteAvgAggregateInputType = {
    id?: true
    zoneId?: true
  }

  export type RouteSumAggregateInputType = {
    id?: true
    zoneId?: true
  }

  export type RouteMinAggregateInputType = {
    id?: true
    name?: true
    zoneId?: true
  }

  export type RouteMaxAggregateInputType = {
    id?: true
    name?: true
    zoneId?: true
  }

  export type RouteCountAggregateInputType = {
    id?: true
    name?: true
    zoneId?: true
    _all?: true
  }

  export type RouteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Route to aggregate.
     */
    where?: RouteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routes to fetch.
     */
    orderBy?: RouteOrderByWithRelationInput | RouteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RouteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Routes
    **/
    _count?: true | RouteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RouteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RouteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RouteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RouteMaxAggregateInputType
  }

  export type GetRouteAggregateType<T extends RouteAggregateArgs> = {
        [P in keyof T & keyof AggregateRoute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoute[P]>
      : GetScalarType<T[P], AggregateRoute[P]>
  }




  export type RouteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RouteWhereInput
    orderBy?: RouteOrderByWithAggregationInput | RouteOrderByWithAggregationInput[]
    by: RouteScalarFieldEnum[] | RouteScalarFieldEnum
    having?: RouteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RouteCountAggregateInputType | true
    _avg?: RouteAvgAggregateInputType
    _sum?: RouteSumAggregateInputType
    _min?: RouteMinAggregateInputType
    _max?: RouteMaxAggregateInputType
  }

  export type RouteGroupByOutputType = {
    id: number
    name: string
    zoneId: number
    _count: RouteCountAggregateOutputType | null
    _avg: RouteAvgAggregateOutputType | null
    _sum: RouteSumAggregateOutputType | null
    _min: RouteMinAggregateOutputType | null
    _max: RouteMaxAggregateOutputType | null
  }

  type GetRouteGroupByPayload<T extends RouteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RouteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RouteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RouteGroupByOutputType[P]>
            : GetScalarType<T[P], RouteGroupByOutputType[P]>
        }
      >
    >


  export type RouteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    zoneId?: boolean
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
    meetingPoints?: boolean | Route$meetingPointsArgs<ExtArgs>
    Subzone?: boolean | Route$SubzoneArgs<ExtArgs>
    _count?: boolean | RouteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["route"]>

  export type RouteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    zoneId?: boolean
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["route"]>

  export type RouteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    zoneId?: boolean
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["route"]>

  export type RouteSelectScalar = {
    id?: boolean
    name?: boolean
    zoneId?: boolean
  }

  export type RouteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "zoneId", ExtArgs["result"]["route"]>
  export type RouteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
    meetingPoints?: boolean | Route$meetingPointsArgs<ExtArgs>
    Subzone?: boolean | Route$SubzoneArgs<ExtArgs>
    _count?: boolean | RouteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RouteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }
  export type RouteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }

  export type $RoutePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Route"
    objects: {
      zone: Prisma.$ZonePayload<ExtArgs>
      meetingPoints: Prisma.$MeetingPointPayload<ExtArgs>[]
      Subzone: Prisma.$SubzonePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      zoneId: number
    }, ExtArgs["result"]["route"]>
    composites: {}
  }

  type RouteGetPayload<S extends boolean | null | undefined | RouteDefaultArgs> = $Result.GetResult<Prisma.$RoutePayload, S>

  type RouteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RouteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RouteCountAggregateInputType | true
    }

  export interface RouteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Route'], meta: { name: 'Route' } }
    /**
     * Find zero or one Route that matches the filter.
     * @param {RouteFindUniqueArgs} args - Arguments to find a Route
     * @example
     * // Get one Route
     * const route = await prisma.route.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RouteFindUniqueArgs>(args: SelectSubset<T, RouteFindUniqueArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Route that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RouteFindUniqueOrThrowArgs} args - Arguments to find a Route
     * @example
     * // Get one Route
     * const route = await prisma.route.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RouteFindUniqueOrThrowArgs>(args: SelectSubset<T, RouteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Route that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteFindFirstArgs} args - Arguments to find a Route
     * @example
     * // Get one Route
     * const route = await prisma.route.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RouteFindFirstArgs>(args?: SelectSubset<T, RouteFindFirstArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Route that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteFindFirstOrThrowArgs} args - Arguments to find a Route
     * @example
     * // Get one Route
     * const route = await prisma.route.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RouteFindFirstOrThrowArgs>(args?: SelectSubset<T, RouteFindFirstOrThrowArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Routes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Routes
     * const routes = await prisma.route.findMany()
     * 
     * // Get first 10 Routes
     * const routes = await prisma.route.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const routeWithIdOnly = await prisma.route.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RouteFindManyArgs>(args?: SelectSubset<T, RouteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Route.
     * @param {RouteCreateArgs} args - Arguments to create a Route.
     * @example
     * // Create one Route
     * const Route = await prisma.route.create({
     *   data: {
     *     // ... data to create a Route
     *   }
     * })
     * 
     */
    create<T extends RouteCreateArgs>(args: SelectSubset<T, RouteCreateArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Routes.
     * @param {RouteCreateManyArgs} args - Arguments to create many Routes.
     * @example
     * // Create many Routes
     * const route = await prisma.route.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RouteCreateManyArgs>(args?: SelectSubset<T, RouteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Routes and returns the data saved in the database.
     * @param {RouteCreateManyAndReturnArgs} args - Arguments to create many Routes.
     * @example
     * // Create many Routes
     * const route = await prisma.route.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Routes and only return the `id`
     * const routeWithIdOnly = await prisma.route.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RouteCreateManyAndReturnArgs>(args?: SelectSubset<T, RouteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Route.
     * @param {RouteDeleteArgs} args - Arguments to delete one Route.
     * @example
     * // Delete one Route
     * const Route = await prisma.route.delete({
     *   where: {
     *     // ... filter to delete one Route
     *   }
     * })
     * 
     */
    delete<T extends RouteDeleteArgs>(args: SelectSubset<T, RouteDeleteArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Route.
     * @param {RouteUpdateArgs} args - Arguments to update one Route.
     * @example
     * // Update one Route
     * const route = await prisma.route.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RouteUpdateArgs>(args: SelectSubset<T, RouteUpdateArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Routes.
     * @param {RouteDeleteManyArgs} args - Arguments to filter Routes to delete.
     * @example
     * // Delete a few Routes
     * const { count } = await prisma.route.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RouteDeleteManyArgs>(args?: SelectSubset<T, RouteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Routes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Routes
     * const route = await prisma.route.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RouteUpdateManyArgs>(args: SelectSubset<T, RouteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Routes and returns the data updated in the database.
     * @param {RouteUpdateManyAndReturnArgs} args - Arguments to update many Routes.
     * @example
     * // Update many Routes
     * const route = await prisma.route.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Routes and only return the `id`
     * const routeWithIdOnly = await prisma.route.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RouteUpdateManyAndReturnArgs>(args: SelectSubset<T, RouteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Route.
     * @param {RouteUpsertArgs} args - Arguments to update or create a Route.
     * @example
     * // Update or create a Route
     * const route = await prisma.route.upsert({
     *   create: {
     *     // ... data to create a Route
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Route we want to update
     *   }
     * })
     */
    upsert<T extends RouteUpsertArgs>(args: SelectSubset<T, RouteUpsertArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Routes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteCountArgs} args - Arguments to filter Routes to count.
     * @example
     * // Count the number of Routes
     * const count = await prisma.route.count({
     *   where: {
     *     // ... the filter for the Routes we want to count
     *   }
     * })
    **/
    count<T extends RouteCountArgs>(
      args?: Subset<T, RouteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RouteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Route.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RouteAggregateArgs>(args: Subset<T, RouteAggregateArgs>): Prisma.PrismaPromise<GetRouteAggregateType<T>>

    /**
     * Group by Route.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RouteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RouteGroupByArgs['orderBy'] }
        : { orderBy?: RouteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RouteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRouteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Route model
   */
  readonly fields: RouteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Route.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RouteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    zone<T extends ZoneDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ZoneDefaultArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    meetingPoints<T extends Route$meetingPointsArgs<ExtArgs> = {}>(args?: Subset<T, Route$meetingPointsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingPointPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Subzone<T extends Route$SubzoneArgs<ExtArgs> = {}>(args?: Subset<T, Route$SubzoneArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubzonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Route model
   */
  interface RouteFieldRefs {
    readonly id: FieldRef<"Route", 'Int'>
    readonly name: FieldRef<"Route", 'String'>
    readonly zoneId: FieldRef<"Route", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Route findUnique
   */
  export type RouteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter, which Route to fetch.
     */
    where: RouteWhereUniqueInput
  }

  /**
   * Route findUniqueOrThrow
   */
  export type RouteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter, which Route to fetch.
     */
    where: RouteWhereUniqueInput
  }

  /**
   * Route findFirst
   */
  export type RouteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter, which Route to fetch.
     */
    where?: RouteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routes to fetch.
     */
    orderBy?: RouteOrderByWithRelationInput | RouteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Routes.
     */
    cursor?: RouteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Routes.
     */
    distinct?: RouteScalarFieldEnum | RouteScalarFieldEnum[]
  }

  /**
   * Route findFirstOrThrow
   */
  export type RouteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter, which Route to fetch.
     */
    where?: RouteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routes to fetch.
     */
    orderBy?: RouteOrderByWithRelationInput | RouteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Routes.
     */
    cursor?: RouteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Routes.
     */
    distinct?: RouteScalarFieldEnum | RouteScalarFieldEnum[]
  }

  /**
   * Route findMany
   */
  export type RouteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter, which Routes to fetch.
     */
    where?: RouteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routes to fetch.
     */
    orderBy?: RouteOrderByWithRelationInput | RouteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Routes.
     */
    cursor?: RouteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routes.
     */
    skip?: number
    distinct?: RouteScalarFieldEnum | RouteScalarFieldEnum[]
  }

  /**
   * Route create
   */
  export type RouteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * The data needed to create a Route.
     */
    data: XOR<RouteCreateInput, RouteUncheckedCreateInput>
  }

  /**
   * Route createMany
   */
  export type RouteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Routes.
     */
    data: RouteCreateManyInput | RouteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Route createManyAndReturn
   */
  export type RouteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * The data used to create many Routes.
     */
    data: RouteCreateManyInput | RouteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Route update
   */
  export type RouteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * The data needed to update a Route.
     */
    data: XOR<RouteUpdateInput, RouteUncheckedUpdateInput>
    /**
     * Choose, which Route to update.
     */
    where: RouteWhereUniqueInput
  }

  /**
   * Route updateMany
   */
  export type RouteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Routes.
     */
    data: XOR<RouteUpdateManyMutationInput, RouteUncheckedUpdateManyInput>
    /**
     * Filter which Routes to update
     */
    where?: RouteWhereInput
    /**
     * Limit how many Routes to update.
     */
    limit?: number
  }

  /**
   * Route updateManyAndReturn
   */
  export type RouteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * The data used to update Routes.
     */
    data: XOR<RouteUpdateManyMutationInput, RouteUncheckedUpdateManyInput>
    /**
     * Filter which Routes to update
     */
    where?: RouteWhereInput
    /**
     * Limit how many Routes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Route upsert
   */
  export type RouteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * The filter to search for the Route to update in case it exists.
     */
    where: RouteWhereUniqueInput
    /**
     * In case the Route found by the `where` argument doesn't exist, create a new Route with this data.
     */
    create: XOR<RouteCreateInput, RouteUncheckedCreateInput>
    /**
     * In case the Route was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RouteUpdateInput, RouteUncheckedUpdateInput>
  }

  /**
   * Route delete
   */
  export type RouteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter which Route to delete.
     */
    where: RouteWhereUniqueInput
  }

  /**
   * Route deleteMany
   */
  export type RouteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Routes to delete
     */
    where?: RouteWhereInput
    /**
     * Limit how many Routes to delete.
     */
    limit?: number
  }

  /**
   * Route.meetingPoints
   */
  export type Route$meetingPointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingPoint
     */
    select?: MeetingPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingPoint
     */
    omit?: MeetingPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingPointInclude<ExtArgs> | null
    where?: MeetingPointWhereInput
    orderBy?: MeetingPointOrderByWithRelationInput | MeetingPointOrderByWithRelationInput[]
    cursor?: MeetingPointWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetingPointScalarFieldEnum | MeetingPointScalarFieldEnum[]
  }

  /**
   * Route.Subzone
   */
  export type Route$SubzoneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subzone
     */
    select?: SubzoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subzone
     */
    omit?: SubzoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubzoneInclude<ExtArgs> | null
    where?: SubzoneWhereInput
    orderBy?: SubzoneOrderByWithRelationInput | SubzoneOrderByWithRelationInput[]
    cursor?: SubzoneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubzoneScalarFieldEnum | SubzoneScalarFieldEnum[]
  }

  /**
   * Route without action
   */
  export type RouteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Route
     */
    omit?: RouteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
  }


  /**
   * Model Subzone
   */

  export type AggregateSubzone = {
    _count: SubzoneCountAggregateOutputType | null
    _avg: SubzoneAvgAggregateOutputType | null
    _sum: SubzoneSumAggregateOutputType | null
    _min: SubzoneMinAggregateOutputType | null
    _max: SubzoneMaxAggregateOutputType | null
  }

  export type SubzoneAvgAggregateOutputType = {
    id: number | null
    routeId: number | null
    baseFare: number | null
    costPerMin: number | null
    costPerKm: number | null
  }

  export type SubzoneSumAggregateOutputType = {
    id: number | null
    routeId: number | null
    baseFare: number | null
    costPerMin: number | null
    costPerKm: number | null
  }

  export type SubzoneMinAggregateOutputType = {
    id: number | null
    name: string | null
    routeId: number | null
    baseFare: number | null
    costPerMin: number | null
    costPerKm: number | null
  }

  export type SubzoneMaxAggregateOutputType = {
    id: number | null
    name: string | null
    routeId: number | null
    baseFare: number | null
    costPerMin: number | null
    costPerKm: number | null
  }

  export type SubzoneCountAggregateOutputType = {
    id: number
    name: number
    routeId: number
    baseFare: number
    costPerMin: number
    costPerKm: number
    _all: number
  }


  export type SubzoneAvgAggregateInputType = {
    id?: true
    routeId?: true
    baseFare?: true
    costPerMin?: true
    costPerKm?: true
  }

  export type SubzoneSumAggregateInputType = {
    id?: true
    routeId?: true
    baseFare?: true
    costPerMin?: true
    costPerKm?: true
  }

  export type SubzoneMinAggregateInputType = {
    id?: true
    name?: true
    routeId?: true
    baseFare?: true
    costPerMin?: true
    costPerKm?: true
  }

  export type SubzoneMaxAggregateInputType = {
    id?: true
    name?: true
    routeId?: true
    baseFare?: true
    costPerMin?: true
    costPerKm?: true
  }

  export type SubzoneCountAggregateInputType = {
    id?: true
    name?: true
    routeId?: true
    baseFare?: true
    costPerMin?: true
    costPerKm?: true
    _all?: true
  }

  export type SubzoneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subzone to aggregate.
     */
    where?: SubzoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subzones to fetch.
     */
    orderBy?: SubzoneOrderByWithRelationInput | SubzoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubzoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subzones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subzones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subzones
    **/
    _count?: true | SubzoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubzoneAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubzoneSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubzoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubzoneMaxAggregateInputType
  }

  export type GetSubzoneAggregateType<T extends SubzoneAggregateArgs> = {
        [P in keyof T & keyof AggregateSubzone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubzone[P]>
      : GetScalarType<T[P], AggregateSubzone[P]>
  }




  export type SubzoneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubzoneWhereInput
    orderBy?: SubzoneOrderByWithAggregationInput | SubzoneOrderByWithAggregationInput[]
    by: SubzoneScalarFieldEnum[] | SubzoneScalarFieldEnum
    having?: SubzoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubzoneCountAggregateInputType | true
    _avg?: SubzoneAvgAggregateInputType
    _sum?: SubzoneSumAggregateInputType
    _min?: SubzoneMinAggregateInputType
    _max?: SubzoneMaxAggregateInputType
  }

  export type SubzoneGroupByOutputType = {
    id: number
    name: string
    routeId: number
    baseFare: number
    costPerMin: number
    costPerKm: number
    _count: SubzoneCountAggregateOutputType | null
    _avg: SubzoneAvgAggregateOutputType | null
    _sum: SubzoneSumAggregateOutputType | null
    _min: SubzoneMinAggregateOutputType | null
    _max: SubzoneMaxAggregateOutputType | null
  }

  type GetSubzoneGroupByPayload<T extends SubzoneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubzoneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubzoneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubzoneGroupByOutputType[P]>
            : GetScalarType<T[P], SubzoneGroupByOutputType[P]>
        }
      >
    >


  export type SubzoneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    routeId?: boolean
    baseFare?: boolean
    costPerMin?: boolean
    costPerKm?: boolean
    route?: boolean | RouteDefaultArgs<ExtArgs>
    meetingPoints?: boolean | Subzone$meetingPointsArgs<ExtArgs>
    _count?: boolean | SubzoneCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subzone"]>

  export type SubzoneSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    routeId?: boolean
    baseFare?: boolean
    costPerMin?: boolean
    costPerKm?: boolean
    route?: boolean | RouteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subzone"]>

  export type SubzoneSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    routeId?: boolean
    baseFare?: boolean
    costPerMin?: boolean
    costPerKm?: boolean
    route?: boolean | RouteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subzone"]>

  export type SubzoneSelectScalar = {
    id?: boolean
    name?: boolean
    routeId?: boolean
    baseFare?: boolean
    costPerMin?: boolean
    costPerKm?: boolean
  }

  export type SubzoneOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "routeId" | "baseFare" | "costPerMin" | "costPerKm", ExtArgs["result"]["subzone"]>
  export type SubzoneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    route?: boolean | RouteDefaultArgs<ExtArgs>
    meetingPoints?: boolean | Subzone$meetingPointsArgs<ExtArgs>
    _count?: boolean | SubzoneCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubzoneIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    route?: boolean | RouteDefaultArgs<ExtArgs>
  }
  export type SubzoneIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    route?: boolean | RouteDefaultArgs<ExtArgs>
  }

  export type $SubzonePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subzone"
    objects: {
      route: Prisma.$RoutePayload<ExtArgs>
      meetingPoints: Prisma.$MeetingPointPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      routeId: number
      baseFare: number
      costPerMin: number
      costPerKm: number
    }, ExtArgs["result"]["subzone"]>
    composites: {}
  }

  type SubzoneGetPayload<S extends boolean | null | undefined | SubzoneDefaultArgs> = $Result.GetResult<Prisma.$SubzonePayload, S>

  type SubzoneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubzoneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubzoneCountAggregateInputType | true
    }

  export interface SubzoneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subzone'], meta: { name: 'Subzone' } }
    /**
     * Find zero or one Subzone that matches the filter.
     * @param {SubzoneFindUniqueArgs} args - Arguments to find a Subzone
     * @example
     * // Get one Subzone
     * const subzone = await prisma.subzone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubzoneFindUniqueArgs>(args: SelectSubset<T, SubzoneFindUniqueArgs<ExtArgs>>): Prisma__SubzoneClient<$Result.GetResult<Prisma.$SubzonePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subzone that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubzoneFindUniqueOrThrowArgs} args - Arguments to find a Subzone
     * @example
     * // Get one Subzone
     * const subzone = await prisma.subzone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubzoneFindUniqueOrThrowArgs>(args: SelectSubset<T, SubzoneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubzoneClient<$Result.GetResult<Prisma.$SubzonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subzone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubzoneFindFirstArgs} args - Arguments to find a Subzone
     * @example
     * // Get one Subzone
     * const subzone = await prisma.subzone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubzoneFindFirstArgs>(args?: SelectSubset<T, SubzoneFindFirstArgs<ExtArgs>>): Prisma__SubzoneClient<$Result.GetResult<Prisma.$SubzonePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subzone that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubzoneFindFirstOrThrowArgs} args - Arguments to find a Subzone
     * @example
     * // Get one Subzone
     * const subzone = await prisma.subzone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubzoneFindFirstOrThrowArgs>(args?: SelectSubset<T, SubzoneFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubzoneClient<$Result.GetResult<Prisma.$SubzonePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subzones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubzoneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subzones
     * const subzones = await prisma.subzone.findMany()
     * 
     * // Get first 10 Subzones
     * const subzones = await prisma.subzone.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subzoneWithIdOnly = await prisma.subzone.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubzoneFindManyArgs>(args?: SelectSubset<T, SubzoneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubzonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subzone.
     * @param {SubzoneCreateArgs} args - Arguments to create a Subzone.
     * @example
     * // Create one Subzone
     * const Subzone = await prisma.subzone.create({
     *   data: {
     *     // ... data to create a Subzone
     *   }
     * })
     * 
     */
    create<T extends SubzoneCreateArgs>(args: SelectSubset<T, SubzoneCreateArgs<ExtArgs>>): Prisma__SubzoneClient<$Result.GetResult<Prisma.$SubzonePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subzones.
     * @param {SubzoneCreateManyArgs} args - Arguments to create many Subzones.
     * @example
     * // Create many Subzones
     * const subzone = await prisma.subzone.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubzoneCreateManyArgs>(args?: SelectSubset<T, SubzoneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subzones and returns the data saved in the database.
     * @param {SubzoneCreateManyAndReturnArgs} args - Arguments to create many Subzones.
     * @example
     * // Create many Subzones
     * const subzone = await prisma.subzone.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subzones and only return the `id`
     * const subzoneWithIdOnly = await prisma.subzone.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubzoneCreateManyAndReturnArgs>(args?: SelectSubset<T, SubzoneCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubzonePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subzone.
     * @param {SubzoneDeleteArgs} args - Arguments to delete one Subzone.
     * @example
     * // Delete one Subzone
     * const Subzone = await prisma.subzone.delete({
     *   where: {
     *     // ... filter to delete one Subzone
     *   }
     * })
     * 
     */
    delete<T extends SubzoneDeleteArgs>(args: SelectSubset<T, SubzoneDeleteArgs<ExtArgs>>): Prisma__SubzoneClient<$Result.GetResult<Prisma.$SubzonePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subzone.
     * @param {SubzoneUpdateArgs} args - Arguments to update one Subzone.
     * @example
     * // Update one Subzone
     * const subzone = await prisma.subzone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubzoneUpdateArgs>(args: SelectSubset<T, SubzoneUpdateArgs<ExtArgs>>): Prisma__SubzoneClient<$Result.GetResult<Prisma.$SubzonePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subzones.
     * @param {SubzoneDeleteManyArgs} args - Arguments to filter Subzones to delete.
     * @example
     * // Delete a few Subzones
     * const { count } = await prisma.subzone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubzoneDeleteManyArgs>(args?: SelectSubset<T, SubzoneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subzones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubzoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subzones
     * const subzone = await prisma.subzone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubzoneUpdateManyArgs>(args: SelectSubset<T, SubzoneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subzones and returns the data updated in the database.
     * @param {SubzoneUpdateManyAndReturnArgs} args - Arguments to update many Subzones.
     * @example
     * // Update many Subzones
     * const subzone = await prisma.subzone.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subzones and only return the `id`
     * const subzoneWithIdOnly = await prisma.subzone.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubzoneUpdateManyAndReturnArgs>(args: SelectSubset<T, SubzoneUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubzonePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subzone.
     * @param {SubzoneUpsertArgs} args - Arguments to update or create a Subzone.
     * @example
     * // Update or create a Subzone
     * const subzone = await prisma.subzone.upsert({
     *   create: {
     *     // ... data to create a Subzone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subzone we want to update
     *   }
     * })
     */
    upsert<T extends SubzoneUpsertArgs>(args: SelectSubset<T, SubzoneUpsertArgs<ExtArgs>>): Prisma__SubzoneClient<$Result.GetResult<Prisma.$SubzonePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subzones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubzoneCountArgs} args - Arguments to filter Subzones to count.
     * @example
     * // Count the number of Subzones
     * const count = await prisma.subzone.count({
     *   where: {
     *     // ... the filter for the Subzones we want to count
     *   }
     * })
    **/
    count<T extends SubzoneCountArgs>(
      args?: Subset<T, SubzoneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubzoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subzone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubzoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubzoneAggregateArgs>(args: Subset<T, SubzoneAggregateArgs>): Prisma.PrismaPromise<GetSubzoneAggregateType<T>>

    /**
     * Group by Subzone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubzoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubzoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubzoneGroupByArgs['orderBy'] }
        : { orderBy?: SubzoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubzoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubzoneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subzone model
   */
  readonly fields: SubzoneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subzone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubzoneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    route<T extends RouteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RouteDefaultArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    meetingPoints<T extends Subzone$meetingPointsArgs<ExtArgs> = {}>(args?: Subset<T, Subzone$meetingPointsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingPointPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subzone model
   */
  interface SubzoneFieldRefs {
    readonly id: FieldRef<"Subzone", 'Int'>
    readonly name: FieldRef<"Subzone", 'String'>
    readonly routeId: FieldRef<"Subzone", 'Int'>
    readonly baseFare: FieldRef<"Subzone", 'Float'>
    readonly costPerMin: FieldRef<"Subzone", 'Float'>
    readonly costPerKm: FieldRef<"Subzone", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Subzone findUnique
   */
  export type SubzoneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subzone
     */
    select?: SubzoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subzone
     */
    omit?: SubzoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubzoneInclude<ExtArgs> | null
    /**
     * Filter, which Subzone to fetch.
     */
    where: SubzoneWhereUniqueInput
  }

  /**
   * Subzone findUniqueOrThrow
   */
  export type SubzoneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subzone
     */
    select?: SubzoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subzone
     */
    omit?: SubzoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubzoneInclude<ExtArgs> | null
    /**
     * Filter, which Subzone to fetch.
     */
    where: SubzoneWhereUniqueInput
  }

  /**
   * Subzone findFirst
   */
  export type SubzoneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subzone
     */
    select?: SubzoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subzone
     */
    omit?: SubzoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubzoneInclude<ExtArgs> | null
    /**
     * Filter, which Subzone to fetch.
     */
    where?: SubzoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subzones to fetch.
     */
    orderBy?: SubzoneOrderByWithRelationInput | SubzoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subzones.
     */
    cursor?: SubzoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subzones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subzones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subzones.
     */
    distinct?: SubzoneScalarFieldEnum | SubzoneScalarFieldEnum[]
  }

  /**
   * Subzone findFirstOrThrow
   */
  export type SubzoneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subzone
     */
    select?: SubzoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subzone
     */
    omit?: SubzoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubzoneInclude<ExtArgs> | null
    /**
     * Filter, which Subzone to fetch.
     */
    where?: SubzoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subzones to fetch.
     */
    orderBy?: SubzoneOrderByWithRelationInput | SubzoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subzones.
     */
    cursor?: SubzoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subzones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subzones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subzones.
     */
    distinct?: SubzoneScalarFieldEnum | SubzoneScalarFieldEnum[]
  }

  /**
   * Subzone findMany
   */
  export type SubzoneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subzone
     */
    select?: SubzoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subzone
     */
    omit?: SubzoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubzoneInclude<ExtArgs> | null
    /**
     * Filter, which Subzones to fetch.
     */
    where?: SubzoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subzones to fetch.
     */
    orderBy?: SubzoneOrderByWithRelationInput | SubzoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subzones.
     */
    cursor?: SubzoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subzones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subzones.
     */
    skip?: number
    distinct?: SubzoneScalarFieldEnum | SubzoneScalarFieldEnum[]
  }

  /**
   * Subzone create
   */
  export type SubzoneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subzone
     */
    select?: SubzoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subzone
     */
    omit?: SubzoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubzoneInclude<ExtArgs> | null
    /**
     * The data needed to create a Subzone.
     */
    data: XOR<SubzoneCreateInput, SubzoneUncheckedCreateInput>
  }

  /**
   * Subzone createMany
   */
  export type SubzoneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subzones.
     */
    data: SubzoneCreateManyInput | SubzoneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subzone createManyAndReturn
   */
  export type SubzoneCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subzone
     */
    select?: SubzoneSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subzone
     */
    omit?: SubzoneOmit<ExtArgs> | null
    /**
     * The data used to create many Subzones.
     */
    data: SubzoneCreateManyInput | SubzoneCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubzoneIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subzone update
   */
  export type SubzoneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subzone
     */
    select?: SubzoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subzone
     */
    omit?: SubzoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubzoneInclude<ExtArgs> | null
    /**
     * The data needed to update a Subzone.
     */
    data: XOR<SubzoneUpdateInput, SubzoneUncheckedUpdateInput>
    /**
     * Choose, which Subzone to update.
     */
    where: SubzoneWhereUniqueInput
  }

  /**
   * Subzone updateMany
   */
  export type SubzoneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subzones.
     */
    data: XOR<SubzoneUpdateManyMutationInput, SubzoneUncheckedUpdateManyInput>
    /**
     * Filter which Subzones to update
     */
    where?: SubzoneWhereInput
    /**
     * Limit how many Subzones to update.
     */
    limit?: number
  }

  /**
   * Subzone updateManyAndReturn
   */
  export type SubzoneUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subzone
     */
    select?: SubzoneSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subzone
     */
    omit?: SubzoneOmit<ExtArgs> | null
    /**
     * The data used to update Subzones.
     */
    data: XOR<SubzoneUpdateManyMutationInput, SubzoneUncheckedUpdateManyInput>
    /**
     * Filter which Subzones to update
     */
    where?: SubzoneWhereInput
    /**
     * Limit how many Subzones to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubzoneIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subzone upsert
   */
  export type SubzoneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subzone
     */
    select?: SubzoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subzone
     */
    omit?: SubzoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubzoneInclude<ExtArgs> | null
    /**
     * The filter to search for the Subzone to update in case it exists.
     */
    where: SubzoneWhereUniqueInput
    /**
     * In case the Subzone found by the `where` argument doesn't exist, create a new Subzone with this data.
     */
    create: XOR<SubzoneCreateInput, SubzoneUncheckedCreateInput>
    /**
     * In case the Subzone was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubzoneUpdateInput, SubzoneUncheckedUpdateInput>
  }

  /**
   * Subzone delete
   */
  export type SubzoneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subzone
     */
    select?: SubzoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subzone
     */
    omit?: SubzoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubzoneInclude<ExtArgs> | null
    /**
     * Filter which Subzone to delete.
     */
    where: SubzoneWhereUniqueInput
  }

  /**
   * Subzone deleteMany
   */
  export type SubzoneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subzones to delete
     */
    where?: SubzoneWhereInput
    /**
     * Limit how many Subzones to delete.
     */
    limit?: number
  }

  /**
   * Subzone.meetingPoints
   */
  export type Subzone$meetingPointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingPoint
     */
    select?: MeetingPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingPoint
     */
    omit?: MeetingPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingPointInclude<ExtArgs> | null
    where?: MeetingPointWhereInput
    orderBy?: MeetingPointOrderByWithRelationInput | MeetingPointOrderByWithRelationInput[]
    cursor?: MeetingPointWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetingPointScalarFieldEnum | MeetingPointScalarFieldEnum[]
  }

  /**
   * Subzone without action
   */
  export type SubzoneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subzone
     */
    select?: SubzoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subzone
     */
    omit?: SubzoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubzoneInclude<ExtArgs> | null
  }


  /**
   * Model MeetingPoint
   */

  export type AggregateMeetingPoint = {
    _count: MeetingPointCountAggregateOutputType | null
    _avg: MeetingPointAvgAggregateOutputType | null
    _sum: MeetingPointSumAggregateOutputType | null
    _min: MeetingPointMinAggregateOutputType | null
    _max: MeetingPointMaxAggregateOutputType | null
  }

  export type MeetingPointAvgAggregateOutputType = {
    id: number | null
    routeId: number | null
    subzoneId: number | null
    distanceToGiu: number | null
    timeToGiu: number | null
    latitude: number | null
    longitude: number | null
  }

  export type MeetingPointSumAggregateOutputType = {
    id: number | null
    routeId: number | null
    subzoneId: number | null
    distanceToGiu: number | null
    timeToGiu: number | null
    latitude: number | null
    longitude: number | null
  }

  export type MeetingPointMinAggregateOutputType = {
    id: number | null
    name: string | null
    routeId: number | null
    subzoneId: number | null
    distanceToGiu: number | null
    timeToGiu: number | null
    latitude: number | null
    longitude: number | null
  }

  export type MeetingPointMaxAggregateOutputType = {
    id: number | null
    name: string | null
    routeId: number | null
    subzoneId: number | null
    distanceToGiu: number | null
    timeToGiu: number | null
    latitude: number | null
    longitude: number | null
  }

  export type MeetingPointCountAggregateOutputType = {
    id: number
    name: number
    routeId: number
    subzoneId: number
    distanceToGiu: number
    timeToGiu: number
    latitude: number
    longitude: number
    _all: number
  }


  export type MeetingPointAvgAggregateInputType = {
    id?: true
    routeId?: true
    subzoneId?: true
    distanceToGiu?: true
    timeToGiu?: true
    latitude?: true
    longitude?: true
  }

  export type MeetingPointSumAggregateInputType = {
    id?: true
    routeId?: true
    subzoneId?: true
    distanceToGiu?: true
    timeToGiu?: true
    latitude?: true
    longitude?: true
  }

  export type MeetingPointMinAggregateInputType = {
    id?: true
    name?: true
    routeId?: true
    subzoneId?: true
    distanceToGiu?: true
    timeToGiu?: true
    latitude?: true
    longitude?: true
  }

  export type MeetingPointMaxAggregateInputType = {
    id?: true
    name?: true
    routeId?: true
    subzoneId?: true
    distanceToGiu?: true
    timeToGiu?: true
    latitude?: true
    longitude?: true
  }

  export type MeetingPointCountAggregateInputType = {
    id?: true
    name?: true
    routeId?: true
    subzoneId?: true
    distanceToGiu?: true
    timeToGiu?: true
    latitude?: true
    longitude?: true
    _all?: true
  }

  export type MeetingPointAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetingPoint to aggregate.
     */
    where?: MeetingPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingPoints to fetch.
     */
    orderBy?: MeetingPointOrderByWithRelationInput | MeetingPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetingPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetingPoints
    **/
    _count?: true | MeetingPointCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeetingPointAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeetingPointSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetingPointMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetingPointMaxAggregateInputType
  }

  export type GetMeetingPointAggregateType<T extends MeetingPointAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetingPoint]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetingPoint[P]>
      : GetScalarType<T[P], AggregateMeetingPoint[P]>
  }




  export type MeetingPointGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetingPointWhereInput
    orderBy?: MeetingPointOrderByWithAggregationInput | MeetingPointOrderByWithAggregationInput[]
    by: MeetingPointScalarFieldEnum[] | MeetingPointScalarFieldEnum
    having?: MeetingPointScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetingPointCountAggregateInputType | true
    _avg?: MeetingPointAvgAggregateInputType
    _sum?: MeetingPointSumAggregateInputType
    _min?: MeetingPointMinAggregateInputType
    _max?: MeetingPointMaxAggregateInputType
  }

  export type MeetingPointGroupByOutputType = {
    id: number
    name: string
    routeId: number
    subzoneId: number | null
    distanceToGiu: number
    timeToGiu: number
    latitude: number | null
    longitude: number | null
    _count: MeetingPointCountAggregateOutputType | null
    _avg: MeetingPointAvgAggregateOutputType | null
    _sum: MeetingPointSumAggregateOutputType | null
    _min: MeetingPointMinAggregateOutputType | null
    _max: MeetingPointMaxAggregateOutputType | null
  }

  type GetMeetingPointGroupByPayload<T extends MeetingPointGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeetingPointGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetingPointGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetingPointGroupByOutputType[P]>
            : GetScalarType<T[P], MeetingPointGroupByOutputType[P]>
        }
      >
    >


  export type MeetingPointSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    routeId?: boolean
    subzoneId?: boolean
    distanceToGiu?: boolean
    timeToGiu?: boolean
    latitude?: boolean
    longitude?: boolean
    route?: boolean | RouteDefaultArgs<ExtArgs>
    subzone?: boolean | MeetingPoint$subzoneArgs<ExtArgs>
    ridesAsOrigin?: boolean | MeetingPoint$ridesAsOriginArgs<ExtArgs>
    ridesAsDestination?: boolean | MeetingPoint$ridesAsDestinationArgs<ExtArgs>
    _count?: boolean | MeetingPointCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meetingPoint"]>

  export type MeetingPointSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    routeId?: boolean
    subzoneId?: boolean
    distanceToGiu?: boolean
    timeToGiu?: boolean
    latitude?: boolean
    longitude?: boolean
    route?: boolean | RouteDefaultArgs<ExtArgs>
    subzone?: boolean | MeetingPoint$subzoneArgs<ExtArgs>
  }, ExtArgs["result"]["meetingPoint"]>

  export type MeetingPointSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    routeId?: boolean
    subzoneId?: boolean
    distanceToGiu?: boolean
    timeToGiu?: boolean
    latitude?: boolean
    longitude?: boolean
    route?: boolean | RouteDefaultArgs<ExtArgs>
    subzone?: boolean | MeetingPoint$subzoneArgs<ExtArgs>
  }, ExtArgs["result"]["meetingPoint"]>

  export type MeetingPointSelectScalar = {
    id?: boolean
    name?: boolean
    routeId?: boolean
    subzoneId?: boolean
    distanceToGiu?: boolean
    timeToGiu?: boolean
    latitude?: boolean
    longitude?: boolean
  }

  export type MeetingPointOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "routeId" | "subzoneId" | "distanceToGiu" | "timeToGiu" | "latitude" | "longitude", ExtArgs["result"]["meetingPoint"]>
  export type MeetingPointInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    route?: boolean | RouteDefaultArgs<ExtArgs>
    subzone?: boolean | MeetingPoint$subzoneArgs<ExtArgs>
    ridesAsOrigin?: boolean | MeetingPoint$ridesAsOriginArgs<ExtArgs>
    ridesAsDestination?: boolean | MeetingPoint$ridesAsDestinationArgs<ExtArgs>
    _count?: boolean | MeetingPointCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MeetingPointIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    route?: boolean | RouteDefaultArgs<ExtArgs>
    subzone?: boolean | MeetingPoint$subzoneArgs<ExtArgs>
  }
  export type MeetingPointIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    route?: boolean | RouteDefaultArgs<ExtArgs>
    subzone?: boolean | MeetingPoint$subzoneArgs<ExtArgs>
  }

  export type $MeetingPointPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MeetingPoint"
    objects: {
      route: Prisma.$RoutePayload<ExtArgs>
      subzone: Prisma.$SubzonePayload<ExtArgs> | null
      ridesAsOrigin: Prisma.$RidePayload<ExtArgs>[]
      ridesAsDestination: Prisma.$RidePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      routeId: number
      subzoneId: number | null
      distanceToGiu: number
      timeToGiu: number
      latitude: number | null
      longitude: number | null
    }, ExtArgs["result"]["meetingPoint"]>
    composites: {}
  }

  type MeetingPointGetPayload<S extends boolean | null | undefined | MeetingPointDefaultArgs> = $Result.GetResult<Prisma.$MeetingPointPayload, S>

  type MeetingPointCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MeetingPointFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MeetingPointCountAggregateInputType | true
    }

  export interface MeetingPointDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeetingPoint'], meta: { name: 'MeetingPoint' } }
    /**
     * Find zero or one MeetingPoint that matches the filter.
     * @param {MeetingPointFindUniqueArgs} args - Arguments to find a MeetingPoint
     * @example
     * // Get one MeetingPoint
     * const meetingPoint = await prisma.meetingPoint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeetingPointFindUniqueArgs>(args: SelectSubset<T, MeetingPointFindUniqueArgs<ExtArgs>>): Prisma__MeetingPointClient<$Result.GetResult<Prisma.$MeetingPointPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MeetingPoint that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MeetingPointFindUniqueOrThrowArgs} args - Arguments to find a MeetingPoint
     * @example
     * // Get one MeetingPoint
     * const meetingPoint = await prisma.meetingPoint.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeetingPointFindUniqueOrThrowArgs>(args: SelectSubset<T, MeetingPointFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeetingPointClient<$Result.GetResult<Prisma.$MeetingPointPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetingPoint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingPointFindFirstArgs} args - Arguments to find a MeetingPoint
     * @example
     * // Get one MeetingPoint
     * const meetingPoint = await prisma.meetingPoint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeetingPointFindFirstArgs>(args?: SelectSubset<T, MeetingPointFindFirstArgs<ExtArgs>>): Prisma__MeetingPointClient<$Result.GetResult<Prisma.$MeetingPointPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetingPoint that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingPointFindFirstOrThrowArgs} args - Arguments to find a MeetingPoint
     * @example
     * // Get one MeetingPoint
     * const meetingPoint = await prisma.meetingPoint.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeetingPointFindFirstOrThrowArgs>(args?: SelectSubset<T, MeetingPointFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeetingPointClient<$Result.GetResult<Prisma.$MeetingPointPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MeetingPoints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingPointFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetingPoints
     * const meetingPoints = await prisma.meetingPoint.findMany()
     * 
     * // Get first 10 MeetingPoints
     * const meetingPoints = await prisma.meetingPoint.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetingPointWithIdOnly = await prisma.meetingPoint.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeetingPointFindManyArgs>(args?: SelectSubset<T, MeetingPointFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingPointPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MeetingPoint.
     * @param {MeetingPointCreateArgs} args - Arguments to create a MeetingPoint.
     * @example
     * // Create one MeetingPoint
     * const MeetingPoint = await prisma.meetingPoint.create({
     *   data: {
     *     // ... data to create a MeetingPoint
     *   }
     * })
     * 
     */
    create<T extends MeetingPointCreateArgs>(args: SelectSubset<T, MeetingPointCreateArgs<ExtArgs>>): Prisma__MeetingPointClient<$Result.GetResult<Prisma.$MeetingPointPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MeetingPoints.
     * @param {MeetingPointCreateManyArgs} args - Arguments to create many MeetingPoints.
     * @example
     * // Create many MeetingPoints
     * const meetingPoint = await prisma.meetingPoint.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeetingPointCreateManyArgs>(args?: SelectSubset<T, MeetingPointCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MeetingPoints and returns the data saved in the database.
     * @param {MeetingPointCreateManyAndReturnArgs} args - Arguments to create many MeetingPoints.
     * @example
     * // Create many MeetingPoints
     * const meetingPoint = await prisma.meetingPoint.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MeetingPoints and only return the `id`
     * const meetingPointWithIdOnly = await prisma.meetingPoint.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MeetingPointCreateManyAndReturnArgs>(args?: SelectSubset<T, MeetingPointCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingPointPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MeetingPoint.
     * @param {MeetingPointDeleteArgs} args - Arguments to delete one MeetingPoint.
     * @example
     * // Delete one MeetingPoint
     * const MeetingPoint = await prisma.meetingPoint.delete({
     *   where: {
     *     // ... filter to delete one MeetingPoint
     *   }
     * })
     * 
     */
    delete<T extends MeetingPointDeleteArgs>(args: SelectSubset<T, MeetingPointDeleteArgs<ExtArgs>>): Prisma__MeetingPointClient<$Result.GetResult<Prisma.$MeetingPointPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MeetingPoint.
     * @param {MeetingPointUpdateArgs} args - Arguments to update one MeetingPoint.
     * @example
     * // Update one MeetingPoint
     * const meetingPoint = await prisma.meetingPoint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeetingPointUpdateArgs>(args: SelectSubset<T, MeetingPointUpdateArgs<ExtArgs>>): Prisma__MeetingPointClient<$Result.GetResult<Prisma.$MeetingPointPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MeetingPoints.
     * @param {MeetingPointDeleteManyArgs} args - Arguments to filter MeetingPoints to delete.
     * @example
     * // Delete a few MeetingPoints
     * const { count } = await prisma.meetingPoint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeetingPointDeleteManyArgs>(args?: SelectSubset<T, MeetingPointDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetingPoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingPointUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetingPoints
     * const meetingPoint = await prisma.meetingPoint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeetingPointUpdateManyArgs>(args: SelectSubset<T, MeetingPointUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetingPoints and returns the data updated in the database.
     * @param {MeetingPointUpdateManyAndReturnArgs} args - Arguments to update many MeetingPoints.
     * @example
     * // Update many MeetingPoints
     * const meetingPoint = await prisma.meetingPoint.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MeetingPoints and only return the `id`
     * const meetingPointWithIdOnly = await prisma.meetingPoint.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MeetingPointUpdateManyAndReturnArgs>(args: SelectSubset<T, MeetingPointUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingPointPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MeetingPoint.
     * @param {MeetingPointUpsertArgs} args - Arguments to update or create a MeetingPoint.
     * @example
     * // Update or create a MeetingPoint
     * const meetingPoint = await prisma.meetingPoint.upsert({
     *   create: {
     *     // ... data to create a MeetingPoint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetingPoint we want to update
     *   }
     * })
     */
    upsert<T extends MeetingPointUpsertArgs>(args: SelectSubset<T, MeetingPointUpsertArgs<ExtArgs>>): Prisma__MeetingPointClient<$Result.GetResult<Prisma.$MeetingPointPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MeetingPoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingPointCountArgs} args - Arguments to filter MeetingPoints to count.
     * @example
     * // Count the number of MeetingPoints
     * const count = await prisma.meetingPoint.count({
     *   where: {
     *     // ... the filter for the MeetingPoints we want to count
     *   }
     * })
    **/
    count<T extends MeetingPointCountArgs>(
      args?: Subset<T, MeetingPointCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetingPointCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetingPoint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingPointAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetingPointAggregateArgs>(args: Subset<T, MeetingPointAggregateArgs>): Prisma.PrismaPromise<GetMeetingPointAggregateType<T>>

    /**
     * Group by MeetingPoint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingPointGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetingPointGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetingPointGroupByArgs['orderBy'] }
        : { orderBy?: MeetingPointGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetingPointGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingPointGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MeetingPoint model
   */
  readonly fields: MeetingPointFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetingPoint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeetingPointClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    route<T extends RouteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RouteDefaultArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subzone<T extends MeetingPoint$subzoneArgs<ExtArgs> = {}>(args?: Subset<T, MeetingPoint$subzoneArgs<ExtArgs>>): Prisma__SubzoneClient<$Result.GetResult<Prisma.$SubzonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    ridesAsOrigin<T extends MeetingPoint$ridesAsOriginArgs<ExtArgs> = {}>(args?: Subset<T, MeetingPoint$ridesAsOriginArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ridesAsDestination<T extends MeetingPoint$ridesAsDestinationArgs<ExtArgs> = {}>(args?: Subset<T, MeetingPoint$ridesAsDestinationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MeetingPoint model
   */
  interface MeetingPointFieldRefs {
    readonly id: FieldRef<"MeetingPoint", 'Int'>
    readonly name: FieldRef<"MeetingPoint", 'String'>
    readonly routeId: FieldRef<"MeetingPoint", 'Int'>
    readonly subzoneId: FieldRef<"MeetingPoint", 'Int'>
    readonly distanceToGiu: FieldRef<"MeetingPoint", 'Float'>
    readonly timeToGiu: FieldRef<"MeetingPoint", 'Int'>
    readonly latitude: FieldRef<"MeetingPoint", 'Float'>
    readonly longitude: FieldRef<"MeetingPoint", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * MeetingPoint findUnique
   */
  export type MeetingPointFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingPoint
     */
    select?: MeetingPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingPoint
     */
    omit?: MeetingPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingPointInclude<ExtArgs> | null
    /**
     * Filter, which MeetingPoint to fetch.
     */
    where: MeetingPointWhereUniqueInput
  }

  /**
   * MeetingPoint findUniqueOrThrow
   */
  export type MeetingPointFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingPoint
     */
    select?: MeetingPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingPoint
     */
    omit?: MeetingPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingPointInclude<ExtArgs> | null
    /**
     * Filter, which MeetingPoint to fetch.
     */
    where: MeetingPointWhereUniqueInput
  }

  /**
   * MeetingPoint findFirst
   */
  export type MeetingPointFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingPoint
     */
    select?: MeetingPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingPoint
     */
    omit?: MeetingPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingPointInclude<ExtArgs> | null
    /**
     * Filter, which MeetingPoint to fetch.
     */
    where?: MeetingPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingPoints to fetch.
     */
    orderBy?: MeetingPointOrderByWithRelationInput | MeetingPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingPoints.
     */
    cursor?: MeetingPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingPoints.
     */
    distinct?: MeetingPointScalarFieldEnum | MeetingPointScalarFieldEnum[]
  }

  /**
   * MeetingPoint findFirstOrThrow
   */
  export type MeetingPointFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingPoint
     */
    select?: MeetingPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingPoint
     */
    omit?: MeetingPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingPointInclude<ExtArgs> | null
    /**
     * Filter, which MeetingPoint to fetch.
     */
    where?: MeetingPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingPoints to fetch.
     */
    orderBy?: MeetingPointOrderByWithRelationInput | MeetingPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingPoints.
     */
    cursor?: MeetingPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingPoints.
     */
    distinct?: MeetingPointScalarFieldEnum | MeetingPointScalarFieldEnum[]
  }

  /**
   * MeetingPoint findMany
   */
  export type MeetingPointFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingPoint
     */
    select?: MeetingPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingPoint
     */
    omit?: MeetingPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingPointInclude<ExtArgs> | null
    /**
     * Filter, which MeetingPoints to fetch.
     */
    where?: MeetingPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingPoints to fetch.
     */
    orderBy?: MeetingPointOrderByWithRelationInput | MeetingPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetingPoints.
     */
    cursor?: MeetingPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingPoints.
     */
    skip?: number
    distinct?: MeetingPointScalarFieldEnum | MeetingPointScalarFieldEnum[]
  }

  /**
   * MeetingPoint create
   */
  export type MeetingPointCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingPoint
     */
    select?: MeetingPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingPoint
     */
    omit?: MeetingPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingPointInclude<ExtArgs> | null
    /**
     * The data needed to create a MeetingPoint.
     */
    data: XOR<MeetingPointCreateInput, MeetingPointUncheckedCreateInput>
  }

  /**
   * MeetingPoint createMany
   */
  export type MeetingPointCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MeetingPoints.
     */
    data: MeetingPointCreateManyInput | MeetingPointCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MeetingPoint createManyAndReturn
   */
  export type MeetingPointCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingPoint
     */
    select?: MeetingPointSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingPoint
     */
    omit?: MeetingPointOmit<ExtArgs> | null
    /**
     * The data used to create many MeetingPoints.
     */
    data: MeetingPointCreateManyInput | MeetingPointCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingPointIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MeetingPoint update
   */
  export type MeetingPointUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingPoint
     */
    select?: MeetingPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingPoint
     */
    omit?: MeetingPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingPointInclude<ExtArgs> | null
    /**
     * The data needed to update a MeetingPoint.
     */
    data: XOR<MeetingPointUpdateInput, MeetingPointUncheckedUpdateInput>
    /**
     * Choose, which MeetingPoint to update.
     */
    where: MeetingPointWhereUniqueInput
  }

  /**
   * MeetingPoint updateMany
   */
  export type MeetingPointUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MeetingPoints.
     */
    data: XOR<MeetingPointUpdateManyMutationInput, MeetingPointUncheckedUpdateManyInput>
    /**
     * Filter which MeetingPoints to update
     */
    where?: MeetingPointWhereInput
    /**
     * Limit how many MeetingPoints to update.
     */
    limit?: number
  }

  /**
   * MeetingPoint updateManyAndReturn
   */
  export type MeetingPointUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingPoint
     */
    select?: MeetingPointSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingPoint
     */
    omit?: MeetingPointOmit<ExtArgs> | null
    /**
     * The data used to update MeetingPoints.
     */
    data: XOR<MeetingPointUpdateManyMutationInput, MeetingPointUncheckedUpdateManyInput>
    /**
     * Filter which MeetingPoints to update
     */
    where?: MeetingPointWhereInput
    /**
     * Limit how many MeetingPoints to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingPointIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MeetingPoint upsert
   */
  export type MeetingPointUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingPoint
     */
    select?: MeetingPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingPoint
     */
    omit?: MeetingPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingPointInclude<ExtArgs> | null
    /**
     * The filter to search for the MeetingPoint to update in case it exists.
     */
    where: MeetingPointWhereUniqueInput
    /**
     * In case the MeetingPoint found by the `where` argument doesn't exist, create a new MeetingPoint with this data.
     */
    create: XOR<MeetingPointCreateInput, MeetingPointUncheckedCreateInput>
    /**
     * In case the MeetingPoint was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetingPointUpdateInput, MeetingPointUncheckedUpdateInput>
  }

  /**
   * MeetingPoint delete
   */
  export type MeetingPointDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingPoint
     */
    select?: MeetingPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingPoint
     */
    omit?: MeetingPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingPointInclude<ExtArgs> | null
    /**
     * Filter which MeetingPoint to delete.
     */
    where: MeetingPointWhereUniqueInput
  }

  /**
   * MeetingPoint deleteMany
   */
  export type MeetingPointDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetingPoints to delete
     */
    where?: MeetingPointWhereInput
    /**
     * Limit how many MeetingPoints to delete.
     */
    limit?: number
  }

  /**
   * MeetingPoint.subzone
   */
  export type MeetingPoint$subzoneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subzone
     */
    select?: SubzoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subzone
     */
    omit?: SubzoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubzoneInclude<ExtArgs> | null
    where?: SubzoneWhereInput
  }

  /**
   * MeetingPoint.ridesAsOrigin
   */
  export type MeetingPoint$ridesAsOriginArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ride
     */
    omit?: RideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideInclude<ExtArgs> | null
    where?: RideWhereInput
    orderBy?: RideOrderByWithRelationInput | RideOrderByWithRelationInput[]
    cursor?: RideWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RideScalarFieldEnum | RideScalarFieldEnum[]
  }

  /**
   * MeetingPoint.ridesAsDestination
   */
  export type MeetingPoint$ridesAsDestinationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ride
     */
    select?: RideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ride
     */
    omit?: RideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideInclude<ExtArgs> | null
    where?: RideWhereInput
    orderBy?: RideOrderByWithRelationInput | RideOrderByWithRelationInput[]
    cursor?: RideWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RideScalarFieldEnum | RideScalarFieldEnum[]
  }

  /**
   * MeetingPoint without action
   */
  export type MeetingPointDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingPoint
     */
    select?: MeetingPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingPoint
     */
    omit?: MeetingPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingPointInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RideScalarFieldEnum: {
    id: 'id',
    driverId: 'driverId',
    carId: 'carId',
    createdAt: 'createdAt',
    departureTime: 'departureTime',
    fromGiu: 'fromGiu',
    girlsOnly: 'girlsOnly',
    price: 'price',
    seatsLeft: 'seatsLeft',
    active: 'active',
    originId: 'originId',
    destinationId: 'destinationId',
    estimatedTime: 'estimatedTime',
    distance: 'distance'
  };

  export type RideScalarFieldEnum = (typeof RideScalarFieldEnum)[keyof typeof RideScalarFieldEnum]


  export const CarScalarFieldEnum: {
    id: 'id',
    driverId: 'driverId',
    model: 'model',
    color: 'color',
    plateNumber: 'plateNumber',
    totalSeats: 'totalSeats'
  };

  export type CarScalarFieldEnum = (typeof CarScalarFieldEnum)[keyof typeof CarScalarFieldEnum]


  export const DriverScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phoneNumber: 'phoneNumber',
    licenseNumber: 'licenseNumber',
    gender: 'gender',
    approved: 'approved'
  };

  export type DriverScalarFieldEnum = (typeof DriverScalarFieldEnum)[keyof typeof DriverScalarFieldEnum]


  export const ZoneScalarFieldEnum: {
    id: 'id',
    name: 'name',
    baseFare: 'baseFare',
    costPerMin: 'costPerMin',
    costPerKm: 'costPerKm'
  };

  export type ZoneScalarFieldEnum = (typeof ZoneScalarFieldEnum)[keyof typeof ZoneScalarFieldEnum]


  export const RouteScalarFieldEnum: {
    id: 'id',
    name: 'name',
    zoneId: 'zoneId'
  };

  export type RouteScalarFieldEnum = (typeof RouteScalarFieldEnum)[keyof typeof RouteScalarFieldEnum]


  export const SubzoneScalarFieldEnum: {
    id: 'id',
    name: 'name',
    routeId: 'routeId',
    baseFare: 'baseFare',
    costPerMin: 'costPerMin',
    costPerKm: 'costPerKm'
  };

  export type SubzoneScalarFieldEnum = (typeof SubzoneScalarFieldEnum)[keyof typeof SubzoneScalarFieldEnum]


  export const MeetingPointScalarFieldEnum: {
    id: 'id',
    name: 'name',
    routeId: 'routeId',
    subzoneId: 'subzoneId',
    distanceToGiu: 'distanceToGiu',
    timeToGiu: 'timeToGiu',
    latitude: 'latitude',
    longitude: 'longitude'
  };

  export type MeetingPointScalarFieldEnum = (typeof MeetingPointScalarFieldEnum)[keyof typeof MeetingPointScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    
  /**
   * Deep Input Types
   */


  export type RideWhereInput = {
    AND?: RideWhereInput | RideWhereInput[]
    OR?: RideWhereInput[]
    NOT?: RideWhereInput | RideWhereInput[]
    id?: IntFilter<"Ride"> | number
    driverId?: IntFilter<"Ride"> | number
    carId?: IntFilter<"Ride"> | number
    createdAt?: DateTimeFilter<"Ride"> | Date | string
    departureTime?: DateTimeFilter<"Ride"> | Date | string
    fromGiu?: BoolFilter<"Ride"> | boolean
    girlsOnly?: BoolFilter<"Ride"> | boolean
    price?: FloatFilter<"Ride"> | number
    seatsLeft?: IntFilter<"Ride"> | number
    active?: BoolFilter<"Ride"> | boolean
    originId?: IntFilter<"Ride"> | number
    destinationId?: IntFilter<"Ride"> | number
    estimatedTime?: IntFilter<"Ride"> | number
    distance?: FloatFilter<"Ride"> | number
    car?: XOR<CarScalarRelationFilter, CarWhereInput>
    driver?: XOR<DriverScalarRelationFilter, DriverWhereInput>
    origin?: XOR<MeetingPointScalarRelationFilter, MeetingPointWhereInput>
    destination?: XOR<MeetingPointScalarRelationFilter, MeetingPointWhereInput>
  }

  export type RideOrderByWithRelationInput = {
    id?: SortOrder
    driverId?: SortOrder
    carId?: SortOrder
    createdAt?: SortOrder
    departureTime?: SortOrder
    fromGiu?: SortOrder
    girlsOnly?: SortOrder
    price?: SortOrder
    seatsLeft?: SortOrder
    active?: SortOrder
    originId?: SortOrder
    destinationId?: SortOrder
    estimatedTime?: SortOrder
    distance?: SortOrder
    car?: CarOrderByWithRelationInput
    driver?: DriverOrderByWithRelationInput
    origin?: MeetingPointOrderByWithRelationInput
    destination?: MeetingPointOrderByWithRelationInput
  }

  export type RideWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RideWhereInput | RideWhereInput[]
    OR?: RideWhereInput[]
    NOT?: RideWhereInput | RideWhereInput[]
    driverId?: IntFilter<"Ride"> | number
    carId?: IntFilter<"Ride"> | number
    createdAt?: DateTimeFilter<"Ride"> | Date | string
    departureTime?: DateTimeFilter<"Ride"> | Date | string
    fromGiu?: BoolFilter<"Ride"> | boolean
    girlsOnly?: BoolFilter<"Ride"> | boolean
    price?: FloatFilter<"Ride"> | number
    seatsLeft?: IntFilter<"Ride"> | number
    active?: BoolFilter<"Ride"> | boolean
    originId?: IntFilter<"Ride"> | number
    destinationId?: IntFilter<"Ride"> | number
    estimatedTime?: IntFilter<"Ride"> | number
    distance?: FloatFilter<"Ride"> | number
    car?: XOR<CarScalarRelationFilter, CarWhereInput>
    driver?: XOR<DriverScalarRelationFilter, DriverWhereInput>
    origin?: XOR<MeetingPointScalarRelationFilter, MeetingPointWhereInput>
    destination?: XOR<MeetingPointScalarRelationFilter, MeetingPointWhereInput>
  }, "id">

  export type RideOrderByWithAggregationInput = {
    id?: SortOrder
    driverId?: SortOrder
    carId?: SortOrder
    createdAt?: SortOrder
    departureTime?: SortOrder
    fromGiu?: SortOrder
    girlsOnly?: SortOrder
    price?: SortOrder
    seatsLeft?: SortOrder
    active?: SortOrder
    originId?: SortOrder
    destinationId?: SortOrder
    estimatedTime?: SortOrder
    distance?: SortOrder
    _count?: RideCountOrderByAggregateInput
    _avg?: RideAvgOrderByAggregateInput
    _max?: RideMaxOrderByAggregateInput
    _min?: RideMinOrderByAggregateInput
    _sum?: RideSumOrderByAggregateInput
  }

  export type RideScalarWhereWithAggregatesInput = {
    AND?: RideScalarWhereWithAggregatesInput | RideScalarWhereWithAggregatesInput[]
    OR?: RideScalarWhereWithAggregatesInput[]
    NOT?: RideScalarWhereWithAggregatesInput | RideScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ride"> | number
    driverId?: IntWithAggregatesFilter<"Ride"> | number
    carId?: IntWithAggregatesFilter<"Ride"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Ride"> | Date | string
    departureTime?: DateTimeWithAggregatesFilter<"Ride"> | Date | string
    fromGiu?: BoolWithAggregatesFilter<"Ride"> | boolean
    girlsOnly?: BoolWithAggregatesFilter<"Ride"> | boolean
    price?: FloatWithAggregatesFilter<"Ride"> | number
    seatsLeft?: IntWithAggregatesFilter<"Ride"> | number
    active?: BoolWithAggregatesFilter<"Ride"> | boolean
    originId?: IntWithAggregatesFilter<"Ride"> | number
    destinationId?: IntWithAggregatesFilter<"Ride"> | number
    estimatedTime?: IntWithAggregatesFilter<"Ride"> | number
    distance?: FloatWithAggregatesFilter<"Ride"> | number
  }

  export type CarWhereInput = {
    AND?: CarWhereInput | CarWhereInput[]
    OR?: CarWhereInput[]
    NOT?: CarWhereInput | CarWhereInput[]
    id?: IntFilter<"Car"> | number
    driverId?: IntFilter<"Car"> | number
    model?: StringFilter<"Car"> | string
    color?: StringFilter<"Car"> | string
    plateNumber?: StringFilter<"Car"> | string
    totalSeats?: IntFilter<"Car"> | number
    driver?: XOR<DriverScalarRelationFilter, DriverWhereInput>
    rides?: RideListRelationFilter
  }

  export type CarOrderByWithRelationInput = {
    id?: SortOrder
    driverId?: SortOrder
    model?: SortOrder
    color?: SortOrder
    plateNumber?: SortOrder
    totalSeats?: SortOrder
    driver?: DriverOrderByWithRelationInput
    rides?: RideOrderByRelationAggregateInput
  }

  export type CarWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    plateNumber?: string
    AND?: CarWhereInput | CarWhereInput[]
    OR?: CarWhereInput[]
    NOT?: CarWhereInput | CarWhereInput[]
    driverId?: IntFilter<"Car"> | number
    model?: StringFilter<"Car"> | string
    color?: StringFilter<"Car"> | string
    totalSeats?: IntFilter<"Car"> | number
    driver?: XOR<DriverScalarRelationFilter, DriverWhereInput>
    rides?: RideListRelationFilter
  }, "id" | "plateNumber">

  export type CarOrderByWithAggregationInput = {
    id?: SortOrder
    driverId?: SortOrder
    model?: SortOrder
    color?: SortOrder
    plateNumber?: SortOrder
    totalSeats?: SortOrder
    _count?: CarCountOrderByAggregateInput
    _avg?: CarAvgOrderByAggregateInput
    _max?: CarMaxOrderByAggregateInput
    _min?: CarMinOrderByAggregateInput
    _sum?: CarSumOrderByAggregateInput
  }

  export type CarScalarWhereWithAggregatesInput = {
    AND?: CarScalarWhereWithAggregatesInput | CarScalarWhereWithAggregatesInput[]
    OR?: CarScalarWhereWithAggregatesInput[]
    NOT?: CarScalarWhereWithAggregatesInput | CarScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Car"> | number
    driverId?: IntWithAggregatesFilter<"Car"> | number
    model?: StringWithAggregatesFilter<"Car"> | string
    color?: StringWithAggregatesFilter<"Car"> | string
    plateNumber?: StringWithAggregatesFilter<"Car"> | string
    totalSeats?: IntWithAggregatesFilter<"Car"> | number
  }

  export type DriverWhereInput = {
    AND?: DriverWhereInput | DriverWhereInput[]
    OR?: DriverWhereInput[]
    NOT?: DriverWhereInput | DriverWhereInput[]
    id?: IntFilter<"Driver"> | number
    name?: StringFilter<"Driver"> | string
    email?: StringFilter<"Driver"> | string
    phoneNumber?: StringFilter<"Driver"> | string
    licenseNumber?: StringFilter<"Driver"> | string
    gender?: StringFilter<"Driver"> | string
    approved?: BoolFilter<"Driver"> | boolean
    cars?: CarListRelationFilter
    rides?: RideListRelationFilter
  }

  export type DriverOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    licenseNumber?: SortOrder
    gender?: SortOrder
    approved?: SortOrder
    cars?: CarOrderByRelationAggregateInput
    rides?: RideOrderByRelationAggregateInput
  }

  export type DriverWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    licenseNumber?: string
    AND?: DriverWhereInput | DriverWhereInput[]
    OR?: DriverWhereInput[]
    NOT?: DriverWhereInput | DriverWhereInput[]
    name?: StringFilter<"Driver"> | string
    phoneNumber?: StringFilter<"Driver"> | string
    gender?: StringFilter<"Driver"> | string
    approved?: BoolFilter<"Driver"> | boolean
    cars?: CarListRelationFilter
    rides?: RideListRelationFilter
  }, "id" | "email" | "licenseNumber">

  export type DriverOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    licenseNumber?: SortOrder
    gender?: SortOrder
    approved?: SortOrder
    _count?: DriverCountOrderByAggregateInput
    _avg?: DriverAvgOrderByAggregateInput
    _max?: DriverMaxOrderByAggregateInput
    _min?: DriverMinOrderByAggregateInput
    _sum?: DriverSumOrderByAggregateInput
  }

  export type DriverScalarWhereWithAggregatesInput = {
    AND?: DriverScalarWhereWithAggregatesInput | DriverScalarWhereWithAggregatesInput[]
    OR?: DriverScalarWhereWithAggregatesInput[]
    NOT?: DriverScalarWhereWithAggregatesInput | DriverScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Driver"> | number
    name?: StringWithAggregatesFilter<"Driver"> | string
    email?: StringWithAggregatesFilter<"Driver"> | string
    phoneNumber?: StringWithAggregatesFilter<"Driver"> | string
    licenseNumber?: StringWithAggregatesFilter<"Driver"> | string
    gender?: StringWithAggregatesFilter<"Driver"> | string
    approved?: BoolWithAggregatesFilter<"Driver"> | boolean
  }

  export type ZoneWhereInput = {
    AND?: ZoneWhereInput | ZoneWhereInput[]
    OR?: ZoneWhereInput[]
    NOT?: ZoneWhereInput | ZoneWhereInput[]
    id?: IntFilter<"Zone"> | number
    name?: StringFilter<"Zone"> | string
    baseFare?: FloatFilter<"Zone"> | number
    costPerMin?: FloatFilter<"Zone"> | number
    costPerKm?: FloatFilter<"Zone"> | number
    routes?: RouteListRelationFilter
  }

  export type ZoneOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    baseFare?: SortOrder
    costPerMin?: SortOrder
    costPerKm?: SortOrder
    routes?: RouteOrderByRelationAggregateInput
  }

  export type ZoneWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ZoneWhereInput | ZoneWhereInput[]
    OR?: ZoneWhereInput[]
    NOT?: ZoneWhereInput | ZoneWhereInput[]
    baseFare?: FloatFilter<"Zone"> | number
    costPerMin?: FloatFilter<"Zone"> | number
    costPerKm?: FloatFilter<"Zone"> | number
    routes?: RouteListRelationFilter
  }, "id" | "name">

  export type ZoneOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    baseFare?: SortOrder
    costPerMin?: SortOrder
    costPerKm?: SortOrder
    _count?: ZoneCountOrderByAggregateInput
    _avg?: ZoneAvgOrderByAggregateInput
    _max?: ZoneMaxOrderByAggregateInput
    _min?: ZoneMinOrderByAggregateInput
    _sum?: ZoneSumOrderByAggregateInput
  }

  export type ZoneScalarWhereWithAggregatesInput = {
    AND?: ZoneScalarWhereWithAggregatesInput | ZoneScalarWhereWithAggregatesInput[]
    OR?: ZoneScalarWhereWithAggregatesInput[]
    NOT?: ZoneScalarWhereWithAggregatesInput | ZoneScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Zone"> | number
    name?: StringWithAggregatesFilter<"Zone"> | string
    baseFare?: FloatWithAggregatesFilter<"Zone"> | number
    costPerMin?: FloatWithAggregatesFilter<"Zone"> | number
    costPerKm?: FloatWithAggregatesFilter<"Zone"> | number
  }

  export type RouteWhereInput = {
    AND?: RouteWhereInput | RouteWhereInput[]
    OR?: RouteWhereInput[]
    NOT?: RouteWhereInput | RouteWhereInput[]
    id?: IntFilter<"Route"> | number
    name?: StringFilter<"Route"> | string
    zoneId?: IntFilter<"Route"> | number
    zone?: XOR<ZoneScalarRelationFilter, ZoneWhereInput>
    meetingPoints?: MeetingPointListRelationFilter
    Subzone?: SubzoneListRelationFilter
  }

  export type RouteOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    zoneId?: SortOrder
    zone?: ZoneOrderByWithRelationInput
    meetingPoints?: MeetingPointOrderByRelationAggregateInput
    Subzone?: SubzoneOrderByRelationAggregateInput
  }

  export type RouteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    zoneId_name?: RouteZoneIdNameCompoundUniqueInput
    AND?: RouteWhereInput | RouteWhereInput[]
    OR?: RouteWhereInput[]
    NOT?: RouteWhereInput | RouteWhereInput[]
    name?: StringFilter<"Route"> | string
    zoneId?: IntFilter<"Route"> | number
    zone?: XOR<ZoneScalarRelationFilter, ZoneWhereInput>
    meetingPoints?: MeetingPointListRelationFilter
    Subzone?: SubzoneListRelationFilter
  }, "id" | "zoneId_name">

  export type RouteOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    zoneId?: SortOrder
    _count?: RouteCountOrderByAggregateInput
    _avg?: RouteAvgOrderByAggregateInput
    _max?: RouteMaxOrderByAggregateInput
    _min?: RouteMinOrderByAggregateInput
    _sum?: RouteSumOrderByAggregateInput
  }

  export type RouteScalarWhereWithAggregatesInput = {
    AND?: RouteScalarWhereWithAggregatesInput | RouteScalarWhereWithAggregatesInput[]
    OR?: RouteScalarWhereWithAggregatesInput[]
    NOT?: RouteScalarWhereWithAggregatesInput | RouteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Route"> | number
    name?: StringWithAggregatesFilter<"Route"> | string
    zoneId?: IntWithAggregatesFilter<"Route"> | number
  }

  export type SubzoneWhereInput = {
    AND?: SubzoneWhereInput | SubzoneWhereInput[]
    OR?: SubzoneWhereInput[]
    NOT?: SubzoneWhereInput | SubzoneWhereInput[]
    id?: IntFilter<"Subzone"> | number
    name?: StringFilter<"Subzone"> | string
    routeId?: IntFilter<"Subzone"> | number
    baseFare?: FloatFilter<"Subzone"> | number
    costPerMin?: FloatFilter<"Subzone"> | number
    costPerKm?: FloatFilter<"Subzone"> | number
    route?: XOR<RouteScalarRelationFilter, RouteWhereInput>
    meetingPoints?: MeetingPointListRelationFilter
  }

  export type SubzoneOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    routeId?: SortOrder
    baseFare?: SortOrder
    costPerMin?: SortOrder
    costPerKm?: SortOrder
    route?: RouteOrderByWithRelationInput
    meetingPoints?: MeetingPointOrderByRelationAggregateInput
  }

  export type SubzoneWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: SubzoneWhereInput | SubzoneWhereInput[]
    OR?: SubzoneWhereInput[]
    NOT?: SubzoneWhereInput | SubzoneWhereInput[]
    routeId?: IntFilter<"Subzone"> | number
    baseFare?: FloatFilter<"Subzone"> | number
    costPerMin?: FloatFilter<"Subzone"> | number
    costPerKm?: FloatFilter<"Subzone"> | number
    route?: XOR<RouteScalarRelationFilter, RouteWhereInput>
    meetingPoints?: MeetingPointListRelationFilter
  }, "id" | "name">

  export type SubzoneOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    routeId?: SortOrder
    baseFare?: SortOrder
    costPerMin?: SortOrder
    costPerKm?: SortOrder
    _count?: SubzoneCountOrderByAggregateInput
    _avg?: SubzoneAvgOrderByAggregateInput
    _max?: SubzoneMaxOrderByAggregateInput
    _min?: SubzoneMinOrderByAggregateInput
    _sum?: SubzoneSumOrderByAggregateInput
  }

  export type SubzoneScalarWhereWithAggregatesInput = {
    AND?: SubzoneScalarWhereWithAggregatesInput | SubzoneScalarWhereWithAggregatesInput[]
    OR?: SubzoneScalarWhereWithAggregatesInput[]
    NOT?: SubzoneScalarWhereWithAggregatesInput | SubzoneScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subzone"> | number
    name?: StringWithAggregatesFilter<"Subzone"> | string
    routeId?: IntWithAggregatesFilter<"Subzone"> | number
    baseFare?: FloatWithAggregatesFilter<"Subzone"> | number
    costPerMin?: FloatWithAggregatesFilter<"Subzone"> | number
    costPerKm?: FloatWithAggregatesFilter<"Subzone"> | number
  }

  export type MeetingPointWhereInput = {
    AND?: MeetingPointWhereInput | MeetingPointWhereInput[]
    OR?: MeetingPointWhereInput[]
    NOT?: MeetingPointWhereInput | MeetingPointWhereInput[]
    id?: IntFilter<"MeetingPoint"> | number
    name?: StringFilter<"MeetingPoint"> | string
    routeId?: IntFilter<"MeetingPoint"> | number
    subzoneId?: IntNullableFilter<"MeetingPoint"> | number | null
    distanceToGiu?: FloatFilter<"MeetingPoint"> | number
    timeToGiu?: IntFilter<"MeetingPoint"> | number
    latitude?: FloatNullableFilter<"MeetingPoint"> | number | null
    longitude?: FloatNullableFilter<"MeetingPoint"> | number | null
    route?: XOR<RouteScalarRelationFilter, RouteWhereInput>
    subzone?: XOR<SubzoneNullableScalarRelationFilter, SubzoneWhereInput> | null
    ridesAsOrigin?: RideListRelationFilter
    ridesAsDestination?: RideListRelationFilter
  }

  export type MeetingPointOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    routeId?: SortOrder
    subzoneId?: SortOrderInput | SortOrder
    distanceToGiu?: SortOrder
    timeToGiu?: SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    route?: RouteOrderByWithRelationInput
    subzone?: SubzoneOrderByWithRelationInput
    ridesAsOrigin?: RideOrderByRelationAggregateInput
    ridesAsDestination?: RideOrderByRelationAggregateInput
  }

  export type MeetingPointWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    routeId_name?: MeetingPointRouteIdNameCompoundUniqueInput
    AND?: MeetingPointWhereInput | MeetingPointWhereInput[]
    OR?: MeetingPointWhereInput[]
    NOT?: MeetingPointWhereInput | MeetingPointWhereInput[]
    name?: StringFilter<"MeetingPoint"> | string
    routeId?: IntFilter<"MeetingPoint"> | number
    subzoneId?: IntNullableFilter<"MeetingPoint"> | number | null
    distanceToGiu?: FloatFilter<"MeetingPoint"> | number
    timeToGiu?: IntFilter<"MeetingPoint"> | number
    latitude?: FloatNullableFilter<"MeetingPoint"> | number | null
    longitude?: FloatNullableFilter<"MeetingPoint"> | number | null
    route?: XOR<RouteScalarRelationFilter, RouteWhereInput>
    subzone?: XOR<SubzoneNullableScalarRelationFilter, SubzoneWhereInput> | null
    ridesAsOrigin?: RideListRelationFilter
    ridesAsDestination?: RideListRelationFilter
  }, "id" | "routeId_name">

  export type MeetingPointOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    routeId?: SortOrder
    subzoneId?: SortOrderInput | SortOrder
    distanceToGiu?: SortOrder
    timeToGiu?: SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    _count?: MeetingPointCountOrderByAggregateInput
    _avg?: MeetingPointAvgOrderByAggregateInput
    _max?: MeetingPointMaxOrderByAggregateInput
    _min?: MeetingPointMinOrderByAggregateInput
    _sum?: MeetingPointSumOrderByAggregateInput
  }

  export type MeetingPointScalarWhereWithAggregatesInput = {
    AND?: MeetingPointScalarWhereWithAggregatesInput | MeetingPointScalarWhereWithAggregatesInput[]
    OR?: MeetingPointScalarWhereWithAggregatesInput[]
    NOT?: MeetingPointScalarWhereWithAggregatesInput | MeetingPointScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MeetingPoint"> | number
    name?: StringWithAggregatesFilter<"MeetingPoint"> | string
    routeId?: IntWithAggregatesFilter<"MeetingPoint"> | number
    subzoneId?: IntNullableWithAggregatesFilter<"MeetingPoint"> | number | null
    distanceToGiu?: FloatWithAggregatesFilter<"MeetingPoint"> | number
    timeToGiu?: IntWithAggregatesFilter<"MeetingPoint"> | number
    latitude?: FloatNullableWithAggregatesFilter<"MeetingPoint"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"MeetingPoint"> | number | null
  }

  export type RideCreateInput = {
    createdAt?: Date | string
    departureTime: Date | string
    fromGiu: boolean
    girlsOnly: boolean
    price: number
    seatsLeft: number
    active?: boolean
    estimatedTime: number
    distance: number
    car: CarCreateNestedOneWithoutRidesInput
    driver: DriverCreateNestedOneWithoutRidesInput
    origin: MeetingPointCreateNestedOneWithoutRidesAsOriginInput
    destination: MeetingPointCreateNestedOneWithoutRidesAsDestinationInput
  }

  export type RideUncheckedCreateInput = {
    id?: number
    driverId: number
    carId: number
    createdAt?: Date | string
    departureTime: Date | string
    fromGiu: boolean
    girlsOnly: boolean
    price: number
    seatsLeft: number
    active?: boolean
    originId: number
    destinationId: number
    estimatedTime: number
    distance: number
  }

  export type RideUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departureTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromGiu?: BoolFieldUpdateOperationsInput | boolean
    girlsOnly?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    seatsLeft?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    estimatedTime?: IntFieldUpdateOperationsInput | number
    distance?: FloatFieldUpdateOperationsInput | number
    car?: CarUpdateOneRequiredWithoutRidesNestedInput
    driver?: DriverUpdateOneRequiredWithoutRidesNestedInput
    origin?: MeetingPointUpdateOneRequiredWithoutRidesAsOriginNestedInput
    destination?: MeetingPointUpdateOneRequiredWithoutRidesAsDestinationNestedInput
  }

  export type RideUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    driverId?: IntFieldUpdateOperationsInput | number
    carId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departureTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromGiu?: BoolFieldUpdateOperationsInput | boolean
    girlsOnly?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    seatsLeft?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    originId?: IntFieldUpdateOperationsInput | number
    destinationId?: IntFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    distance?: FloatFieldUpdateOperationsInput | number
  }

  export type RideCreateManyInput = {
    id?: number
    driverId: number
    carId: number
    createdAt?: Date | string
    departureTime: Date | string
    fromGiu: boolean
    girlsOnly: boolean
    price: number
    seatsLeft: number
    active?: boolean
    originId: number
    destinationId: number
    estimatedTime: number
    distance: number
  }

  export type RideUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departureTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromGiu?: BoolFieldUpdateOperationsInput | boolean
    girlsOnly?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    seatsLeft?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    estimatedTime?: IntFieldUpdateOperationsInput | number
    distance?: FloatFieldUpdateOperationsInput | number
  }

  export type RideUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    driverId?: IntFieldUpdateOperationsInput | number
    carId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departureTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromGiu?: BoolFieldUpdateOperationsInput | boolean
    girlsOnly?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    seatsLeft?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    originId?: IntFieldUpdateOperationsInput | number
    destinationId?: IntFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    distance?: FloatFieldUpdateOperationsInput | number
  }

  export type CarCreateInput = {
    model: string
    color: string
    plateNumber: string
    totalSeats: number
    driver: DriverCreateNestedOneWithoutCarsInput
    rides?: RideCreateNestedManyWithoutCarInput
  }

  export type CarUncheckedCreateInput = {
    id?: number
    driverId: number
    model: string
    color: string
    plateNumber: string
    totalSeats: number
    rides?: RideUncheckedCreateNestedManyWithoutCarInput
  }

  export type CarUpdateInput = {
    model?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    totalSeats?: IntFieldUpdateOperationsInput | number
    driver?: DriverUpdateOneRequiredWithoutCarsNestedInput
    rides?: RideUpdateManyWithoutCarNestedInput
  }

  export type CarUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    driverId?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    totalSeats?: IntFieldUpdateOperationsInput | number
    rides?: RideUncheckedUpdateManyWithoutCarNestedInput
  }

  export type CarCreateManyInput = {
    id?: number
    driverId: number
    model: string
    color: string
    plateNumber: string
    totalSeats: number
  }

  export type CarUpdateManyMutationInput = {
    model?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    totalSeats?: IntFieldUpdateOperationsInput | number
  }

  export type CarUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    driverId?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    totalSeats?: IntFieldUpdateOperationsInput | number
  }

  export type DriverCreateInput = {
    name: string
    email: string
    phoneNumber: string
    licenseNumber: string
    gender: string
    approved?: boolean
    cars?: CarCreateNestedManyWithoutDriverInput
    rides?: RideCreateNestedManyWithoutDriverInput
  }

  export type DriverUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    phoneNumber: string
    licenseNumber: string
    gender: string
    approved?: boolean
    cars?: CarUncheckedCreateNestedManyWithoutDriverInput
    rides?: RideUncheckedCreateNestedManyWithoutDriverInput
  }

  export type DriverUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    licenseNumber?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    cars?: CarUpdateManyWithoutDriverNestedInput
    rides?: RideUpdateManyWithoutDriverNestedInput
  }

  export type DriverUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    licenseNumber?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    cars?: CarUncheckedUpdateManyWithoutDriverNestedInput
    rides?: RideUncheckedUpdateManyWithoutDriverNestedInput
  }

  export type DriverCreateManyInput = {
    id?: number
    name: string
    email: string
    phoneNumber: string
    licenseNumber: string
    gender: string
    approved?: boolean
  }

  export type DriverUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    licenseNumber?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DriverUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    licenseNumber?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ZoneCreateInput = {
    name: string
    baseFare: number
    costPerMin: number
    costPerKm: number
    routes?: RouteCreateNestedManyWithoutZoneInput
  }

  export type ZoneUncheckedCreateInput = {
    id?: number
    name: string
    baseFare: number
    costPerMin: number
    costPerKm: number
    routes?: RouteUncheckedCreateNestedManyWithoutZoneInput
  }

  export type ZoneUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    baseFare?: FloatFieldUpdateOperationsInput | number
    costPerMin?: FloatFieldUpdateOperationsInput | number
    costPerKm?: FloatFieldUpdateOperationsInput | number
    routes?: RouteUpdateManyWithoutZoneNestedInput
  }

  export type ZoneUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    baseFare?: FloatFieldUpdateOperationsInput | number
    costPerMin?: FloatFieldUpdateOperationsInput | number
    costPerKm?: FloatFieldUpdateOperationsInput | number
    routes?: RouteUncheckedUpdateManyWithoutZoneNestedInput
  }

  export type ZoneCreateManyInput = {
    id?: number
    name: string
    baseFare: number
    costPerMin: number
    costPerKm: number
  }

  export type ZoneUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    baseFare?: FloatFieldUpdateOperationsInput | number
    costPerMin?: FloatFieldUpdateOperationsInput | number
    costPerKm?: FloatFieldUpdateOperationsInput | number
  }

  export type ZoneUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    baseFare?: FloatFieldUpdateOperationsInput | number
    costPerMin?: FloatFieldUpdateOperationsInput | number
    costPerKm?: FloatFieldUpdateOperationsInput | number
  }

  export type RouteCreateInput = {
    name: string
    zone: ZoneCreateNestedOneWithoutRoutesInput
    meetingPoints?: MeetingPointCreateNestedManyWithoutRouteInput
    Subzone?: SubzoneCreateNestedManyWithoutRouteInput
  }

  export type RouteUncheckedCreateInput = {
    id?: number
    name: string
    zoneId: number
    meetingPoints?: MeetingPointUncheckedCreateNestedManyWithoutRouteInput
    Subzone?: SubzoneUncheckedCreateNestedManyWithoutRouteInput
  }

  export type RouteUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    zone?: ZoneUpdateOneRequiredWithoutRoutesNestedInput
    meetingPoints?: MeetingPointUpdateManyWithoutRouteNestedInput
    Subzone?: SubzoneUpdateManyWithoutRouteNestedInput
  }

  export type RouteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    zoneId?: IntFieldUpdateOperationsInput | number
    meetingPoints?: MeetingPointUncheckedUpdateManyWithoutRouteNestedInput
    Subzone?: SubzoneUncheckedUpdateManyWithoutRouteNestedInput
  }

  export type RouteCreateManyInput = {
    id?: number
    name: string
    zoneId: number
  }

  export type RouteUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RouteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    zoneId?: IntFieldUpdateOperationsInput | number
  }

  export type SubzoneCreateInput = {
    name: string
    baseFare: number
    costPerMin: number
    costPerKm: number
    route: RouteCreateNestedOneWithoutSubzoneInput
    meetingPoints?: MeetingPointCreateNestedManyWithoutSubzoneInput
  }

  export type SubzoneUncheckedCreateInput = {
    id?: number
    name: string
    routeId: number
    baseFare: number
    costPerMin: number
    costPerKm: number
    meetingPoints?: MeetingPointUncheckedCreateNestedManyWithoutSubzoneInput
  }

  export type SubzoneUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    baseFare?: FloatFieldUpdateOperationsInput | number
    costPerMin?: FloatFieldUpdateOperationsInput | number
    costPerKm?: FloatFieldUpdateOperationsInput | number
    route?: RouteUpdateOneRequiredWithoutSubzoneNestedInput
    meetingPoints?: MeetingPointUpdateManyWithoutSubzoneNestedInput
  }

  export type SubzoneUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    routeId?: IntFieldUpdateOperationsInput | number
    baseFare?: FloatFieldUpdateOperationsInput | number
    costPerMin?: FloatFieldUpdateOperationsInput | number
    costPerKm?: FloatFieldUpdateOperationsInput | number
    meetingPoints?: MeetingPointUncheckedUpdateManyWithoutSubzoneNestedInput
  }

  export type SubzoneCreateManyInput = {
    id?: number
    name: string
    routeId: number
    baseFare: number
    costPerMin: number
    costPerKm: number
  }

  export type SubzoneUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    baseFare?: FloatFieldUpdateOperationsInput | number
    costPerMin?: FloatFieldUpdateOperationsInput | number
    costPerKm?: FloatFieldUpdateOperationsInput | number
  }

  export type SubzoneUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    routeId?: IntFieldUpdateOperationsInput | number
    baseFare?: FloatFieldUpdateOperationsInput | number
    costPerMin?: FloatFieldUpdateOperationsInput | number
    costPerKm?: FloatFieldUpdateOperationsInput | number
  }

  export type MeetingPointCreateInput = {
    name: string
    distanceToGiu: number
    timeToGiu: number
    latitude?: number | null
    longitude?: number | null
    route: RouteCreateNestedOneWithoutMeetingPointsInput
    subzone?: SubzoneCreateNestedOneWithoutMeetingPointsInput
    ridesAsOrigin?: RideCreateNestedManyWithoutOriginInput
    ridesAsDestination?: RideCreateNestedManyWithoutDestinationInput
  }

  export type MeetingPointUncheckedCreateInput = {
    id?: number
    name: string
    routeId: number
    subzoneId?: number | null
    distanceToGiu: number
    timeToGiu: number
    latitude?: number | null
    longitude?: number | null
    ridesAsOrigin?: RideUncheckedCreateNestedManyWithoutOriginInput
    ridesAsDestination?: RideUncheckedCreateNestedManyWithoutDestinationInput
  }

  export type MeetingPointUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    distanceToGiu?: FloatFieldUpdateOperationsInput | number
    timeToGiu?: IntFieldUpdateOperationsInput | number
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    route?: RouteUpdateOneRequiredWithoutMeetingPointsNestedInput
    subzone?: SubzoneUpdateOneWithoutMeetingPointsNestedInput
    ridesAsOrigin?: RideUpdateManyWithoutOriginNestedInput
    ridesAsDestination?: RideUpdateManyWithoutDestinationNestedInput
  }

  export type MeetingPointUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    routeId?: IntFieldUpdateOperationsInput | number
    subzoneId?: NullableIntFieldUpdateOperationsInput | number | null
    distanceToGiu?: FloatFieldUpdateOperationsInput | number
    timeToGiu?: IntFieldUpdateOperationsInput | number
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    ridesAsOrigin?: RideUncheckedUpdateManyWithoutOriginNestedInput
    ridesAsDestination?: RideUncheckedUpdateManyWithoutDestinationNestedInput
  }

  export type MeetingPointCreateManyInput = {
    id?: number
    name: string
    routeId: number
    subzoneId?: number | null
    distanceToGiu: number
    timeToGiu: number
    latitude?: number | null
    longitude?: number | null
  }

  export type MeetingPointUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    distanceToGiu?: FloatFieldUpdateOperationsInput | number
    timeToGiu?: IntFieldUpdateOperationsInput | number
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type MeetingPointUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    routeId?: IntFieldUpdateOperationsInput | number
    subzoneId?: NullableIntFieldUpdateOperationsInput | number | null
    distanceToGiu?: FloatFieldUpdateOperationsInput | number
    timeToGiu?: IntFieldUpdateOperationsInput | number
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CarScalarRelationFilter = {
    is?: CarWhereInput
    isNot?: CarWhereInput
  }

  export type DriverScalarRelationFilter = {
    is?: DriverWhereInput
    isNot?: DriverWhereInput
  }

  export type MeetingPointScalarRelationFilter = {
    is?: MeetingPointWhereInput
    isNot?: MeetingPointWhereInput
  }

  export type RideCountOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
    carId?: SortOrder
    createdAt?: SortOrder
    departureTime?: SortOrder
    fromGiu?: SortOrder
    girlsOnly?: SortOrder
    price?: SortOrder
    seatsLeft?: SortOrder
    active?: SortOrder
    originId?: SortOrder
    destinationId?: SortOrder
    estimatedTime?: SortOrder
    distance?: SortOrder
  }

  export type RideAvgOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
    carId?: SortOrder
    price?: SortOrder
    seatsLeft?: SortOrder
    originId?: SortOrder
    destinationId?: SortOrder
    estimatedTime?: SortOrder
    distance?: SortOrder
  }

  export type RideMaxOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
    carId?: SortOrder
    createdAt?: SortOrder
    departureTime?: SortOrder
    fromGiu?: SortOrder
    girlsOnly?: SortOrder
    price?: SortOrder
    seatsLeft?: SortOrder
    active?: SortOrder
    originId?: SortOrder
    destinationId?: SortOrder
    estimatedTime?: SortOrder
    distance?: SortOrder
  }

  export type RideMinOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
    carId?: SortOrder
    createdAt?: SortOrder
    departureTime?: SortOrder
    fromGiu?: SortOrder
    girlsOnly?: SortOrder
    price?: SortOrder
    seatsLeft?: SortOrder
    active?: SortOrder
    originId?: SortOrder
    destinationId?: SortOrder
    estimatedTime?: SortOrder
    distance?: SortOrder
  }

  export type RideSumOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
    carId?: SortOrder
    price?: SortOrder
    seatsLeft?: SortOrder
    originId?: SortOrder
    destinationId?: SortOrder
    estimatedTime?: SortOrder
    distance?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type RideListRelationFilter = {
    every?: RideWhereInput
    some?: RideWhereInput
    none?: RideWhereInput
  }

  export type RideOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CarCountOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
    model?: SortOrder
    color?: SortOrder
    plateNumber?: SortOrder
    totalSeats?: SortOrder
  }

  export type CarAvgOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
    totalSeats?: SortOrder
  }

  export type CarMaxOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
    model?: SortOrder
    color?: SortOrder
    plateNumber?: SortOrder
    totalSeats?: SortOrder
  }

  export type CarMinOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
    model?: SortOrder
    color?: SortOrder
    plateNumber?: SortOrder
    totalSeats?: SortOrder
  }

  export type CarSumOrderByAggregateInput = {
    id?: SortOrder
    driverId?: SortOrder
    totalSeats?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type CarListRelationFilter = {
    every?: CarWhereInput
    some?: CarWhereInput
    none?: CarWhereInput
  }

  export type CarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DriverCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    licenseNumber?: SortOrder
    gender?: SortOrder
    approved?: SortOrder
  }

  export type DriverAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DriverMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    licenseNumber?: SortOrder
    gender?: SortOrder
    approved?: SortOrder
  }

  export type DriverMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    licenseNumber?: SortOrder
    gender?: SortOrder
    approved?: SortOrder
  }

  export type DriverSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RouteListRelationFilter = {
    every?: RouteWhereInput
    some?: RouteWhereInput
    none?: RouteWhereInput
  }

  export type RouteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ZoneCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    baseFare?: SortOrder
    costPerMin?: SortOrder
    costPerKm?: SortOrder
  }

  export type ZoneAvgOrderByAggregateInput = {
    id?: SortOrder
    baseFare?: SortOrder
    costPerMin?: SortOrder
    costPerKm?: SortOrder
  }

  export type ZoneMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    baseFare?: SortOrder
    costPerMin?: SortOrder
    costPerKm?: SortOrder
  }

  export type ZoneMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    baseFare?: SortOrder
    costPerMin?: SortOrder
    costPerKm?: SortOrder
  }

  export type ZoneSumOrderByAggregateInput = {
    id?: SortOrder
    baseFare?: SortOrder
    costPerMin?: SortOrder
    costPerKm?: SortOrder
  }

  export type ZoneScalarRelationFilter = {
    is?: ZoneWhereInput
    isNot?: ZoneWhereInput
  }

  export type MeetingPointListRelationFilter = {
    every?: MeetingPointWhereInput
    some?: MeetingPointWhereInput
    none?: MeetingPointWhereInput
  }

  export type SubzoneListRelationFilter = {
    every?: SubzoneWhereInput
    some?: SubzoneWhereInput
    none?: SubzoneWhereInput
  }

  export type MeetingPointOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubzoneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RouteZoneIdNameCompoundUniqueInput = {
    zoneId: number
    name: string
  }

  export type RouteCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    zoneId?: SortOrder
  }

  export type RouteAvgOrderByAggregateInput = {
    id?: SortOrder
    zoneId?: SortOrder
  }

  export type RouteMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    zoneId?: SortOrder
  }

  export type RouteMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    zoneId?: SortOrder
  }

  export type RouteSumOrderByAggregateInput = {
    id?: SortOrder
    zoneId?: SortOrder
  }

  export type RouteScalarRelationFilter = {
    is?: RouteWhereInput
    isNot?: RouteWhereInput
  }

  export type SubzoneCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    routeId?: SortOrder
    baseFare?: SortOrder
    costPerMin?: SortOrder
    costPerKm?: SortOrder
  }

  export type SubzoneAvgOrderByAggregateInput = {
    id?: SortOrder
    routeId?: SortOrder
    baseFare?: SortOrder
    costPerMin?: SortOrder
    costPerKm?: SortOrder
  }

  export type SubzoneMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    routeId?: SortOrder
    baseFare?: SortOrder
    costPerMin?: SortOrder
    costPerKm?: SortOrder
  }

  export type SubzoneMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    routeId?: SortOrder
    baseFare?: SortOrder
    costPerMin?: SortOrder
    costPerKm?: SortOrder
  }

  export type SubzoneSumOrderByAggregateInput = {
    id?: SortOrder
    routeId?: SortOrder
    baseFare?: SortOrder
    costPerMin?: SortOrder
    costPerKm?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type SubzoneNullableScalarRelationFilter = {
    is?: SubzoneWhereInput | null
    isNot?: SubzoneWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MeetingPointRouteIdNameCompoundUniqueInput = {
    routeId: number
    name: string
  }

  export type MeetingPointCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    routeId?: SortOrder
    subzoneId?: SortOrder
    distanceToGiu?: SortOrder
    timeToGiu?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type MeetingPointAvgOrderByAggregateInput = {
    id?: SortOrder
    routeId?: SortOrder
    subzoneId?: SortOrder
    distanceToGiu?: SortOrder
    timeToGiu?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type MeetingPointMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    routeId?: SortOrder
    subzoneId?: SortOrder
    distanceToGiu?: SortOrder
    timeToGiu?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type MeetingPointMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    routeId?: SortOrder
    subzoneId?: SortOrder
    distanceToGiu?: SortOrder
    timeToGiu?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type MeetingPointSumOrderByAggregateInput = {
    id?: SortOrder
    routeId?: SortOrder
    subzoneId?: SortOrder
    distanceToGiu?: SortOrder
    timeToGiu?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type CarCreateNestedOneWithoutRidesInput = {
    create?: XOR<CarCreateWithoutRidesInput, CarUncheckedCreateWithoutRidesInput>
    connectOrCreate?: CarCreateOrConnectWithoutRidesInput
    connect?: CarWhereUniqueInput
  }

  export type DriverCreateNestedOneWithoutRidesInput = {
    create?: XOR<DriverCreateWithoutRidesInput, DriverUncheckedCreateWithoutRidesInput>
    connectOrCreate?: DriverCreateOrConnectWithoutRidesInput
    connect?: DriverWhereUniqueInput
  }

  export type MeetingPointCreateNestedOneWithoutRidesAsOriginInput = {
    create?: XOR<MeetingPointCreateWithoutRidesAsOriginInput, MeetingPointUncheckedCreateWithoutRidesAsOriginInput>
    connectOrCreate?: MeetingPointCreateOrConnectWithoutRidesAsOriginInput
    connect?: MeetingPointWhereUniqueInput
  }

  export type MeetingPointCreateNestedOneWithoutRidesAsDestinationInput = {
    create?: XOR<MeetingPointCreateWithoutRidesAsDestinationInput, MeetingPointUncheckedCreateWithoutRidesAsDestinationInput>
    connectOrCreate?: MeetingPointCreateOrConnectWithoutRidesAsDestinationInput
    connect?: MeetingPointWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CarUpdateOneRequiredWithoutRidesNestedInput = {
    create?: XOR<CarCreateWithoutRidesInput, CarUncheckedCreateWithoutRidesInput>
    connectOrCreate?: CarCreateOrConnectWithoutRidesInput
    upsert?: CarUpsertWithoutRidesInput
    connect?: CarWhereUniqueInput
    update?: XOR<XOR<CarUpdateToOneWithWhereWithoutRidesInput, CarUpdateWithoutRidesInput>, CarUncheckedUpdateWithoutRidesInput>
  }

  export type DriverUpdateOneRequiredWithoutRidesNestedInput = {
    create?: XOR<DriverCreateWithoutRidesInput, DriverUncheckedCreateWithoutRidesInput>
    connectOrCreate?: DriverCreateOrConnectWithoutRidesInput
    upsert?: DriverUpsertWithoutRidesInput
    connect?: DriverWhereUniqueInput
    update?: XOR<XOR<DriverUpdateToOneWithWhereWithoutRidesInput, DriverUpdateWithoutRidesInput>, DriverUncheckedUpdateWithoutRidesInput>
  }

  export type MeetingPointUpdateOneRequiredWithoutRidesAsOriginNestedInput = {
    create?: XOR<MeetingPointCreateWithoutRidesAsOriginInput, MeetingPointUncheckedCreateWithoutRidesAsOriginInput>
    connectOrCreate?: MeetingPointCreateOrConnectWithoutRidesAsOriginInput
    upsert?: MeetingPointUpsertWithoutRidesAsOriginInput
    connect?: MeetingPointWhereUniqueInput
    update?: XOR<XOR<MeetingPointUpdateToOneWithWhereWithoutRidesAsOriginInput, MeetingPointUpdateWithoutRidesAsOriginInput>, MeetingPointUncheckedUpdateWithoutRidesAsOriginInput>
  }

  export type MeetingPointUpdateOneRequiredWithoutRidesAsDestinationNestedInput = {
    create?: XOR<MeetingPointCreateWithoutRidesAsDestinationInput, MeetingPointUncheckedCreateWithoutRidesAsDestinationInput>
    connectOrCreate?: MeetingPointCreateOrConnectWithoutRidesAsDestinationInput
    upsert?: MeetingPointUpsertWithoutRidesAsDestinationInput
    connect?: MeetingPointWhereUniqueInput
    update?: XOR<XOR<MeetingPointUpdateToOneWithWhereWithoutRidesAsDestinationInput, MeetingPointUpdateWithoutRidesAsDestinationInput>, MeetingPointUncheckedUpdateWithoutRidesAsDestinationInput>
  }

  export type DriverCreateNestedOneWithoutCarsInput = {
    create?: XOR<DriverCreateWithoutCarsInput, DriverUncheckedCreateWithoutCarsInput>
    connectOrCreate?: DriverCreateOrConnectWithoutCarsInput
    connect?: DriverWhereUniqueInput
  }

  export type RideCreateNestedManyWithoutCarInput = {
    create?: XOR<RideCreateWithoutCarInput, RideUncheckedCreateWithoutCarInput> | RideCreateWithoutCarInput[] | RideUncheckedCreateWithoutCarInput[]
    connectOrCreate?: RideCreateOrConnectWithoutCarInput | RideCreateOrConnectWithoutCarInput[]
    createMany?: RideCreateManyCarInputEnvelope
    connect?: RideWhereUniqueInput | RideWhereUniqueInput[]
  }

  export type RideUncheckedCreateNestedManyWithoutCarInput = {
    create?: XOR<RideCreateWithoutCarInput, RideUncheckedCreateWithoutCarInput> | RideCreateWithoutCarInput[] | RideUncheckedCreateWithoutCarInput[]
    connectOrCreate?: RideCreateOrConnectWithoutCarInput | RideCreateOrConnectWithoutCarInput[]
    createMany?: RideCreateManyCarInputEnvelope
    connect?: RideWhereUniqueInput | RideWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DriverUpdateOneRequiredWithoutCarsNestedInput = {
    create?: XOR<DriverCreateWithoutCarsInput, DriverUncheckedCreateWithoutCarsInput>
    connectOrCreate?: DriverCreateOrConnectWithoutCarsInput
    upsert?: DriverUpsertWithoutCarsInput
    connect?: DriverWhereUniqueInput
    update?: XOR<XOR<DriverUpdateToOneWithWhereWithoutCarsInput, DriverUpdateWithoutCarsInput>, DriverUncheckedUpdateWithoutCarsInput>
  }

  export type RideUpdateManyWithoutCarNestedInput = {
    create?: XOR<RideCreateWithoutCarInput, RideUncheckedCreateWithoutCarInput> | RideCreateWithoutCarInput[] | RideUncheckedCreateWithoutCarInput[]
    connectOrCreate?: RideCreateOrConnectWithoutCarInput | RideCreateOrConnectWithoutCarInput[]
    upsert?: RideUpsertWithWhereUniqueWithoutCarInput | RideUpsertWithWhereUniqueWithoutCarInput[]
    createMany?: RideCreateManyCarInputEnvelope
    set?: RideWhereUniqueInput | RideWhereUniqueInput[]
    disconnect?: RideWhereUniqueInput | RideWhereUniqueInput[]
    delete?: RideWhereUniqueInput | RideWhereUniqueInput[]
    connect?: RideWhereUniqueInput | RideWhereUniqueInput[]
    update?: RideUpdateWithWhereUniqueWithoutCarInput | RideUpdateWithWhereUniqueWithoutCarInput[]
    updateMany?: RideUpdateManyWithWhereWithoutCarInput | RideUpdateManyWithWhereWithoutCarInput[]
    deleteMany?: RideScalarWhereInput | RideScalarWhereInput[]
  }

  export type RideUncheckedUpdateManyWithoutCarNestedInput = {
    create?: XOR<RideCreateWithoutCarInput, RideUncheckedCreateWithoutCarInput> | RideCreateWithoutCarInput[] | RideUncheckedCreateWithoutCarInput[]
    connectOrCreate?: RideCreateOrConnectWithoutCarInput | RideCreateOrConnectWithoutCarInput[]
    upsert?: RideUpsertWithWhereUniqueWithoutCarInput | RideUpsertWithWhereUniqueWithoutCarInput[]
    createMany?: RideCreateManyCarInputEnvelope
    set?: RideWhereUniqueInput | RideWhereUniqueInput[]
    disconnect?: RideWhereUniqueInput | RideWhereUniqueInput[]
    delete?: RideWhereUniqueInput | RideWhereUniqueInput[]
    connect?: RideWhereUniqueInput | RideWhereUniqueInput[]
    update?: RideUpdateWithWhereUniqueWithoutCarInput | RideUpdateWithWhereUniqueWithoutCarInput[]
    updateMany?: RideUpdateManyWithWhereWithoutCarInput | RideUpdateManyWithWhereWithoutCarInput[]
    deleteMany?: RideScalarWhereInput | RideScalarWhereInput[]
  }

  export type CarCreateNestedManyWithoutDriverInput = {
    create?: XOR<CarCreateWithoutDriverInput, CarUncheckedCreateWithoutDriverInput> | CarCreateWithoutDriverInput[] | CarUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: CarCreateOrConnectWithoutDriverInput | CarCreateOrConnectWithoutDriverInput[]
    createMany?: CarCreateManyDriverInputEnvelope
    connect?: CarWhereUniqueInput | CarWhereUniqueInput[]
  }

  export type RideCreateNestedManyWithoutDriverInput = {
    create?: XOR<RideCreateWithoutDriverInput, RideUncheckedCreateWithoutDriverInput> | RideCreateWithoutDriverInput[] | RideUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: RideCreateOrConnectWithoutDriverInput | RideCreateOrConnectWithoutDriverInput[]
    createMany?: RideCreateManyDriverInputEnvelope
    connect?: RideWhereUniqueInput | RideWhereUniqueInput[]
  }

  export type CarUncheckedCreateNestedManyWithoutDriverInput = {
    create?: XOR<CarCreateWithoutDriverInput, CarUncheckedCreateWithoutDriverInput> | CarCreateWithoutDriverInput[] | CarUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: CarCreateOrConnectWithoutDriverInput | CarCreateOrConnectWithoutDriverInput[]
    createMany?: CarCreateManyDriverInputEnvelope
    connect?: CarWhereUniqueInput | CarWhereUniqueInput[]
  }

  export type RideUncheckedCreateNestedManyWithoutDriverInput = {
    create?: XOR<RideCreateWithoutDriverInput, RideUncheckedCreateWithoutDriverInput> | RideCreateWithoutDriverInput[] | RideUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: RideCreateOrConnectWithoutDriverInput | RideCreateOrConnectWithoutDriverInput[]
    createMany?: RideCreateManyDriverInputEnvelope
    connect?: RideWhereUniqueInput | RideWhereUniqueInput[]
  }

  export type CarUpdateManyWithoutDriverNestedInput = {
    create?: XOR<CarCreateWithoutDriverInput, CarUncheckedCreateWithoutDriverInput> | CarCreateWithoutDriverInput[] | CarUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: CarCreateOrConnectWithoutDriverInput | CarCreateOrConnectWithoutDriverInput[]
    upsert?: CarUpsertWithWhereUniqueWithoutDriverInput | CarUpsertWithWhereUniqueWithoutDriverInput[]
    createMany?: CarCreateManyDriverInputEnvelope
    set?: CarWhereUniqueInput | CarWhereUniqueInput[]
    disconnect?: CarWhereUniqueInput | CarWhereUniqueInput[]
    delete?: CarWhereUniqueInput | CarWhereUniqueInput[]
    connect?: CarWhereUniqueInput | CarWhereUniqueInput[]
    update?: CarUpdateWithWhereUniqueWithoutDriverInput | CarUpdateWithWhereUniqueWithoutDriverInput[]
    updateMany?: CarUpdateManyWithWhereWithoutDriverInput | CarUpdateManyWithWhereWithoutDriverInput[]
    deleteMany?: CarScalarWhereInput | CarScalarWhereInput[]
  }

  export type RideUpdateManyWithoutDriverNestedInput = {
    create?: XOR<RideCreateWithoutDriverInput, RideUncheckedCreateWithoutDriverInput> | RideCreateWithoutDriverInput[] | RideUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: RideCreateOrConnectWithoutDriverInput | RideCreateOrConnectWithoutDriverInput[]
    upsert?: RideUpsertWithWhereUniqueWithoutDriverInput | RideUpsertWithWhereUniqueWithoutDriverInput[]
    createMany?: RideCreateManyDriverInputEnvelope
    set?: RideWhereUniqueInput | RideWhereUniqueInput[]
    disconnect?: RideWhereUniqueInput | RideWhereUniqueInput[]
    delete?: RideWhereUniqueInput | RideWhereUniqueInput[]
    connect?: RideWhereUniqueInput | RideWhereUniqueInput[]
    update?: RideUpdateWithWhereUniqueWithoutDriverInput | RideUpdateWithWhereUniqueWithoutDriverInput[]
    updateMany?: RideUpdateManyWithWhereWithoutDriverInput | RideUpdateManyWithWhereWithoutDriverInput[]
    deleteMany?: RideScalarWhereInput | RideScalarWhereInput[]
  }

  export type CarUncheckedUpdateManyWithoutDriverNestedInput = {
    create?: XOR<CarCreateWithoutDriverInput, CarUncheckedCreateWithoutDriverInput> | CarCreateWithoutDriverInput[] | CarUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: CarCreateOrConnectWithoutDriverInput | CarCreateOrConnectWithoutDriverInput[]
    upsert?: CarUpsertWithWhereUniqueWithoutDriverInput | CarUpsertWithWhereUniqueWithoutDriverInput[]
    createMany?: CarCreateManyDriverInputEnvelope
    set?: CarWhereUniqueInput | CarWhereUniqueInput[]
    disconnect?: CarWhereUniqueInput | CarWhereUniqueInput[]
    delete?: CarWhereUniqueInput | CarWhereUniqueInput[]
    connect?: CarWhereUniqueInput | CarWhereUniqueInput[]
    update?: CarUpdateWithWhereUniqueWithoutDriverInput | CarUpdateWithWhereUniqueWithoutDriverInput[]
    updateMany?: CarUpdateManyWithWhereWithoutDriverInput | CarUpdateManyWithWhereWithoutDriverInput[]
    deleteMany?: CarScalarWhereInput | CarScalarWhereInput[]
  }

  export type RideUncheckedUpdateManyWithoutDriverNestedInput = {
    create?: XOR<RideCreateWithoutDriverInput, RideUncheckedCreateWithoutDriverInput> | RideCreateWithoutDriverInput[] | RideUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: RideCreateOrConnectWithoutDriverInput | RideCreateOrConnectWithoutDriverInput[]
    upsert?: RideUpsertWithWhereUniqueWithoutDriverInput | RideUpsertWithWhereUniqueWithoutDriverInput[]
    createMany?: RideCreateManyDriverInputEnvelope
    set?: RideWhereUniqueInput | RideWhereUniqueInput[]
    disconnect?: RideWhereUniqueInput | RideWhereUniqueInput[]
    delete?: RideWhereUniqueInput | RideWhereUniqueInput[]
    connect?: RideWhereUniqueInput | RideWhereUniqueInput[]
    update?: RideUpdateWithWhereUniqueWithoutDriverInput | RideUpdateWithWhereUniqueWithoutDriverInput[]
    updateMany?: RideUpdateManyWithWhereWithoutDriverInput | RideUpdateManyWithWhereWithoutDriverInput[]
    deleteMany?: RideScalarWhereInput | RideScalarWhereInput[]
  }

  export type RouteCreateNestedManyWithoutZoneInput = {
    create?: XOR<RouteCreateWithoutZoneInput, RouteUncheckedCreateWithoutZoneInput> | RouteCreateWithoutZoneInput[] | RouteUncheckedCreateWithoutZoneInput[]
    connectOrCreate?: RouteCreateOrConnectWithoutZoneInput | RouteCreateOrConnectWithoutZoneInput[]
    createMany?: RouteCreateManyZoneInputEnvelope
    connect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
  }

  export type RouteUncheckedCreateNestedManyWithoutZoneInput = {
    create?: XOR<RouteCreateWithoutZoneInput, RouteUncheckedCreateWithoutZoneInput> | RouteCreateWithoutZoneInput[] | RouteUncheckedCreateWithoutZoneInput[]
    connectOrCreate?: RouteCreateOrConnectWithoutZoneInput | RouteCreateOrConnectWithoutZoneInput[]
    createMany?: RouteCreateManyZoneInputEnvelope
    connect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
  }

  export type RouteUpdateManyWithoutZoneNestedInput = {
    create?: XOR<RouteCreateWithoutZoneInput, RouteUncheckedCreateWithoutZoneInput> | RouteCreateWithoutZoneInput[] | RouteUncheckedCreateWithoutZoneInput[]
    connectOrCreate?: RouteCreateOrConnectWithoutZoneInput | RouteCreateOrConnectWithoutZoneInput[]
    upsert?: RouteUpsertWithWhereUniqueWithoutZoneInput | RouteUpsertWithWhereUniqueWithoutZoneInput[]
    createMany?: RouteCreateManyZoneInputEnvelope
    set?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    disconnect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    delete?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    connect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    update?: RouteUpdateWithWhereUniqueWithoutZoneInput | RouteUpdateWithWhereUniqueWithoutZoneInput[]
    updateMany?: RouteUpdateManyWithWhereWithoutZoneInput | RouteUpdateManyWithWhereWithoutZoneInput[]
    deleteMany?: RouteScalarWhereInput | RouteScalarWhereInput[]
  }

  export type RouteUncheckedUpdateManyWithoutZoneNestedInput = {
    create?: XOR<RouteCreateWithoutZoneInput, RouteUncheckedCreateWithoutZoneInput> | RouteCreateWithoutZoneInput[] | RouteUncheckedCreateWithoutZoneInput[]
    connectOrCreate?: RouteCreateOrConnectWithoutZoneInput | RouteCreateOrConnectWithoutZoneInput[]
    upsert?: RouteUpsertWithWhereUniqueWithoutZoneInput | RouteUpsertWithWhereUniqueWithoutZoneInput[]
    createMany?: RouteCreateManyZoneInputEnvelope
    set?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    disconnect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    delete?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    connect?: RouteWhereUniqueInput | RouteWhereUniqueInput[]
    update?: RouteUpdateWithWhereUniqueWithoutZoneInput | RouteUpdateWithWhereUniqueWithoutZoneInput[]
    updateMany?: RouteUpdateManyWithWhereWithoutZoneInput | RouteUpdateManyWithWhereWithoutZoneInput[]
    deleteMany?: RouteScalarWhereInput | RouteScalarWhereInput[]
  }

  export type ZoneCreateNestedOneWithoutRoutesInput = {
    create?: XOR<ZoneCreateWithoutRoutesInput, ZoneUncheckedCreateWithoutRoutesInput>
    connectOrCreate?: ZoneCreateOrConnectWithoutRoutesInput
    connect?: ZoneWhereUniqueInput
  }

  export type MeetingPointCreateNestedManyWithoutRouteInput = {
    create?: XOR<MeetingPointCreateWithoutRouteInput, MeetingPointUncheckedCreateWithoutRouteInput> | MeetingPointCreateWithoutRouteInput[] | MeetingPointUncheckedCreateWithoutRouteInput[]
    connectOrCreate?: MeetingPointCreateOrConnectWithoutRouteInput | MeetingPointCreateOrConnectWithoutRouteInput[]
    createMany?: MeetingPointCreateManyRouteInputEnvelope
    connect?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
  }

  export type SubzoneCreateNestedManyWithoutRouteInput = {
    create?: XOR<SubzoneCreateWithoutRouteInput, SubzoneUncheckedCreateWithoutRouteInput> | SubzoneCreateWithoutRouteInput[] | SubzoneUncheckedCreateWithoutRouteInput[]
    connectOrCreate?: SubzoneCreateOrConnectWithoutRouteInput | SubzoneCreateOrConnectWithoutRouteInput[]
    createMany?: SubzoneCreateManyRouteInputEnvelope
    connect?: SubzoneWhereUniqueInput | SubzoneWhereUniqueInput[]
  }

  export type MeetingPointUncheckedCreateNestedManyWithoutRouteInput = {
    create?: XOR<MeetingPointCreateWithoutRouteInput, MeetingPointUncheckedCreateWithoutRouteInput> | MeetingPointCreateWithoutRouteInput[] | MeetingPointUncheckedCreateWithoutRouteInput[]
    connectOrCreate?: MeetingPointCreateOrConnectWithoutRouteInput | MeetingPointCreateOrConnectWithoutRouteInput[]
    createMany?: MeetingPointCreateManyRouteInputEnvelope
    connect?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
  }

  export type SubzoneUncheckedCreateNestedManyWithoutRouteInput = {
    create?: XOR<SubzoneCreateWithoutRouteInput, SubzoneUncheckedCreateWithoutRouteInput> | SubzoneCreateWithoutRouteInput[] | SubzoneUncheckedCreateWithoutRouteInput[]
    connectOrCreate?: SubzoneCreateOrConnectWithoutRouteInput | SubzoneCreateOrConnectWithoutRouteInput[]
    createMany?: SubzoneCreateManyRouteInputEnvelope
    connect?: SubzoneWhereUniqueInput | SubzoneWhereUniqueInput[]
  }

  export type ZoneUpdateOneRequiredWithoutRoutesNestedInput = {
    create?: XOR<ZoneCreateWithoutRoutesInput, ZoneUncheckedCreateWithoutRoutesInput>
    connectOrCreate?: ZoneCreateOrConnectWithoutRoutesInput
    upsert?: ZoneUpsertWithoutRoutesInput
    connect?: ZoneWhereUniqueInput
    update?: XOR<XOR<ZoneUpdateToOneWithWhereWithoutRoutesInput, ZoneUpdateWithoutRoutesInput>, ZoneUncheckedUpdateWithoutRoutesInput>
  }

  export type MeetingPointUpdateManyWithoutRouteNestedInput = {
    create?: XOR<MeetingPointCreateWithoutRouteInput, MeetingPointUncheckedCreateWithoutRouteInput> | MeetingPointCreateWithoutRouteInput[] | MeetingPointUncheckedCreateWithoutRouteInput[]
    connectOrCreate?: MeetingPointCreateOrConnectWithoutRouteInput | MeetingPointCreateOrConnectWithoutRouteInput[]
    upsert?: MeetingPointUpsertWithWhereUniqueWithoutRouteInput | MeetingPointUpsertWithWhereUniqueWithoutRouteInput[]
    createMany?: MeetingPointCreateManyRouteInputEnvelope
    set?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
    disconnect?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
    delete?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
    connect?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
    update?: MeetingPointUpdateWithWhereUniqueWithoutRouteInput | MeetingPointUpdateWithWhereUniqueWithoutRouteInput[]
    updateMany?: MeetingPointUpdateManyWithWhereWithoutRouteInput | MeetingPointUpdateManyWithWhereWithoutRouteInput[]
    deleteMany?: MeetingPointScalarWhereInput | MeetingPointScalarWhereInput[]
  }

  export type SubzoneUpdateManyWithoutRouteNestedInput = {
    create?: XOR<SubzoneCreateWithoutRouteInput, SubzoneUncheckedCreateWithoutRouteInput> | SubzoneCreateWithoutRouteInput[] | SubzoneUncheckedCreateWithoutRouteInput[]
    connectOrCreate?: SubzoneCreateOrConnectWithoutRouteInput | SubzoneCreateOrConnectWithoutRouteInput[]
    upsert?: SubzoneUpsertWithWhereUniqueWithoutRouteInput | SubzoneUpsertWithWhereUniqueWithoutRouteInput[]
    createMany?: SubzoneCreateManyRouteInputEnvelope
    set?: SubzoneWhereUniqueInput | SubzoneWhereUniqueInput[]
    disconnect?: SubzoneWhereUniqueInput | SubzoneWhereUniqueInput[]
    delete?: SubzoneWhereUniqueInput | SubzoneWhereUniqueInput[]
    connect?: SubzoneWhereUniqueInput | SubzoneWhereUniqueInput[]
    update?: SubzoneUpdateWithWhereUniqueWithoutRouteInput | SubzoneUpdateWithWhereUniqueWithoutRouteInput[]
    updateMany?: SubzoneUpdateManyWithWhereWithoutRouteInput | SubzoneUpdateManyWithWhereWithoutRouteInput[]
    deleteMany?: SubzoneScalarWhereInput | SubzoneScalarWhereInput[]
  }

  export type MeetingPointUncheckedUpdateManyWithoutRouteNestedInput = {
    create?: XOR<MeetingPointCreateWithoutRouteInput, MeetingPointUncheckedCreateWithoutRouteInput> | MeetingPointCreateWithoutRouteInput[] | MeetingPointUncheckedCreateWithoutRouteInput[]
    connectOrCreate?: MeetingPointCreateOrConnectWithoutRouteInput | MeetingPointCreateOrConnectWithoutRouteInput[]
    upsert?: MeetingPointUpsertWithWhereUniqueWithoutRouteInput | MeetingPointUpsertWithWhereUniqueWithoutRouteInput[]
    createMany?: MeetingPointCreateManyRouteInputEnvelope
    set?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
    disconnect?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
    delete?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
    connect?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
    update?: MeetingPointUpdateWithWhereUniqueWithoutRouteInput | MeetingPointUpdateWithWhereUniqueWithoutRouteInput[]
    updateMany?: MeetingPointUpdateManyWithWhereWithoutRouteInput | MeetingPointUpdateManyWithWhereWithoutRouteInput[]
    deleteMany?: MeetingPointScalarWhereInput | MeetingPointScalarWhereInput[]
  }

  export type SubzoneUncheckedUpdateManyWithoutRouteNestedInput = {
    create?: XOR<SubzoneCreateWithoutRouteInput, SubzoneUncheckedCreateWithoutRouteInput> | SubzoneCreateWithoutRouteInput[] | SubzoneUncheckedCreateWithoutRouteInput[]
    connectOrCreate?: SubzoneCreateOrConnectWithoutRouteInput | SubzoneCreateOrConnectWithoutRouteInput[]
    upsert?: SubzoneUpsertWithWhereUniqueWithoutRouteInput | SubzoneUpsertWithWhereUniqueWithoutRouteInput[]
    createMany?: SubzoneCreateManyRouteInputEnvelope
    set?: SubzoneWhereUniqueInput | SubzoneWhereUniqueInput[]
    disconnect?: SubzoneWhereUniqueInput | SubzoneWhereUniqueInput[]
    delete?: SubzoneWhereUniqueInput | SubzoneWhereUniqueInput[]
    connect?: SubzoneWhereUniqueInput | SubzoneWhereUniqueInput[]
    update?: SubzoneUpdateWithWhereUniqueWithoutRouteInput | SubzoneUpdateWithWhereUniqueWithoutRouteInput[]
    updateMany?: SubzoneUpdateManyWithWhereWithoutRouteInput | SubzoneUpdateManyWithWhereWithoutRouteInput[]
    deleteMany?: SubzoneScalarWhereInput | SubzoneScalarWhereInput[]
  }

  export type RouteCreateNestedOneWithoutSubzoneInput = {
    create?: XOR<RouteCreateWithoutSubzoneInput, RouteUncheckedCreateWithoutSubzoneInput>
    connectOrCreate?: RouteCreateOrConnectWithoutSubzoneInput
    connect?: RouteWhereUniqueInput
  }

  export type MeetingPointCreateNestedManyWithoutSubzoneInput = {
    create?: XOR<MeetingPointCreateWithoutSubzoneInput, MeetingPointUncheckedCreateWithoutSubzoneInput> | MeetingPointCreateWithoutSubzoneInput[] | MeetingPointUncheckedCreateWithoutSubzoneInput[]
    connectOrCreate?: MeetingPointCreateOrConnectWithoutSubzoneInput | MeetingPointCreateOrConnectWithoutSubzoneInput[]
    createMany?: MeetingPointCreateManySubzoneInputEnvelope
    connect?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
  }

  export type MeetingPointUncheckedCreateNestedManyWithoutSubzoneInput = {
    create?: XOR<MeetingPointCreateWithoutSubzoneInput, MeetingPointUncheckedCreateWithoutSubzoneInput> | MeetingPointCreateWithoutSubzoneInput[] | MeetingPointUncheckedCreateWithoutSubzoneInput[]
    connectOrCreate?: MeetingPointCreateOrConnectWithoutSubzoneInput | MeetingPointCreateOrConnectWithoutSubzoneInput[]
    createMany?: MeetingPointCreateManySubzoneInputEnvelope
    connect?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
  }

  export type RouteUpdateOneRequiredWithoutSubzoneNestedInput = {
    create?: XOR<RouteCreateWithoutSubzoneInput, RouteUncheckedCreateWithoutSubzoneInput>
    connectOrCreate?: RouteCreateOrConnectWithoutSubzoneInput
    upsert?: RouteUpsertWithoutSubzoneInput
    connect?: RouteWhereUniqueInput
    update?: XOR<XOR<RouteUpdateToOneWithWhereWithoutSubzoneInput, RouteUpdateWithoutSubzoneInput>, RouteUncheckedUpdateWithoutSubzoneInput>
  }

  export type MeetingPointUpdateManyWithoutSubzoneNestedInput = {
    create?: XOR<MeetingPointCreateWithoutSubzoneInput, MeetingPointUncheckedCreateWithoutSubzoneInput> | MeetingPointCreateWithoutSubzoneInput[] | MeetingPointUncheckedCreateWithoutSubzoneInput[]
    connectOrCreate?: MeetingPointCreateOrConnectWithoutSubzoneInput | MeetingPointCreateOrConnectWithoutSubzoneInput[]
    upsert?: MeetingPointUpsertWithWhereUniqueWithoutSubzoneInput | MeetingPointUpsertWithWhereUniqueWithoutSubzoneInput[]
    createMany?: MeetingPointCreateManySubzoneInputEnvelope
    set?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
    disconnect?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
    delete?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
    connect?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
    update?: MeetingPointUpdateWithWhereUniqueWithoutSubzoneInput | MeetingPointUpdateWithWhereUniqueWithoutSubzoneInput[]
    updateMany?: MeetingPointUpdateManyWithWhereWithoutSubzoneInput | MeetingPointUpdateManyWithWhereWithoutSubzoneInput[]
    deleteMany?: MeetingPointScalarWhereInput | MeetingPointScalarWhereInput[]
  }

  export type MeetingPointUncheckedUpdateManyWithoutSubzoneNestedInput = {
    create?: XOR<MeetingPointCreateWithoutSubzoneInput, MeetingPointUncheckedCreateWithoutSubzoneInput> | MeetingPointCreateWithoutSubzoneInput[] | MeetingPointUncheckedCreateWithoutSubzoneInput[]
    connectOrCreate?: MeetingPointCreateOrConnectWithoutSubzoneInput | MeetingPointCreateOrConnectWithoutSubzoneInput[]
    upsert?: MeetingPointUpsertWithWhereUniqueWithoutSubzoneInput | MeetingPointUpsertWithWhereUniqueWithoutSubzoneInput[]
    createMany?: MeetingPointCreateManySubzoneInputEnvelope
    set?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
    disconnect?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
    delete?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
    connect?: MeetingPointWhereUniqueInput | MeetingPointWhereUniqueInput[]
    update?: MeetingPointUpdateWithWhereUniqueWithoutSubzoneInput | MeetingPointUpdateWithWhereUniqueWithoutSubzoneInput[]
    updateMany?: MeetingPointUpdateManyWithWhereWithoutSubzoneInput | MeetingPointUpdateManyWithWhereWithoutSubzoneInput[]
    deleteMany?: MeetingPointScalarWhereInput | MeetingPointScalarWhereInput[]
  }

  export type RouteCreateNestedOneWithoutMeetingPointsInput = {
    create?: XOR<RouteCreateWithoutMeetingPointsInput, RouteUncheckedCreateWithoutMeetingPointsInput>
    connectOrCreate?: RouteCreateOrConnectWithoutMeetingPointsInput
    connect?: RouteWhereUniqueInput
  }

  export type SubzoneCreateNestedOneWithoutMeetingPointsInput = {
    create?: XOR<SubzoneCreateWithoutMeetingPointsInput, SubzoneUncheckedCreateWithoutMeetingPointsInput>
    connectOrCreate?: SubzoneCreateOrConnectWithoutMeetingPointsInput
    connect?: SubzoneWhereUniqueInput
  }

  export type RideCreateNestedManyWithoutOriginInput = {
    create?: XOR<RideCreateWithoutOriginInput, RideUncheckedCreateWithoutOriginInput> | RideCreateWithoutOriginInput[] | RideUncheckedCreateWithoutOriginInput[]
    connectOrCreate?: RideCreateOrConnectWithoutOriginInput | RideCreateOrConnectWithoutOriginInput[]
    createMany?: RideCreateManyOriginInputEnvelope
    connect?: RideWhereUniqueInput | RideWhereUniqueInput[]
  }

  export type RideCreateNestedManyWithoutDestinationInput = {
    create?: XOR<RideCreateWithoutDestinationInput, RideUncheckedCreateWithoutDestinationInput> | RideCreateWithoutDestinationInput[] | RideUncheckedCreateWithoutDestinationInput[]
    connectOrCreate?: RideCreateOrConnectWithoutDestinationInput | RideCreateOrConnectWithoutDestinationInput[]
    createMany?: RideCreateManyDestinationInputEnvelope
    connect?: RideWhereUniqueInput | RideWhereUniqueInput[]
  }

  export type RideUncheckedCreateNestedManyWithoutOriginInput = {
    create?: XOR<RideCreateWithoutOriginInput, RideUncheckedCreateWithoutOriginInput> | RideCreateWithoutOriginInput[] | RideUncheckedCreateWithoutOriginInput[]
    connectOrCreate?: RideCreateOrConnectWithoutOriginInput | RideCreateOrConnectWithoutOriginInput[]
    createMany?: RideCreateManyOriginInputEnvelope
    connect?: RideWhereUniqueInput | RideWhereUniqueInput[]
  }

  export type RideUncheckedCreateNestedManyWithoutDestinationInput = {
    create?: XOR<RideCreateWithoutDestinationInput, RideUncheckedCreateWithoutDestinationInput> | RideCreateWithoutDestinationInput[] | RideUncheckedCreateWithoutDestinationInput[]
    connectOrCreate?: RideCreateOrConnectWithoutDestinationInput | RideCreateOrConnectWithoutDestinationInput[]
    createMany?: RideCreateManyDestinationInputEnvelope
    connect?: RideWhereUniqueInput | RideWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RouteUpdateOneRequiredWithoutMeetingPointsNestedInput = {
    create?: XOR<RouteCreateWithoutMeetingPointsInput, RouteUncheckedCreateWithoutMeetingPointsInput>
    connectOrCreate?: RouteCreateOrConnectWithoutMeetingPointsInput
    upsert?: RouteUpsertWithoutMeetingPointsInput
    connect?: RouteWhereUniqueInput
    update?: XOR<XOR<RouteUpdateToOneWithWhereWithoutMeetingPointsInput, RouteUpdateWithoutMeetingPointsInput>, RouteUncheckedUpdateWithoutMeetingPointsInput>
  }

  export type SubzoneUpdateOneWithoutMeetingPointsNestedInput = {
    create?: XOR<SubzoneCreateWithoutMeetingPointsInput, SubzoneUncheckedCreateWithoutMeetingPointsInput>
    connectOrCreate?: SubzoneCreateOrConnectWithoutMeetingPointsInput
    upsert?: SubzoneUpsertWithoutMeetingPointsInput
    disconnect?: SubzoneWhereInput | boolean
    delete?: SubzoneWhereInput | boolean
    connect?: SubzoneWhereUniqueInput
    update?: XOR<XOR<SubzoneUpdateToOneWithWhereWithoutMeetingPointsInput, SubzoneUpdateWithoutMeetingPointsInput>, SubzoneUncheckedUpdateWithoutMeetingPointsInput>
  }

  export type RideUpdateManyWithoutOriginNestedInput = {
    create?: XOR<RideCreateWithoutOriginInput, RideUncheckedCreateWithoutOriginInput> | RideCreateWithoutOriginInput[] | RideUncheckedCreateWithoutOriginInput[]
    connectOrCreate?: RideCreateOrConnectWithoutOriginInput | RideCreateOrConnectWithoutOriginInput[]
    upsert?: RideUpsertWithWhereUniqueWithoutOriginInput | RideUpsertWithWhereUniqueWithoutOriginInput[]
    createMany?: RideCreateManyOriginInputEnvelope
    set?: RideWhereUniqueInput | RideWhereUniqueInput[]
    disconnect?: RideWhereUniqueInput | RideWhereUniqueInput[]
    delete?: RideWhereUniqueInput | RideWhereUniqueInput[]
    connect?: RideWhereUniqueInput | RideWhereUniqueInput[]
    update?: RideUpdateWithWhereUniqueWithoutOriginInput | RideUpdateWithWhereUniqueWithoutOriginInput[]
    updateMany?: RideUpdateManyWithWhereWithoutOriginInput | RideUpdateManyWithWhereWithoutOriginInput[]
    deleteMany?: RideScalarWhereInput | RideScalarWhereInput[]
  }

  export type RideUpdateManyWithoutDestinationNestedInput = {
    create?: XOR<RideCreateWithoutDestinationInput, RideUncheckedCreateWithoutDestinationInput> | RideCreateWithoutDestinationInput[] | RideUncheckedCreateWithoutDestinationInput[]
    connectOrCreate?: RideCreateOrConnectWithoutDestinationInput | RideCreateOrConnectWithoutDestinationInput[]
    upsert?: RideUpsertWithWhereUniqueWithoutDestinationInput | RideUpsertWithWhereUniqueWithoutDestinationInput[]
    createMany?: RideCreateManyDestinationInputEnvelope
    set?: RideWhereUniqueInput | RideWhereUniqueInput[]
    disconnect?: RideWhereUniqueInput | RideWhereUniqueInput[]
    delete?: RideWhereUniqueInput | RideWhereUniqueInput[]
    connect?: RideWhereUniqueInput | RideWhereUniqueInput[]
    update?: RideUpdateWithWhereUniqueWithoutDestinationInput | RideUpdateWithWhereUniqueWithoutDestinationInput[]
    updateMany?: RideUpdateManyWithWhereWithoutDestinationInput | RideUpdateManyWithWhereWithoutDestinationInput[]
    deleteMany?: RideScalarWhereInput | RideScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RideUncheckedUpdateManyWithoutOriginNestedInput = {
    create?: XOR<RideCreateWithoutOriginInput, RideUncheckedCreateWithoutOriginInput> | RideCreateWithoutOriginInput[] | RideUncheckedCreateWithoutOriginInput[]
    connectOrCreate?: RideCreateOrConnectWithoutOriginInput | RideCreateOrConnectWithoutOriginInput[]
    upsert?: RideUpsertWithWhereUniqueWithoutOriginInput | RideUpsertWithWhereUniqueWithoutOriginInput[]
    createMany?: RideCreateManyOriginInputEnvelope
    set?: RideWhereUniqueInput | RideWhereUniqueInput[]
    disconnect?: RideWhereUniqueInput | RideWhereUniqueInput[]
    delete?: RideWhereUniqueInput | RideWhereUniqueInput[]
    connect?: RideWhereUniqueInput | RideWhereUniqueInput[]
    update?: RideUpdateWithWhereUniqueWithoutOriginInput | RideUpdateWithWhereUniqueWithoutOriginInput[]
    updateMany?: RideUpdateManyWithWhereWithoutOriginInput | RideUpdateManyWithWhereWithoutOriginInput[]
    deleteMany?: RideScalarWhereInput | RideScalarWhereInput[]
  }

  export type RideUncheckedUpdateManyWithoutDestinationNestedInput = {
    create?: XOR<RideCreateWithoutDestinationInput, RideUncheckedCreateWithoutDestinationInput> | RideCreateWithoutDestinationInput[] | RideUncheckedCreateWithoutDestinationInput[]
    connectOrCreate?: RideCreateOrConnectWithoutDestinationInput | RideCreateOrConnectWithoutDestinationInput[]
    upsert?: RideUpsertWithWhereUniqueWithoutDestinationInput | RideUpsertWithWhereUniqueWithoutDestinationInput[]
    createMany?: RideCreateManyDestinationInputEnvelope
    set?: RideWhereUniqueInput | RideWhereUniqueInput[]
    disconnect?: RideWhereUniqueInput | RideWhereUniqueInput[]
    delete?: RideWhereUniqueInput | RideWhereUniqueInput[]
    connect?: RideWhereUniqueInput | RideWhereUniqueInput[]
    update?: RideUpdateWithWhereUniqueWithoutDestinationInput | RideUpdateWithWhereUniqueWithoutDestinationInput[]
    updateMany?: RideUpdateManyWithWhereWithoutDestinationInput | RideUpdateManyWithWhereWithoutDestinationInput[]
    deleteMany?: RideScalarWhereInput | RideScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type CarCreateWithoutRidesInput = {
    model: string
    color: string
    plateNumber: string
    totalSeats: number
    driver: DriverCreateNestedOneWithoutCarsInput
  }

  export type CarUncheckedCreateWithoutRidesInput = {
    id?: number
    driverId: number
    model: string
    color: string
    plateNumber: string
    totalSeats: number
  }

  export type CarCreateOrConnectWithoutRidesInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutRidesInput, CarUncheckedCreateWithoutRidesInput>
  }

  export type DriverCreateWithoutRidesInput = {
    name: string
    email: string
    phoneNumber: string
    licenseNumber: string
    gender: string
    approved?: boolean
    cars?: CarCreateNestedManyWithoutDriverInput
  }

  export type DriverUncheckedCreateWithoutRidesInput = {
    id?: number
    name: string
    email: string
    phoneNumber: string
    licenseNumber: string
    gender: string
    approved?: boolean
    cars?: CarUncheckedCreateNestedManyWithoutDriverInput
  }

  export type DriverCreateOrConnectWithoutRidesInput = {
    where: DriverWhereUniqueInput
    create: XOR<DriverCreateWithoutRidesInput, DriverUncheckedCreateWithoutRidesInput>
  }

  export type MeetingPointCreateWithoutRidesAsOriginInput = {
    name: string
    distanceToGiu: number
    timeToGiu: number
    latitude?: number | null
    longitude?: number | null
    route: RouteCreateNestedOneWithoutMeetingPointsInput
    subzone?: SubzoneCreateNestedOneWithoutMeetingPointsInput
    ridesAsDestination?: RideCreateNestedManyWithoutDestinationInput
  }

  export type MeetingPointUncheckedCreateWithoutRidesAsOriginInput = {
    id?: number
    name: string
    routeId: number
    subzoneId?: number | null
    distanceToGiu: number
    timeToGiu: number
    latitude?: number | null
    longitude?: number | null
    ridesAsDestination?: RideUncheckedCreateNestedManyWithoutDestinationInput
  }

  export type MeetingPointCreateOrConnectWithoutRidesAsOriginInput = {
    where: MeetingPointWhereUniqueInput
    create: XOR<MeetingPointCreateWithoutRidesAsOriginInput, MeetingPointUncheckedCreateWithoutRidesAsOriginInput>
  }

  export type MeetingPointCreateWithoutRidesAsDestinationInput = {
    name: string
    distanceToGiu: number
    timeToGiu: number
    latitude?: number | null
    longitude?: number | null
    route: RouteCreateNestedOneWithoutMeetingPointsInput
    subzone?: SubzoneCreateNestedOneWithoutMeetingPointsInput
    ridesAsOrigin?: RideCreateNestedManyWithoutOriginInput
  }

  export type MeetingPointUncheckedCreateWithoutRidesAsDestinationInput = {
    id?: number
    name: string
    routeId: number
    subzoneId?: number | null
    distanceToGiu: number
    timeToGiu: number
    latitude?: number | null
    longitude?: number | null
    ridesAsOrigin?: RideUncheckedCreateNestedManyWithoutOriginInput
  }

  export type MeetingPointCreateOrConnectWithoutRidesAsDestinationInput = {
    where: MeetingPointWhereUniqueInput
    create: XOR<MeetingPointCreateWithoutRidesAsDestinationInput, MeetingPointUncheckedCreateWithoutRidesAsDestinationInput>
  }

  export type CarUpsertWithoutRidesInput = {
    update: XOR<CarUpdateWithoutRidesInput, CarUncheckedUpdateWithoutRidesInput>
    create: XOR<CarCreateWithoutRidesInput, CarUncheckedCreateWithoutRidesInput>
    where?: CarWhereInput
  }

  export type CarUpdateToOneWithWhereWithoutRidesInput = {
    where?: CarWhereInput
    data: XOR<CarUpdateWithoutRidesInput, CarUncheckedUpdateWithoutRidesInput>
  }

  export type CarUpdateWithoutRidesInput = {
    model?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    totalSeats?: IntFieldUpdateOperationsInput | number
    driver?: DriverUpdateOneRequiredWithoutCarsNestedInput
  }

  export type CarUncheckedUpdateWithoutRidesInput = {
    id?: IntFieldUpdateOperationsInput | number
    driverId?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    totalSeats?: IntFieldUpdateOperationsInput | number
  }

  export type DriverUpsertWithoutRidesInput = {
    update: XOR<DriverUpdateWithoutRidesInput, DriverUncheckedUpdateWithoutRidesInput>
    create: XOR<DriverCreateWithoutRidesInput, DriverUncheckedCreateWithoutRidesInput>
    where?: DriverWhereInput
  }

  export type DriverUpdateToOneWithWhereWithoutRidesInput = {
    where?: DriverWhereInput
    data: XOR<DriverUpdateWithoutRidesInput, DriverUncheckedUpdateWithoutRidesInput>
  }

  export type DriverUpdateWithoutRidesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    licenseNumber?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    cars?: CarUpdateManyWithoutDriverNestedInput
  }

  export type DriverUncheckedUpdateWithoutRidesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    licenseNumber?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    cars?: CarUncheckedUpdateManyWithoutDriverNestedInput
  }

  export type MeetingPointUpsertWithoutRidesAsOriginInput = {
    update: XOR<MeetingPointUpdateWithoutRidesAsOriginInput, MeetingPointUncheckedUpdateWithoutRidesAsOriginInput>
    create: XOR<MeetingPointCreateWithoutRidesAsOriginInput, MeetingPointUncheckedCreateWithoutRidesAsOriginInput>
    where?: MeetingPointWhereInput
  }

  export type MeetingPointUpdateToOneWithWhereWithoutRidesAsOriginInput = {
    where?: MeetingPointWhereInput
    data: XOR<MeetingPointUpdateWithoutRidesAsOriginInput, MeetingPointUncheckedUpdateWithoutRidesAsOriginInput>
  }

  export type MeetingPointUpdateWithoutRidesAsOriginInput = {
    name?: StringFieldUpdateOperationsInput | string
    distanceToGiu?: FloatFieldUpdateOperationsInput | number
    timeToGiu?: IntFieldUpdateOperationsInput | number
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    route?: RouteUpdateOneRequiredWithoutMeetingPointsNestedInput
    subzone?: SubzoneUpdateOneWithoutMeetingPointsNestedInput
    ridesAsDestination?: RideUpdateManyWithoutDestinationNestedInput
  }

  export type MeetingPointUncheckedUpdateWithoutRidesAsOriginInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    routeId?: IntFieldUpdateOperationsInput | number
    subzoneId?: NullableIntFieldUpdateOperationsInput | number | null
    distanceToGiu?: FloatFieldUpdateOperationsInput | number
    timeToGiu?: IntFieldUpdateOperationsInput | number
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    ridesAsDestination?: RideUncheckedUpdateManyWithoutDestinationNestedInput
  }

  export type MeetingPointUpsertWithoutRidesAsDestinationInput = {
    update: XOR<MeetingPointUpdateWithoutRidesAsDestinationInput, MeetingPointUncheckedUpdateWithoutRidesAsDestinationInput>
    create: XOR<MeetingPointCreateWithoutRidesAsDestinationInput, MeetingPointUncheckedCreateWithoutRidesAsDestinationInput>
    where?: MeetingPointWhereInput
  }

  export type MeetingPointUpdateToOneWithWhereWithoutRidesAsDestinationInput = {
    where?: MeetingPointWhereInput
    data: XOR<MeetingPointUpdateWithoutRidesAsDestinationInput, MeetingPointUncheckedUpdateWithoutRidesAsDestinationInput>
  }

  export type MeetingPointUpdateWithoutRidesAsDestinationInput = {
    name?: StringFieldUpdateOperationsInput | string
    distanceToGiu?: FloatFieldUpdateOperationsInput | number
    timeToGiu?: IntFieldUpdateOperationsInput | number
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    route?: RouteUpdateOneRequiredWithoutMeetingPointsNestedInput
    subzone?: SubzoneUpdateOneWithoutMeetingPointsNestedInput
    ridesAsOrigin?: RideUpdateManyWithoutOriginNestedInput
  }

  export type MeetingPointUncheckedUpdateWithoutRidesAsDestinationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    routeId?: IntFieldUpdateOperationsInput | number
    subzoneId?: NullableIntFieldUpdateOperationsInput | number | null
    distanceToGiu?: FloatFieldUpdateOperationsInput | number
    timeToGiu?: IntFieldUpdateOperationsInput | number
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    ridesAsOrigin?: RideUncheckedUpdateManyWithoutOriginNestedInput
  }

  export type DriverCreateWithoutCarsInput = {
    name: string
    email: string
    phoneNumber: string
    licenseNumber: string
    gender: string
    approved?: boolean
    rides?: RideCreateNestedManyWithoutDriverInput
  }

  export type DriverUncheckedCreateWithoutCarsInput = {
    id?: number
    name: string
    email: string
    phoneNumber: string
    licenseNumber: string
    gender: string
    approved?: boolean
    rides?: RideUncheckedCreateNestedManyWithoutDriverInput
  }

  export type DriverCreateOrConnectWithoutCarsInput = {
    where: DriverWhereUniqueInput
    create: XOR<DriverCreateWithoutCarsInput, DriverUncheckedCreateWithoutCarsInput>
  }

  export type RideCreateWithoutCarInput = {
    createdAt?: Date | string
    departureTime: Date | string
    fromGiu: boolean
    girlsOnly: boolean
    price: number
    seatsLeft: number
    active?: boolean
    estimatedTime: number
    distance: number
    driver: DriverCreateNestedOneWithoutRidesInput
    origin: MeetingPointCreateNestedOneWithoutRidesAsOriginInput
    destination: MeetingPointCreateNestedOneWithoutRidesAsDestinationInput
  }

  export type RideUncheckedCreateWithoutCarInput = {
    id?: number
    driverId: number
    createdAt?: Date | string
    departureTime: Date | string
    fromGiu: boolean
    girlsOnly: boolean
    price: number
    seatsLeft: number
    active?: boolean
    originId: number
    destinationId: number
    estimatedTime: number
    distance: number
  }

  export type RideCreateOrConnectWithoutCarInput = {
    where: RideWhereUniqueInput
    create: XOR<RideCreateWithoutCarInput, RideUncheckedCreateWithoutCarInput>
  }

  export type RideCreateManyCarInputEnvelope = {
    data: RideCreateManyCarInput | RideCreateManyCarInput[]
    skipDuplicates?: boolean
  }

  export type DriverUpsertWithoutCarsInput = {
    update: XOR<DriverUpdateWithoutCarsInput, DriverUncheckedUpdateWithoutCarsInput>
    create: XOR<DriverCreateWithoutCarsInput, DriverUncheckedCreateWithoutCarsInput>
    where?: DriverWhereInput
  }

  export type DriverUpdateToOneWithWhereWithoutCarsInput = {
    where?: DriverWhereInput
    data: XOR<DriverUpdateWithoutCarsInput, DriverUncheckedUpdateWithoutCarsInput>
  }

  export type DriverUpdateWithoutCarsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    licenseNumber?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    rides?: RideUpdateManyWithoutDriverNestedInput
  }

  export type DriverUncheckedUpdateWithoutCarsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    licenseNumber?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    approved?: BoolFieldUpdateOperationsInput | boolean
    rides?: RideUncheckedUpdateManyWithoutDriverNestedInput
  }

  export type RideUpsertWithWhereUniqueWithoutCarInput = {
    where: RideWhereUniqueInput
    update: XOR<RideUpdateWithoutCarInput, RideUncheckedUpdateWithoutCarInput>
    create: XOR<RideCreateWithoutCarInput, RideUncheckedCreateWithoutCarInput>
  }

  export type RideUpdateWithWhereUniqueWithoutCarInput = {
    where: RideWhereUniqueInput
    data: XOR<RideUpdateWithoutCarInput, RideUncheckedUpdateWithoutCarInput>
  }

  export type RideUpdateManyWithWhereWithoutCarInput = {
    where: RideScalarWhereInput
    data: XOR<RideUpdateManyMutationInput, RideUncheckedUpdateManyWithoutCarInput>
  }

  export type RideScalarWhereInput = {
    AND?: RideScalarWhereInput | RideScalarWhereInput[]
    OR?: RideScalarWhereInput[]
    NOT?: RideScalarWhereInput | RideScalarWhereInput[]
    id?: IntFilter<"Ride"> | number
    driverId?: IntFilter<"Ride"> | number
    carId?: IntFilter<"Ride"> | number
    createdAt?: DateTimeFilter<"Ride"> | Date | string
    departureTime?: DateTimeFilter<"Ride"> | Date | string
    fromGiu?: BoolFilter<"Ride"> | boolean
    girlsOnly?: BoolFilter<"Ride"> | boolean
    price?: FloatFilter<"Ride"> | number
    seatsLeft?: IntFilter<"Ride"> | number
    active?: BoolFilter<"Ride"> | boolean
    originId?: IntFilter<"Ride"> | number
    destinationId?: IntFilter<"Ride"> | number
    estimatedTime?: IntFilter<"Ride"> | number
    distance?: FloatFilter<"Ride"> | number
  }

  export type CarCreateWithoutDriverInput = {
    model: string
    color: string
    plateNumber: string
    totalSeats: number
    rides?: RideCreateNestedManyWithoutCarInput
  }

  export type CarUncheckedCreateWithoutDriverInput = {
    id?: number
    model: string
    color: string
    plateNumber: string
    totalSeats: number
    rides?: RideUncheckedCreateNestedManyWithoutCarInput
  }

  export type CarCreateOrConnectWithoutDriverInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutDriverInput, CarUncheckedCreateWithoutDriverInput>
  }

  export type CarCreateManyDriverInputEnvelope = {
    data: CarCreateManyDriverInput | CarCreateManyDriverInput[]
    skipDuplicates?: boolean
  }

  export type RideCreateWithoutDriverInput = {
    createdAt?: Date | string
    departureTime: Date | string
    fromGiu: boolean
    girlsOnly: boolean
    price: number
    seatsLeft: number
    active?: boolean
    estimatedTime: number
    distance: number
    car: CarCreateNestedOneWithoutRidesInput
    origin: MeetingPointCreateNestedOneWithoutRidesAsOriginInput
    destination: MeetingPointCreateNestedOneWithoutRidesAsDestinationInput
  }

  export type RideUncheckedCreateWithoutDriverInput = {
    id?: number
    carId: number
    createdAt?: Date | string
    departureTime: Date | string
    fromGiu: boolean
    girlsOnly: boolean
    price: number
    seatsLeft: number
    active?: boolean
    originId: number
    destinationId: number
    estimatedTime: number
    distance: number
  }

  export type RideCreateOrConnectWithoutDriverInput = {
    where: RideWhereUniqueInput
    create: XOR<RideCreateWithoutDriverInput, RideUncheckedCreateWithoutDriverInput>
  }

  export type RideCreateManyDriverInputEnvelope = {
    data: RideCreateManyDriverInput | RideCreateManyDriverInput[]
    skipDuplicates?: boolean
  }

  export type CarUpsertWithWhereUniqueWithoutDriverInput = {
    where: CarWhereUniqueInput
    update: XOR<CarUpdateWithoutDriverInput, CarUncheckedUpdateWithoutDriverInput>
    create: XOR<CarCreateWithoutDriverInput, CarUncheckedCreateWithoutDriverInput>
  }

  export type CarUpdateWithWhereUniqueWithoutDriverInput = {
    where: CarWhereUniqueInput
    data: XOR<CarUpdateWithoutDriverInput, CarUncheckedUpdateWithoutDriverInput>
  }

  export type CarUpdateManyWithWhereWithoutDriverInput = {
    where: CarScalarWhereInput
    data: XOR<CarUpdateManyMutationInput, CarUncheckedUpdateManyWithoutDriverInput>
  }

  export type CarScalarWhereInput = {
    AND?: CarScalarWhereInput | CarScalarWhereInput[]
    OR?: CarScalarWhereInput[]
    NOT?: CarScalarWhereInput | CarScalarWhereInput[]
    id?: IntFilter<"Car"> | number
    driverId?: IntFilter<"Car"> | number
    model?: StringFilter<"Car"> | string
    color?: StringFilter<"Car"> | string
    plateNumber?: StringFilter<"Car"> | string
    totalSeats?: IntFilter<"Car"> | number
  }

  export type RideUpsertWithWhereUniqueWithoutDriverInput = {
    where: RideWhereUniqueInput
    update: XOR<RideUpdateWithoutDriverInput, RideUncheckedUpdateWithoutDriverInput>
    create: XOR<RideCreateWithoutDriverInput, RideUncheckedCreateWithoutDriverInput>
  }

  export type RideUpdateWithWhereUniqueWithoutDriverInput = {
    where: RideWhereUniqueInput
    data: XOR<RideUpdateWithoutDriverInput, RideUncheckedUpdateWithoutDriverInput>
  }

  export type RideUpdateManyWithWhereWithoutDriverInput = {
    where: RideScalarWhereInput
    data: XOR<RideUpdateManyMutationInput, RideUncheckedUpdateManyWithoutDriverInput>
  }

  export type RouteCreateWithoutZoneInput = {
    name: string
    meetingPoints?: MeetingPointCreateNestedManyWithoutRouteInput
    Subzone?: SubzoneCreateNestedManyWithoutRouteInput
  }

  export type RouteUncheckedCreateWithoutZoneInput = {
    id?: number
    name: string
    meetingPoints?: MeetingPointUncheckedCreateNestedManyWithoutRouteInput
    Subzone?: SubzoneUncheckedCreateNestedManyWithoutRouteInput
  }

  export type RouteCreateOrConnectWithoutZoneInput = {
    where: RouteWhereUniqueInput
    create: XOR<RouteCreateWithoutZoneInput, RouteUncheckedCreateWithoutZoneInput>
  }

  export type RouteCreateManyZoneInputEnvelope = {
    data: RouteCreateManyZoneInput | RouteCreateManyZoneInput[]
    skipDuplicates?: boolean
  }

  export type RouteUpsertWithWhereUniqueWithoutZoneInput = {
    where: RouteWhereUniqueInput
    update: XOR<RouteUpdateWithoutZoneInput, RouteUncheckedUpdateWithoutZoneInput>
    create: XOR<RouteCreateWithoutZoneInput, RouteUncheckedCreateWithoutZoneInput>
  }

  export type RouteUpdateWithWhereUniqueWithoutZoneInput = {
    where: RouteWhereUniqueInput
    data: XOR<RouteUpdateWithoutZoneInput, RouteUncheckedUpdateWithoutZoneInput>
  }

  export type RouteUpdateManyWithWhereWithoutZoneInput = {
    where: RouteScalarWhereInput
    data: XOR<RouteUpdateManyMutationInput, RouteUncheckedUpdateManyWithoutZoneInput>
  }

  export type RouteScalarWhereInput = {
    AND?: RouteScalarWhereInput | RouteScalarWhereInput[]
    OR?: RouteScalarWhereInput[]
    NOT?: RouteScalarWhereInput | RouteScalarWhereInput[]
    id?: IntFilter<"Route"> | number
    name?: StringFilter<"Route"> | string
    zoneId?: IntFilter<"Route"> | number
  }

  export type ZoneCreateWithoutRoutesInput = {
    name: string
    baseFare: number
    costPerMin: number
    costPerKm: number
  }

  export type ZoneUncheckedCreateWithoutRoutesInput = {
    id?: number
    name: string
    baseFare: number
    costPerMin: number
    costPerKm: number
  }

  export type ZoneCreateOrConnectWithoutRoutesInput = {
    where: ZoneWhereUniqueInput
    create: XOR<ZoneCreateWithoutRoutesInput, ZoneUncheckedCreateWithoutRoutesInput>
  }

  export type MeetingPointCreateWithoutRouteInput = {
    name: string
    distanceToGiu: number
    timeToGiu: number
    latitude?: number | null
    longitude?: number | null
    subzone?: SubzoneCreateNestedOneWithoutMeetingPointsInput
    ridesAsOrigin?: RideCreateNestedManyWithoutOriginInput
    ridesAsDestination?: RideCreateNestedManyWithoutDestinationInput
  }

  export type MeetingPointUncheckedCreateWithoutRouteInput = {
    id?: number
    name: string
    subzoneId?: number | null
    distanceToGiu: number
    timeToGiu: number
    latitude?: number | null
    longitude?: number | null
    ridesAsOrigin?: RideUncheckedCreateNestedManyWithoutOriginInput
    ridesAsDestination?: RideUncheckedCreateNestedManyWithoutDestinationInput
  }

  export type MeetingPointCreateOrConnectWithoutRouteInput = {
    where: MeetingPointWhereUniqueInput
    create: XOR<MeetingPointCreateWithoutRouteInput, MeetingPointUncheckedCreateWithoutRouteInput>
  }

  export type MeetingPointCreateManyRouteInputEnvelope = {
    data: MeetingPointCreateManyRouteInput | MeetingPointCreateManyRouteInput[]
    skipDuplicates?: boolean
  }

  export type SubzoneCreateWithoutRouteInput = {
    name: string
    baseFare: number
    costPerMin: number
    costPerKm: number
    meetingPoints?: MeetingPointCreateNestedManyWithoutSubzoneInput
  }

  export type SubzoneUncheckedCreateWithoutRouteInput = {
    id?: number
    name: string
    baseFare: number
    costPerMin: number
    costPerKm: number
    meetingPoints?: MeetingPointUncheckedCreateNestedManyWithoutSubzoneInput
  }

  export type SubzoneCreateOrConnectWithoutRouteInput = {
    where: SubzoneWhereUniqueInput
    create: XOR<SubzoneCreateWithoutRouteInput, SubzoneUncheckedCreateWithoutRouteInput>
  }

  export type SubzoneCreateManyRouteInputEnvelope = {
    data: SubzoneCreateManyRouteInput | SubzoneCreateManyRouteInput[]
    skipDuplicates?: boolean
  }

  export type ZoneUpsertWithoutRoutesInput = {
    update: XOR<ZoneUpdateWithoutRoutesInput, ZoneUncheckedUpdateWithoutRoutesInput>
    create: XOR<ZoneCreateWithoutRoutesInput, ZoneUncheckedCreateWithoutRoutesInput>
    where?: ZoneWhereInput
  }

  export type ZoneUpdateToOneWithWhereWithoutRoutesInput = {
    where?: ZoneWhereInput
    data: XOR<ZoneUpdateWithoutRoutesInput, ZoneUncheckedUpdateWithoutRoutesInput>
  }

  export type ZoneUpdateWithoutRoutesInput = {
    name?: StringFieldUpdateOperationsInput | string
    baseFare?: FloatFieldUpdateOperationsInput | number
    costPerMin?: FloatFieldUpdateOperationsInput | number
    costPerKm?: FloatFieldUpdateOperationsInput | number
  }

  export type ZoneUncheckedUpdateWithoutRoutesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    baseFare?: FloatFieldUpdateOperationsInput | number
    costPerMin?: FloatFieldUpdateOperationsInput | number
    costPerKm?: FloatFieldUpdateOperationsInput | number
  }

  export type MeetingPointUpsertWithWhereUniqueWithoutRouteInput = {
    where: MeetingPointWhereUniqueInput
    update: XOR<MeetingPointUpdateWithoutRouteInput, MeetingPointUncheckedUpdateWithoutRouteInput>
    create: XOR<MeetingPointCreateWithoutRouteInput, MeetingPointUncheckedCreateWithoutRouteInput>
  }

  export type MeetingPointUpdateWithWhereUniqueWithoutRouteInput = {
    where: MeetingPointWhereUniqueInput
    data: XOR<MeetingPointUpdateWithoutRouteInput, MeetingPointUncheckedUpdateWithoutRouteInput>
  }

  export type MeetingPointUpdateManyWithWhereWithoutRouteInput = {
    where: MeetingPointScalarWhereInput
    data: XOR<MeetingPointUpdateManyMutationInput, MeetingPointUncheckedUpdateManyWithoutRouteInput>
  }

  export type MeetingPointScalarWhereInput = {
    AND?: MeetingPointScalarWhereInput | MeetingPointScalarWhereInput[]
    OR?: MeetingPointScalarWhereInput[]
    NOT?: MeetingPointScalarWhereInput | MeetingPointScalarWhereInput[]
    id?: IntFilter<"MeetingPoint"> | number
    name?: StringFilter<"MeetingPoint"> | string
    routeId?: IntFilter<"MeetingPoint"> | number
    subzoneId?: IntNullableFilter<"MeetingPoint"> | number | null
    distanceToGiu?: FloatFilter<"MeetingPoint"> | number
    timeToGiu?: IntFilter<"MeetingPoint"> | number
    latitude?: FloatNullableFilter<"MeetingPoint"> | number | null
    longitude?: FloatNullableFilter<"MeetingPoint"> | number | null
  }

  export type SubzoneUpsertWithWhereUniqueWithoutRouteInput = {
    where: SubzoneWhereUniqueInput
    update: XOR<SubzoneUpdateWithoutRouteInput, SubzoneUncheckedUpdateWithoutRouteInput>
    create: XOR<SubzoneCreateWithoutRouteInput, SubzoneUncheckedCreateWithoutRouteInput>
  }

  export type SubzoneUpdateWithWhereUniqueWithoutRouteInput = {
    where: SubzoneWhereUniqueInput
    data: XOR<SubzoneUpdateWithoutRouteInput, SubzoneUncheckedUpdateWithoutRouteInput>
  }

  export type SubzoneUpdateManyWithWhereWithoutRouteInput = {
    where: SubzoneScalarWhereInput
    data: XOR<SubzoneUpdateManyMutationInput, SubzoneUncheckedUpdateManyWithoutRouteInput>
  }

  export type SubzoneScalarWhereInput = {
    AND?: SubzoneScalarWhereInput | SubzoneScalarWhereInput[]
    OR?: SubzoneScalarWhereInput[]
    NOT?: SubzoneScalarWhereInput | SubzoneScalarWhereInput[]
    id?: IntFilter<"Subzone"> | number
    name?: StringFilter<"Subzone"> | string
    routeId?: IntFilter<"Subzone"> | number
    baseFare?: FloatFilter<"Subzone"> | number
    costPerMin?: FloatFilter<"Subzone"> | number
    costPerKm?: FloatFilter<"Subzone"> | number
  }

  export type RouteCreateWithoutSubzoneInput = {
    name: string
    zone: ZoneCreateNestedOneWithoutRoutesInput
    meetingPoints?: MeetingPointCreateNestedManyWithoutRouteInput
  }

  export type RouteUncheckedCreateWithoutSubzoneInput = {
    id?: number
    name: string
    zoneId: number
    meetingPoints?: MeetingPointUncheckedCreateNestedManyWithoutRouteInput
  }

  export type RouteCreateOrConnectWithoutSubzoneInput = {
    where: RouteWhereUniqueInput
    create: XOR<RouteCreateWithoutSubzoneInput, RouteUncheckedCreateWithoutSubzoneInput>
  }

  export type MeetingPointCreateWithoutSubzoneInput = {
    name: string
    distanceToGiu: number
    timeToGiu: number
    latitude?: number | null
    longitude?: number | null
    route: RouteCreateNestedOneWithoutMeetingPointsInput
    ridesAsOrigin?: RideCreateNestedManyWithoutOriginInput
    ridesAsDestination?: RideCreateNestedManyWithoutDestinationInput
  }

  export type MeetingPointUncheckedCreateWithoutSubzoneInput = {
    id?: number
    name: string
    routeId: number
    distanceToGiu: number
    timeToGiu: number
    latitude?: number | null
    longitude?: number | null
    ridesAsOrigin?: RideUncheckedCreateNestedManyWithoutOriginInput
    ridesAsDestination?: RideUncheckedCreateNestedManyWithoutDestinationInput
  }

  export type MeetingPointCreateOrConnectWithoutSubzoneInput = {
    where: MeetingPointWhereUniqueInput
    create: XOR<MeetingPointCreateWithoutSubzoneInput, MeetingPointUncheckedCreateWithoutSubzoneInput>
  }

  export type MeetingPointCreateManySubzoneInputEnvelope = {
    data: MeetingPointCreateManySubzoneInput | MeetingPointCreateManySubzoneInput[]
    skipDuplicates?: boolean
  }

  export type RouteUpsertWithoutSubzoneInput = {
    update: XOR<RouteUpdateWithoutSubzoneInput, RouteUncheckedUpdateWithoutSubzoneInput>
    create: XOR<RouteCreateWithoutSubzoneInput, RouteUncheckedCreateWithoutSubzoneInput>
    where?: RouteWhereInput
  }

  export type RouteUpdateToOneWithWhereWithoutSubzoneInput = {
    where?: RouteWhereInput
    data: XOR<RouteUpdateWithoutSubzoneInput, RouteUncheckedUpdateWithoutSubzoneInput>
  }

  export type RouteUpdateWithoutSubzoneInput = {
    name?: StringFieldUpdateOperationsInput | string
    zone?: ZoneUpdateOneRequiredWithoutRoutesNestedInput
    meetingPoints?: MeetingPointUpdateManyWithoutRouteNestedInput
  }

  export type RouteUncheckedUpdateWithoutSubzoneInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    zoneId?: IntFieldUpdateOperationsInput | number
    meetingPoints?: MeetingPointUncheckedUpdateManyWithoutRouteNestedInput
  }

  export type MeetingPointUpsertWithWhereUniqueWithoutSubzoneInput = {
    where: MeetingPointWhereUniqueInput
    update: XOR<MeetingPointUpdateWithoutSubzoneInput, MeetingPointUncheckedUpdateWithoutSubzoneInput>
    create: XOR<MeetingPointCreateWithoutSubzoneInput, MeetingPointUncheckedCreateWithoutSubzoneInput>
  }

  export type MeetingPointUpdateWithWhereUniqueWithoutSubzoneInput = {
    where: MeetingPointWhereUniqueInput
    data: XOR<MeetingPointUpdateWithoutSubzoneInput, MeetingPointUncheckedUpdateWithoutSubzoneInput>
  }

  export type MeetingPointUpdateManyWithWhereWithoutSubzoneInput = {
    where: MeetingPointScalarWhereInput
    data: XOR<MeetingPointUpdateManyMutationInput, MeetingPointUncheckedUpdateManyWithoutSubzoneInput>
  }

  export type RouteCreateWithoutMeetingPointsInput = {
    name: string
    zone: ZoneCreateNestedOneWithoutRoutesInput
    Subzone?: SubzoneCreateNestedManyWithoutRouteInput
  }

  export type RouteUncheckedCreateWithoutMeetingPointsInput = {
    id?: number
    name: string
    zoneId: number
    Subzone?: SubzoneUncheckedCreateNestedManyWithoutRouteInput
  }

  export type RouteCreateOrConnectWithoutMeetingPointsInput = {
    where: RouteWhereUniqueInput
    create: XOR<RouteCreateWithoutMeetingPointsInput, RouteUncheckedCreateWithoutMeetingPointsInput>
  }

  export type SubzoneCreateWithoutMeetingPointsInput = {
    name: string
    baseFare: number
    costPerMin: number
    costPerKm: number
    route: RouteCreateNestedOneWithoutSubzoneInput
  }

  export type SubzoneUncheckedCreateWithoutMeetingPointsInput = {
    id?: number
    name: string
    routeId: number
    baseFare: number
    costPerMin: number
    costPerKm: number
  }

  export type SubzoneCreateOrConnectWithoutMeetingPointsInput = {
    where: SubzoneWhereUniqueInput
    create: XOR<SubzoneCreateWithoutMeetingPointsInput, SubzoneUncheckedCreateWithoutMeetingPointsInput>
  }

  export type RideCreateWithoutOriginInput = {
    createdAt?: Date | string
    departureTime: Date | string
    fromGiu: boolean
    girlsOnly: boolean
    price: number
    seatsLeft: number
    active?: boolean
    estimatedTime: number
    distance: number
    car: CarCreateNestedOneWithoutRidesInput
    driver: DriverCreateNestedOneWithoutRidesInput
    destination: MeetingPointCreateNestedOneWithoutRidesAsDestinationInput
  }

  export type RideUncheckedCreateWithoutOriginInput = {
    id?: number
    driverId: number
    carId: number
    createdAt?: Date | string
    departureTime: Date | string
    fromGiu: boolean
    girlsOnly: boolean
    price: number
    seatsLeft: number
    active?: boolean
    destinationId: number
    estimatedTime: number
    distance: number
  }

  export type RideCreateOrConnectWithoutOriginInput = {
    where: RideWhereUniqueInput
    create: XOR<RideCreateWithoutOriginInput, RideUncheckedCreateWithoutOriginInput>
  }

  export type RideCreateManyOriginInputEnvelope = {
    data: RideCreateManyOriginInput | RideCreateManyOriginInput[]
    skipDuplicates?: boolean
  }

  export type RideCreateWithoutDestinationInput = {
    createdAt?: Date | string
    departureTime: Date | string
    fromGiu: boolean
    girlsOnly: boolean
    price: number
    seatsLeft: number
    active?: boolean
    estimatedTime: number
    distance: number
    car: CarCreateNestedOneWithoutRidesInput
    driver: DriverCreateNestedOneWithoutRidesInput
    origin: MeetingPointCreateNestedOneWithoutRidesAsOriginInput
  }

  export type RideUncheckedCreateWithoutDestinationInput = {
    id?: number
    driverId: number
    carId: number
    createdAt?: Date | string
    departureTime: Date | string
    fromGiu: boolean
    girlsOnly: boolean
    price: number
    seatsLeft: number
    active?: boolean
    originId: number
    estimatedTime: number
    distance: number
  }

  export type RideCreateOrConnectWithoutDestinationInput = {
    where: RideWhereUniqueInput
    create: XOR<RideCreateWithoutDestinationInput, RideUncheckedCreateWithoutDestinationInput>
  }

  export type RideCreateManyDestinationInputEnvelope = {
    data: RideCreateManyDestinationInput | RideCreateManyDestinationInput[]
    skipDuplicates?: boolean
  }

  export type RouteUpsertWithoutMeetingPointsInput = {
    update: XOR<RouteUpdateWithoutMeetingPointsInput, RouteUncheckedUpdateWithoutMeetingPointsInput>
    create: XOR<RouteCreateWithoutMeetingPointsInput, RouteUncheckedCreateWithoutMeetingPointsInput>
    where?: RouteWhereInput
  }

  export type RouteUpdateToOneWithWhereWithoutMeetingPointsInput = {
    where?: RouteWhereInput
    data: XOR<RouteUpdateWithoutMeetingPointsInput, RouteUncheckedUpdateWithoutMeetingPointsInput>
  }

  export type RouteUpdateWithoutMeetingPointsInput = {
    name?: StringFieldUpdateOperationsInput | string
    zone?: ZoneUpdateOneRequiredWithoutRoutesNestedInput
    Subzone?: SubzoneUpdateManyWithoutRouteNestedInput
  }

  export type RouteUncheckedUpdateWithoutMeetingPointsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    zoneId?: IntFieldUpdateOperationsInput | number
    Subzone?: SubzoneUncheckedUpdateManyWithoutRouteNestedInput
  }

  export type SubzoneUpsertWithoutMeetingPointsInput = {
    update: XOR<SubzoneUpdateWithoutMeetingPointsInput, SubzoneUncheckedUpdateWithoutMeetingPointsInput>
    create: XOR<SubzoneCreateWithoutMeetingPointsInput, SubzoneUncheckedCreateWithoutMeetingPointsInput>
    where?: SubzoneWhereInput
  }

  export type SubzoneUpdateToOneWithWhereWithoutMeetingPointsInput = {
    where?: SubzoneWhereInput
    data: XOR<SubzoneUpdateWithoutMeetingPointsInput, SubzoneUncheckedUpdateWithoutMeetingPointsInput>
  }

  export type SubzoneUpdateWithoutMeetingPointsInput = {
    name?: StringFieldUpdateOperationsInput | string
    baseFare?: FloatFieldUpdateOperationsInput | number
    costPerMin?: FloatFieldUpdateOperationsInput | number
    costPerKm?: FloatFieldUpdateOperationsInput | number
    route?: RouteUpdateOneRequiredWithoutSubzoneNestedInput
  }

  export type SubzoneUncheckedUpdateWithoutMeetingPointsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    routeId?: IntFieldUpdateOperationsInput | number
    baseFare?: FloatFieldUpdateOperationsInput | number
    costPerMin?: FloatFieldUpdateOperationsInput | number
    costPerKm?: FloatFieldUpdateOperationsInput | number
  }

  export type RideUpsertWithWhereUniqueWithoutOriginInput = {
    where: RideWhereUniqueInput
    update: XOR<RideUpdateWithoutOriginInput, RideUncheckedUpdateWithoutOriginInput>
    create: XOR<RideCreateWithoutOriginInput, RideUncheckedCreateWithoutOriginInput>
  }

  export type RideUpdateWithWhereUniqueWithoutOriginInput = {
    where: RideWhereUniqueInput
    data: XOR<RideUpdateWithoutOriginInput, RideUncheckedUpdateWithoutOriginInput>
  }

  export type RideUpdateManyWithWhereWithoutOriginInput = {
    where: RideScalarWhereInput
    data: XOR<RideUpdateManyMutationInput, RideUncheckedUpdateManyWithoutOriginInput>
  }

  export type RideUpsertWithWhereUniqueWithoutDestinationInput = {
    where: RideWhereUniqueInput
    update: XOR<RideUpdateWithoutDestinationInput, RideUncheckedUpdateWithoutDestinationInput>
    create: XOR<RideCreateWithoutDestinationInput, RideUncheckedCreateWithoutDestinationInput>
  }

  export type RideUpdateWithWhereUniqueWithoutDestinationInput = {
    where: RideWhereUniqueInput
    data: XOR<RideUpdateWithoutDestinationInput, RideUncheckedUpdateWithoutDestinationInput>
  }

  export type RideUpdateManyWithWhereWithoutDestinationInput = {
    where: RideScalarWhereInput
    data: XOR<RideUpdateManyMutationInput, RideUncheckedUpdateManyWithoutDestinationInput>
  }

  export type RideCreateManyCarInput = {
    id?: number
    driverId: number
    createdAt?: Date | string
    departureTime: Date | string
    fromGiu: boolean
    girlsOnly: boolean
    price: number
    seatsLeft: number
    active?: boolean
    originId: number
    destinationId: number
    estimatedTime: number
    distance: number
  }

  export type RideUpdateWithoutCarInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departureTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromGiu?: BoolFieldUpdateOperationsInput | boolean
    girlsOnly?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    seatsLeft?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    estimatedTime?: IntFieldUpdateOperationsInput | number
    distance?: FloatFieldUpdateOperationsInput | number
    driver?: DriverUpdateOneRequiredWithoutRidesNestedInput
    origin?: MeetingPointUpdateOneRequiredWithoutRidesAsOriginNestedInput
    destination?: MeetingPointUpdateOneRequiredWithoutRidesAsDestinationNestedInput
  }

  export type RideUncheckedUpdateWithoutCarInput = {
    id?: IntFieldUpdateOperationsInput | number
    driverId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departureTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromGiu?: BoolFieldUpdateOperationsInput | boolean
    girlsOnly?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    seatsLeft?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    originId?: IntFieldUpdateOperationsInput | number
    destinationId?: IntFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    distance?: FloatFieldUpdateOperationsInput | number
  }

  export type RideUncheckedUpdateManyWithoutCarInput = {
    id?: IntFieldUpdateOperationsInput | number
    driverId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departureTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromGiu?: BoolFieldUpdateOperationsInput | boolean
    girlsOnly?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    seatsLeft?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    originId?: IntFieldUpdateOperationsInput | number
    destinationId?: IntFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    distance?: FloatFieldUpdateOperationsInput | number
  }

  export type CarCreateManyDriverInput = {
    id?: number
    model: string
    color: string
    plateNumber: string
    totalSeats: number
  }

  export type RideCreateManyDriverInput = {
    id?: number
    carId: number
    createdAt?: Date | string
    departureTime: Date | string
    fromGiu: boolean
    girlsOnly: boolean
    price: number
    seatsLeft: number
    active?: boolean
    originId: number
    destinationId: number
    estimatedTime: number
    distance: number
  }

  export type CarUpdateWithoutDriverInput = {
    model?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    totalSeats?: IntFieldUpdateOperationsInput | number
    rides?: RideUpdateManyWithoutCarNestedInput
  }

  export type CarUncheckedUpdateWithoutDriverInput = {
    id?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    totalSeats?: IntFieldUpdateOperationsInput | number
    rides?: RideUncheckedUpdateManyWithoutCarNestedInput
  }

  export type CarUncheckedUpdateManyWithoutDriverInput = {
    id?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    totalSeats?: IntFieldUpdateOperationsInput | number
  }

  export type RideUpdateWithoutDriverInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departureTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromGiu?: BoolFieldUpdateOperationsInput | boolean
    girlsOnly?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    seatsLeft?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    estimatedTime?: IntFieldUpdateOperationsInput | number
    distance?: FloatFieldUpdateOperationsInput | number
    car?: CarUpdateOneRequiredWithoutRidesNestedInput
    origin?: MeetingPointUpdateOneRequiredWithoutRidesAsOriginNestedInput
    destination?: MeetingPointUpdateOneRequiredWithoutRidesAsDestinationNestedInput
  }

  export type RideUncheckedUpdateWithoutDriverInput = {
    id?: IntFieldUpdateOperationsInput | number
    carId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departureTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromGiu?: BoolFieldUpdateOperationsInput | boolean
    girlsOnly?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    seatsLeft?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    originId?: IntFieldUpdateOperationsInput | number
    destinationId?: IntFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    distance?: FloatFieldUpdateOperationsInput | number
  }

  export type RideUncheckedUpdateManyWithoutDriverInput = {
    id?: IntFieldUpdateOperationsInput | number
    carId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departureTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromGiu?: BoolFieldUpdateOperationsInput | boolean
    girlsOnly?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    seatsLeft?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    originId?: IntFieldUpdateOperationsInput | number
    destinationId?: IntFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    distance?: FloatFieldUpdateOperationsInput | number
  }

  export type RouteCreateManyZoneInput = {
    id?: number
    name: string
  }

  export type RouteUpdateWithoutZoneInput = {
    name?: StringFieldUpdateOperationsInput | string
    meetingPoints?: MeetingPointUpdateManyWithoutRouteNestedInput
    Subzone?: SubzoneUpdateManyWithoutRouteNestedInput
  }

  export type RouteUncheckedUpdateWithoutZoneInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    meetingPoints?: MeetingPointUncheckedUpdateManyWithoutRouteNestedInput
    Subzone?: SubzoneUncheckedUpdateManyWithoutRouteNestedInput
  }

  export type RouteUncheckedUpdateManyWithoutZoneInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type MeetingPointCreateManyRouteInput = {
    id?: number
    name: string
    subzoneId?: number | null
    distanceToGiu: number
    timeToGiu: number
    latitude?: number | null
    longitude?: number | null
  }

  export type SubzoneCreateManyRouteInput = {
    id?: number
    name: string
    baseFare: number
    costPerMin: number
    costPerKm: number
  }

  export type MeetingPointUpdateWithoutRouteInput = {
    name?: StringFieldUpdateOperationsInput | string
    distanceToGiu?: FloatFieldUpdateOperationsInput | number
    timeToGiu?: IntFieldUpdateOperationsInput | number
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    subzone?: SubzoneUpdateOneWithoutMeetingPointsNestedInput
    ridesAsOrigin?: RideUpdateManyWithoutOriginNestedInput
    ridesAsDestination?: RideUpdateManyWithoutDestinationNestedInput
  }

  export type MeetingPointUncheckedUpdateWithoutRouteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    subzoneId?: NullableIntFieldUpdateOperationsInput | number | null
    distanceToGiu?: FloatFieldUpdateOperationsInput | number
    timeToGiu?: IntFieldUpdateOperationsInput | number
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    ridesAsOrigin?: RideUncheckedUpdateManyWithoutOriginNestedInput
    ridesAsDestination?: RideUncheckedUpdateManyWithoutDestinationNestedInput
  }

  export type MeetingPointUncheckedUpdateManyWithoutRouteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    subzoneId?: NullableIntFieldUpdateOperationsInput | number | null
    distanceToGiu?: FloatFieldUpdateOperationsInput | number
    timeToGiu?: IntFieldUpdateOperationsInput | number
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type SubzoneUpdateWithoutRouteInput = {
    name?: StringFieldUpdateOperationsInput | string
    baseFare?: FloatFieldUpdateOperationsInput | number
    costPerMin?: FloatFieldUpdateOperationsInput | number
    costPerKm?: FloatFieldUpdateOperationsInput | number
    meetingPoints?: MeetingPointUpdateManyWithoutSubzoneNestedInput
  }

  export type SubzoneUncheckedUpdateWithoutRouteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    baseFare?: FloatFieldUpdateOperationsInput | number
    costPerMin?: FloatFieldUpdateOperationsInput | number
    costPerKm?: FloatFieldUpdateOperationsInput | number
    meetingPoints?: MeetingPointUncheckedUpdateManyWithoutSubzoneNestedInput
  }

  export type SubzoneUncheckedUpdateManyWithoutRouteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    baseFare?: FloatFieldUpdateOperationsInput | number
    costPerMin?: FloatFieldUpdateOperationsInput | number
    costPerKm?: FloatFieldUpdateOperationsInput | number
  }

  export type MeetingPointCreateManySubzoneInput = {
    id?: number
    name: string
    routeId: number
    distanceToGiu: number
    timeToGiu: number
    latitude?: number | null
    longitude?: number | null
  }

  export type MeetingPointUpdateWithoutSubzoneInput = {
    name?: StringFieldUpdateOperationsInput | string
    distanceToGiu?: FloatFieldUpdateOperationsInput | number
    timeToGiu?: IntFieldUpdateOperationsInput | number
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    route?: RouteUpdateOneRequiredWithoutMeetingPointsNestedInput
    ridesAsOrigin?: RideUpdateManyWithoutOriginNestedInput
    ridesAsDestination?: RideUpdateManyWithoutDestinationNestedInput
  }

  export type MeetingPointUncheckedUpdateWithoutSubzoneInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    routeId?: IntFieldUpdateOperationsInput | number
    distanceToGiu?: FloatFieldUpdateOperationsInput | number
    timeToGiu?: IntFieldUpdateOperationsInput | number
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    ridesAsOrigin?: RideUncheckedUpdateManyWithoutOriginNestedInput
    ridesAsDestination?: RideUncheckedUpdateManyWithoutDestinationNestedInput
  }

  export type MeetingPointUncheckedUpdateManyWithoutSubzoneInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    routeId?: IntFieldUpdateOperationsInput | number
    distanceToGiu?: FloatFieldUpdateOperationsInput | number
    timeToGiu?: IntFieldUpdateOperationsInput | number
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type RideCreateManyOriginInput = {
    id?: number
    driverId: number
    carId: number
    createdAt?: Date | string
    departureTime: Date | string
    fromGiu: boolean
    girlsOnly: boolean
    price: number
    seatsLeft: number
    active?: boolean
    destinationId: number
    estimatedTime: number
    distance: number
  }

  export type RideCreateManyDestinationInput = {
    id?: number
    driverId: number
    carId: number
    createdAt?: Date | string
    departureTime: Date | string
    fromGiu: boolean
    girlsOnly: boolean
    price: number
    seatsLeft: number
    active?: boolean
    originId: number
    estimatedTime: number
    distance: number
  }

  export type RideUpdateWithoutOriginInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departureTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromGiu?: BoolFieldUpdateOperationsInput | boolean
    girlsOnly?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    seatsLeft?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    estimatedTime?: IntFieldUpdateOperationsInput | number
    distance?: FloatFieldUpdateOperationsInput | number
    car?: CarUpdateOneRequiredWithoutRidesNestedInput
    driver?: DriverUpdateOneRequiredWithoutRidesNestedInput
    destination?: MeetingPointUpdateOneRequiredWithoutRidesAsDestinationNestedInput
  }

  export type RideUncheckedUpdateWithoutOriginInput = {
    id?: IntFieldUpdateOperationsInput | number
    driverId?: IntFieldUpdateOperationsInput | number
    carId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departureTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromGiu?: BoolFieldUpdateOperationsInput | boolean
    girlsOnly?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    seatsLeft?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    destinationId?: IntFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    distance?: FloatFieldUpdateOperationsInput | number
  }

  export type RideUncheckedUpdateManyWithoutOriginInput = {
    id?: IntFieldUpdateOperationsInput | number
    driverId?: IntFieldUpdateOperationsInput | number
    carId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departureTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromGiu?: BoolFieldUpdateOperationsInput | boolean
    girlsOnly?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    seatsLeft?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    destinationId?: IntFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    distance?: FloatFieldUpdateOperationsInput | number
  }

  export type RideUpdateWithoutDestinationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departureTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromGiu?: BoolFieldUpdateOperationsInput | boolean
    girlsOnly?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    seatsLeft?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    estimatedTime?: IntFieldUpdateOperationsInput | number
    distance?: FloatFieldUpdateOperationsInput | number
    car?: CarUpdateOneRequiredWithoutRidesNestedInput
    driver?: DriverUpdateOneRequiredWithoutRidesNestedInput
    origin?: MeetingPointUpdateOneRequiredWithoutRidesAsOriginNestedInput
  }

  export type RideUncheckedUpdateWithoutDestinationInput = {
    id?: IntFieldUpdateOperationsInput | number
    driverId?: IntFieldUpdateOperationsInput | number
    carId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departureTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromGiu?: BoolFieldUpdateOperationsInput | boolean
    girlsOnly?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    seatsLeft?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    originId?: IntFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    distance?: FloatFieldUpdateOperationsInput | number
  }

  export type RideUncheckedUpdateManyWithoutDestinationInput = {
    id?: IntFieldUpdateOperationsInput | number
    driverId?: IntFieldUpdateOperationsInput | number
    carId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departureTime?: DateTimeFieldUpdateOperationsInput | Date | string
    fromGiu?: BoolFieldUpdateOperationsInput | boolean
    girlsOnly?: BoolFieldUpdateOperationsInput | boolean
    price?: FloatFieldUpdateOperationsInput | number
    seatsLeft?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    originId?: IntFieldUpdateOperationsInput | number
    estimatedTime?: IntFieldUpdateOperationsInput | number
    distance?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}