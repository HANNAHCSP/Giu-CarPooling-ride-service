generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ride {
  id            Int          @id @default(autoincrement())
  driverId      Int
  carId         Int
  createdAt     DateTime     @default(now())
  departureTime DateTime
  fromGiu       Boolean
  girlsOnly     Boolean
  price         Float
  seatsLeft     Int
  active        Boolean      @default(true)
  car           Car          @relation(fields: [carId], references: [id])
  driver        Driver       @relation(fields: [driverId], references: [id])
  originId      Int
  destinationId Int
  origin        MeetingPoint @relation("RideOrigin", fields: [originId], references: [id])
  destination   MeetingPoint @relation("RideDestination", fields: [destinationId], references: [id])
  estimatedTime Int // estimated time in minutes
  distance      Float // distance in kilometers
}

model Car {
  id          Int    @id @default(autoincrement())
  driverId    Int
  model       String
  color       String
  plateNumber String @unique
  totalSeats  Int
  driver      Driver @relation(fields: [driverId], references: [id])
  rides       Ride[]
}

model Driver {
  id            Int     @id @default(autoincrement())
  name          String
  email         String  @unique
  phoneNumber   String
  licenseNumber String  @unique
  gender        String
  approved      Boolean @default(false)
  cars          Car[]
  rides         Ride[]
}

// New models for zone-based pricing
model Zone {
  id         Int     @id @default(autoincrement())
  name       String  @unique
  baseFare   Float // Base fare for rides in this zone
  costPerMin Float // Cost per minute of travel time
  costPerKm  Float // Cost per kilometer of distance
  routes     Route[]
}

model Route {
  id            Int            @id @default(autoincrement())
  name          String
  zoneId        Int
  zone          Zone           @relation(fields: [zoneId], references: [id])
  meetingPoints MeetingPoint[]
  Subzone       Subzone[]

  @@unique([zoneId, name]) // Ensure route names are unique within a zone
}

// Add this model to your schema
model Subzone {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  routeId       Int
  route         Route          @relation(fields: [routeId], references: [id])
  baseFare      Float // Base fare for this specific subzone
  costPerMin    Float // Cost per minute for this subzone
  costPerKm     Float // Cost per kilometer for this subzone
  meetingPoints MeetingPoint[]
}

// Update MeetingPoint to be associated with subzones
model MeetingPoint {
  id                 Int      @id @default(autoincrement())
  name               String
  routeId            Int
  subzoneId          Int? // Optional relation to subzone
  route              Route    @relation(fields: [routeId], references: [id])
  subzone            Subzone? @relation(fields: [subzoneId], references: [id])
  distanceToGiu      Float // Distance to GIU in kilometers
  timeToGiu          Int // Time to GIU in minutes
  latitude           Float?
  longitude          Float?
  ridesAsOrigin      Ride[]   @relation("RideOrigin")
  ridesAsDestination Ride[]   @relation("RideDestination")

  @@unique([routeId, name]) // Ensure meeting point names are unique within a route
}
